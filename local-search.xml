<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gdb操作</title>
    <link href="/2025/02/28/gdb%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/02/28/gdb%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>gdb pwngdb pwbdbg操作</p><h2 id="x命令"><a href="#x命令" class="headerlink" title="x命令"></a>x命令</h2><p>GDB的<code>x</code>命令用于<strong>直接查看内存内容</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">x/[选项] &lt;内存地址或表达式&gt;<br>x/[重复次数][格式][单位大小] [地址]<br></code></pre></td></tr></table></figure><p><strong>重复次数</strong><br>指定连续多少个内存单元<br><code>x/4xw</code>：以16进制格式(<code>x</code>)显示4个<code>word</code>（<code>w</code>）（4字节）的数据</p><p><strong>格式</strong></p><table><thead><tr><th>格式字符</th><th>说明</th></tr></thead><tbody><tr><td><code>x</code></td><td>十六进制</td></tr><tr><td><code>d</code></td><td>十进制有符号数</td></tr><tr><td><code>u</code></td><td>十进制无符号数</td></tr><tr><td><code>o</code></td><td>八进制</td></tr><tr><td><code>t</code></td><td>二进制（位模式）</td></tr><tr><td><code>c</code></td><td>ASCII字符</td></tr><tr><td><code>s</code></td><td>C风格字符串（以<code>\0</code>结尾）</td></tr><tr><td><code>i</code></td><td>反汇编指令</td></tr></tbody></table><p><strong>单位大小</strong></p><table><thead><tr><th>字符</th><th>大小</th><th>说明</th></tr></thead><tbody><tr><td><code>b</code></td><td>1字节</td><td>Byte（8位）</td></tr><tr><td><code>h</code></td><td>2字节</td><td>Half-word（16位）</td></tr><tr><td><code>w</code></td><td>4字节</td><td>Word（32位系统默认）</td></tr><tr><td><code>g</code></td><td>8字节</td><td>Giant-word（64位系统默认）</td></tr></tbody></table><p>地址或表达式<br>可以是变量名、寄存器（<code>$rip</code>、<code>$rsp</code>）、直接地址（<code>0x400000</code>）或表达式(<code>&amp;var</code>)</p><hr>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gcc编译链接操作</title>
    <link href="/2025/02/27/gcc%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/02/27/gcc%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>编译成汇编文件(intel风格)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -S -masm=intel sample.c -o sample.s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="/2025/02/26/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/02/26/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><em>格式化字符串函数</em></p><blockquote><p>可以接受可变数量的参数，</p></blockquote><p>将第一个参数作为格式化字符串，根据其来解析之后的参数。<br>通俗来讲，格式化字符串函数就是将计算机内存中表示的数据转化为我们人类可读的字符串。</p><p>几乎所有的C&#x2F;C++程序都会利用格式化字符串函数来<strong>输出信息、调试程序、处理字符串</strong>。<br>一般来说，格式化字符串在利用的时候主要分为三个部分：</p><ul><li>格式化字符串函数</li><li>格式化字符串</li><li>后续参数，可选</li></ul><p>example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float %4.2f&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-number">123456</span>, <span class="hljs-number">3.14</span>)<br></code></pre></td></tr></table></figure><p>在进入printf函数之前的栈布局：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[stack bottom / high address]<br>...<br><span class="hljs-number">3.14</span><br><span class="hljs-number">123456</span><br>addr of <span class="hljs-string">&quot;red&quot;</span><br>addr of format string: <span class="hljs-symbol">Color</span> <span class="hljs-comment">%s...</span><br>[stack top / low address]<br></code></pre></td></tr></table></figure><p>在进入printf之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><ul><li>当前字符不是%，直接输出到响应标准输出</li><li>当前字符是%，继续读取下一个字符<ul><li>如果下一个字符是%，输出%</li><li>如果没字符，报错，也可能仍运行输出%【gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)】</li><li>如果有其它字符则根据字符，获取相应的参数，对其进行解析并输出</li></ul></li></ul><p>但是如果我们写成了这个样子:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Color %s, Number %d, Float $4.2f&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时我们可以发现我们并没有提供参数，那么程序会如何运行呢？<br>程序仍然会运行，而且会将栈上存储格式化字符串地址的高地址方向的三块相应大小的内存区域分别解析为</p><ol><li>解析其地址(内存中的值)对应的字符串</li><li>解析其内容(内存中的值)对应的整型值</li><li>解析其内容(内存中的值)对应的浮点值</li></ol><p>对于2，3来说倒也无妨，<br>但是对于1来说，若内存块中的值是一个不可访问的地址，比如0，那么程序就会因此而崩溃。</p><h1 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h1><p>在上一部分，我们已经看到了格式化字符串漏洞的两个利用手段</p><ul><li>使程序崩溃，因为栈上方（高地址&#x2F;栈底）的内存处存到的地址大概率不可访问，利用<code>%s</code></li><li>查看进程内容，利用<code>%d</code>，<code>%f</code>输出栈上的内容</li></ul><h2 id="利用手段之泄漏内存"><a href="#利用手段之泄漏内存" class="headerlink" title="利用手段之泄漏内存"></a>利用手段之<em>泄漏内存</em></h2><p>获取我们所想要的内容</p><ul><li>泄漏栈内存<ul><li>获取某个变量的值   <code>%d</code></li><li>获取某个变量对应地址的内存 <code>%s</code></li></ul></li><li>泄漏任意地址内存<ul><li>利用GOT表得到libc函数地址，进而获取libc，进而获取其它libc函数地址</li><li>盲打，dump整个程序，获取有用的信息。</li></ul></li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">%n$x<br>%&lt;位置&gt;$&lt;格式&gt;<br>%5$x<br></code></pre></td></tr></table></figure><p><code>%n</code> 表示要访问第<code>n</code>个参数（位置参数，整数）（输出函数的第n+1个参数）<br><code>$x</code> 指定以16进制格式输出该参数的值<br><code>%5$x</code> 表示以十六进制输出第5个参数（输出函数的第6个参数）的值</p><blockquote><p>[!tip] Sum up</p><ol><li>利用<code>%x</code>来获取对应栈的内存，但建议使用<code>%p</code>,可以不用考虑位数的区别</li><li>利用<code>%s</code>来获取变量所对应地址的内容，只不过有零截断</li><li>利用<code>%order$x</code>来获取指定参数的值，利用<code>%order$s</code>来获取指定参数对应地址的内容</li></ol></blockquote><hr><p>格式符</p><table><thead><tr><th>格式符</th><th>用途</th></tr></thead><tbody><tr><td><code>%d</code></td><td>十进制有符号整数</td></tr><tr><td><code>%u</code></td><td>十进制无符号整数</td></tr><tr><td><code>%x</code></td><td>十六进制</td></tr><tr><td><code>%o</code></td><td>八进制</td></tr><tr><td><code>%f</code></td><td>浮点数</td></tr><tr><td><code>%e</code></td><td>科学计数法</td></tr><tr><td><code>%c</code></td><td>单个字符</td></tr><tr><td><code>%p</code></td><td>指针地址，支持ascii或转义字符（<code>\n</code>)</td></tr><tr><td><code>%s</code></td><td>字符串，需以<code>\0</code>结尾，否则可能越界</td></tr><tr><td><code>%n</code></td><td><strong>写入已输出的字符数</strong></td></tr></tbody></table><hr><p><img src="/2024/10/29/hello-world/e-20250226224707861.png"></p><blockquote><p>本文在一定程度上参考了各种推文、wiki</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>库函数与系统调用</title>
    <link href="/2024/12/07/libc/"/>
    <url>/2024/12/07/libc/</url>
    
    <content type="html"><![CDATA[<blockquote><p>介绍pwn中常见的libc函数</p></blockquote><p>库函数与系统调用</p><h1 id="atoi"><a href="#atoi" class="headerlink" title="atoi()"></a>atoi()</h1><p><strong>标准库函数</strong></p><blockquote><p>ASCII to Integer<br>将字符串转换为对应的整数值</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">atoi</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span>;<br></code></pre></td></tr></table></figure><h1 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h1><p><em><strong>系统调用</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">void</span>* buf, <span class="hljs-type">size_t</span> count)</span>;<br>  <br>这样，你可以在程序运行时动态地分析 **glibc** 中的函数调用和行为。<br><br>### <span class="hljs-number">5.</span> **查看已经安装的库路径**<br><br>如果你对已经安装的 **glibc** 二进制文件中的实现感兴趣，虽然不能直接看到源代码，但可以使用工具来反汇编并分析其二进制```<br><br>---<br><span class="hljs-meta"># mmap()</span><br>`mmap`是一个用于内存映射的系统调用函数，在Linux和Unix-like系统中非常常见。它允许将一个文件或其他对象（设备、内存等）映射到进程的虚拟内存空间<br>可以通过<br>指针直接访问文件内容，无需读取和写入文件<br>```c<br><span class="hljs-type">void</span>* <span class="hljs-title function_">mmap</span><span class="hljs-params">(<span class="hljs-type">void</span>* addr, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)</span>;<br></code></pre></td></tr></table></figure><p>addr：建议的映射地址。如果传入NULL，操作系统会自动选择映射的地址<br>length：映射区域的长度，单位是字节<br>prot：指定映射区域的访问权限，通常是以下几个值的组合：</p><ul><li>PROT_READ：页可以被读取</li><li>PROT_WRITE：页可以被写入</li><li>PROT_EXEC：页可以被执行</li><li>PROT_NONE：页不能被访问<br>flags：映射的特性和行为，常见的值有：</li><li>MAP_SHARED：修改同步到文件或设备，适用于共享内存</li><li>MAP_PRIVATE：修改不会影响文件或设备，而是创建一个映射的副本，适用于私有内存</li><li>MAP_FIXED：如果映射地址已经有映射区域，它会被替换</li><li>MAP_ANONYMOUS：映射不与任何文件关联，通常用于申请匿名内存，<code>fd</code>必须为-1，offset也必须为0</li><li>fd：文件描述符，指向需要映射的文件。如果映射匿名内存，传入-1</li><li>offset：文件偏移量，表示映射内容在文件中的起始位置，映射必须是页大小的整数倍。</li></ul><hr><h1 id="阅读glibc源代码"><a href="#阅读glibc源代码" class="headerlink" title="阅读glibc源代码"></a>阅读glibc源代码</h1><p>通过<code>libc</code>库文件本身，无法直接查看其源代码。<br><code>libc</code>文件（<code>libc.so</code>或<code>libc.so.6</code>）是已经编译好的共享库，它们包含了库的二进制实现。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES</title>
    <link href="/2024/11/26/AES/"/>
    <url>/2024/11/26/AES/</url>
    
    <content type="html"><![CDATA[<blockquote><p>密码学实验</p></blockquote><h1 id="AES算法的基本结构"><a href="#AES算法的基本结构" class="headerlink" title="AES算法的基本结构"></a>AES算法的基本结构</h1><p>输入：128位明文，128&#x2F;192&#x2F;256位密钥</p><p>子过程： </p><ol><li>S盒变换</li><li>行移位</li><li>列混合</li><li>轮密钥加</li></ol><p>输出： 128位密文</p><h1 id="AES算法的基本运算"><a href="#AES算法的基本运算" class="headerlink" title="AES算法的基本运算"></a>AES算法的基本运算</h1><ol><li><p>$GF(2^8)$上的加法</p></li><li><p>$GF(2^8)上的多项式加法$</p></li><li><p>$GF(2^8)上的乘法$</p><ol><li><p>借助xtime运算快速实现</p><ul><li>倍乘函数：移位运算（定义：${02} \cdot {??}$）</li><li>加法：异或运算<br> 由于$GF(2^8)$中的所有元素都可以表示为02的不同幂次的和，因此所有的乘法运算都能够通过重复调用北城函数和加法快速实现<br> 例：({}中表示16进制)<br> $$<br> \begin{aligned}<br> y \cdot {15} &amp;&#x3D;y\cdot {01 \oplus 04 \oplus 10} &#x3D; y\cdot {01 \oplus 02^2 \oplus 02^4}<br> \<br> &amp;&#x3D; y\oplus xtime(xtime(y)) \oplus xtime(xtime(xtime(xtime(y))))<br> \<br> &amp;&#x3D; y \oplus xtime(xtime(y\oplus xtime(xtime(y))))<br> \end{aligned}<br> $$<br> 更快速的方法：<br> 造表：将128所有乘法结果取值与计算，存入表中，直接查表</li></ul></li><li><p>借助生成元快速实现<br> $GF(2^8)$的全体<strong>非零元素</strong>对于 <em>乘法</em> 构成<strong>循环群</strong>。设$a$为<strong>生成元</strong>，则循环群<br> $G &#x3D; {a^0, a^1, … a^{254}}$<br> G中的乘法运算：<br> $a^p \cdot a^q &#x3D; a^{(p+q) mod 255}$<br> 于是可以把$GF(2^8)$上的乘法运算简化为整数的加法运算。</p><p> <em>零元素</em>00与任何元素相乘都得00</p></li></ol></li></ol><h1 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h1><ol><li>造表</li></ol>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>codeQL一命速通</title>
    <link href="/2024/11/12/codeQL/"/>
    <url>/2024/11/12/codeQL/</url>
    
    <content type="html"><![CDATA[<p>CodeQL能干啥：<br>编写查询。。。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">codeql database create ~/CodeQL/databases/codeql_demo --language=<span class="hljs-string">&quot;python&quot;</span> --source-root=<br></code></pre></td></tr></table></figure><p>CodeQL采用类似SQL的查询语言，但专为代码分析设计。</p><p>其语法主要围绕从代码中提取信息的操作，包括对象选择、路径探索和条件过滤。</p><p>CodeQL查询通常由以下几个部分组成：</p><ul><li>from：选择数据源，指定查询的对象</li><li>where：条件过滤，用于限制结果</li><li>select：返回查询的结果</li><li>order by：对结果进行排序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ql">import javascript <br><br>//查找不安全的SQL查询<br>from DataFlow::Node source, DataFlow::Node sink<br>where <br>//选择通过用户<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>静态分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪随机</title>
    <link href="/2024/11/12/%E4%BC%AA%E9%9A%8F%E6%9C%BA/"/>
    <url>/2024/11/12/%E4%BC%AA%E9%9A%8F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DSBCTF-做不出来的签到题</title>
    <link href="/2024/11/12/DSBCTF-%E5%81%9A%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E7%AD%BE%E5%88%B0%E9%A2%98/"/>
    <url>/2024/11/12/DSBCTF-%E5%81%9A%E4%B8%8D%E5%87%BA%E6%9D%A5%E7%9A%84%E7%AD%BE%E5%88%B0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>😭😭😭 做不出来签到</p>]]></content>
    
    
    <categories>
      
      <category>WP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>发送字节码和字符串的区别</title>
    <link href="/2024/11/09/%E5%8F%91%E9%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2024/11/09/%E5%8F%91%E9%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ISCTF - girlfriend</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python语法之模块化编程</title>
    <link href="/2024/11/06/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/11/06/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><code>import</code></p><p><code>from ... import ... </code></p><p><code>from ... import ... as ...</code></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>令我困惑的一题：返回地址应该填啥？</title>
    <link href="/2024/11/05/%E4%BB%A4%E6%88%91%E5%9B%B0%E6%83%91%E7%9A%84%E4%B8%80%E9%A2%98%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E5%BA%94%E8%AF%A5%E5%A1%AB%E5%95%A5%EF%BC%9F/"/>
    <url>/2024/11/05/%E4%BB%A4%E6%88%91%E5%9B%B0%E6%83%91%E7%9A%84%E4%B8%80%E9%A2%98%EF%BC%9A%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80%E5%BA%94%E8%AF%A5%E5%A1%AB%E5%95%A5%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结：不囫囵吞枣，gdb调试见真知</p></blockquote><p>平台：buuctf<br> 题目：jarvisoj_test_your_memory<br>hexo</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再探GOT&amp;PLT及延迟绑定</title>
    <link href="/2024/11/04/%E5%86%8D%E6%8E%A2GOT-PLT%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/"/>
    <url>/2024/11/04/%E5%86%8D%E6%8E%A2GOT-PLT%E5%8F%8A%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>之前刚学完GOT&amp;PLT及延迟绑定，转头用的时候就感觉变得有点陌生，<br>看来还是得把详细的过程和分析总结写下来呀。</p><p>先挖个坑，有空就写</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2libc</title>
    <link href="/2024/11/04/ret2libc/"/>
    <url>/2024/11/04/ret2libc/</url>
    
    <content type="html"><![CDATA[<p>hexo</p><h3 id="什么样的题是ret2libc，这类题该怎么做？"><a href="#什么样的题是ret2libc，这类题该怎么做？" class="headerlink" title="什么样的题是ret2libc，这类题该怎么做？"></a>什么样的题是ret2libc，这类题该怎么做？</h3><p>程序的特征是：<br><strong>能</strong>进行栈<strong>溢出</strong>，没有<code>system</code>函数，也没有<code>&quot;/bin/sh&quot;</code>参数<br>无法进行常规的ret2text<br>ret2libc的关键是获取libc的版本，所以需要获得<code>libc.so</code>中函数的偏移量，<br>所以<strong>需要</strong>一个<strong>输出函数</strong>，<code>.got.plt</code>中需要有<strong>libc中的函数</strong>，我们才能获取到libc中函数的<strong>真实地址</strong></p><p>从而利用<strong>LibcSearcher</strong>确定libc版本</p><hr><p>LibcSearcher原理？<br>基地址范围？</p><hr><p>前置知识：<br>libc中有<code>system</code>函数，而<code>libc.so</code>动态偏移链接库中的函数之间的相对偏移是固定的</p><p>ALSR保护不会随机内存地址的后12位（后3个字节）</p><p><code>pwntools</code>基本语法：<br><code>elf.got()</code>返回的是<code>.got</code>中函数 相对plt基地址的偏移量<br><code>elf.plt()</code>返回的是<code>.plt</code>中函数 相对got基地址的偏移量</p><hr><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p><code>write()</code>函数是C标准库（libc）中的一个系统调用，常用于向文件描述符写入数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count)</span>;<br></code></pre></td></tr></table></figure><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><ol><li><code>fd</code> ：目标文件描述符<br>常见：</li></ol><ul><li><code>0</code>：标准输入</li><li><code>1</code>：标准输出</li><li><code>2</code>：标准错误输出</li><li><code>open</code>系统调用获取文件描述符</li></ul><ol start="2"><li><code>buf</code>：源数据缓冲区</li><li><code>count</code>：要写入的<strong>字节数</strong></li></ol><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><ul><li>成功 返回写入的字节数</li><li>失败 返回-1</li></ul><hr><h1 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h1><h6 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h6><p>原版接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>obj = LibcSearcher(<span class="hljs-string">&quot;fgets&quot;</span>,<span class="hljs-number">0x7ff39014bd90</span>)  <span class="hljs-comment"># 使用一个已知符号地址作为初始约束，初始化LibcSearcher</span><br>obj.add_condition(<span class="hljs-string">&quot;atoi&quot;</span>, <span class="hljs-number">218528</span>)  <span class="hljs-comment"># 添加一个约束条件</span><br>obj.dump(<span class="hljs-string">&quot;printf&quot;</span>)  <span class="hljs-comment"># 根据已有约束条件，查询某个符号在Libc中的地址(偏移量)</span><br></code></pre></td></tr></table></figure><p>新增接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">len</span>(obj)  <span class="hljs-comment"># 返回在当前约束条件下，可能的Libc数量</span><br><span class="hljs-built_in">print</span>(obj)  <span class="hljs-comment"># 若Libc已被唯一确定，打印其详细信息</span><br><br><span class="hljs-keyword">for</span> libc <span class="hljs-keyword">in</span> obj:<br><span class="hljs-built_in">print</span>(libc)  <span class="hljs-comment"># 实现了迭代器，打印（或其他操作）当前所有可能的Libc</span><br><br>obj.select_libc()  <span class="hljs-comment"># 打印可能的Libc列表，手动选择一个认为正确的Libc</span><br>obj.select_libc(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 手动选择2号Libc作为正确的Libc</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ret2xx</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python语法之字典</title>
    <link href="/2024/11/04/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AD%97%E5%85%B8/"/>
    <url>/2024/11/04/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>puts函数</title>
    <link href="/2024/11/01/puts%E5%87%BD%E6%95%B0/"/>
    <url>/2024/11/01/puts%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>做了一个赣ctf上的题，没想到这漏洞如此简单我竟然没发现，真是浅薄了，<br>在此记录一下</p><p><code>puts()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">puts</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br></code></pre></td></tr></table></figure><p><code>puts()</code>函数的作用是持续输出字符指针<code>s</code>指向的字符，直到遇到空字符<code>\0</code>为止，</p><p>假设<code>char s[256]</code>中<code>s</code>指向的内容是由用户输入的</p><p>那么用户可以输入一个长度超过256的字符串<br>即使机器只读取前256个字符，那么也会导致<code>s[256]</code>中没有<code>\0</code>字符，</p><p>从而使puts持续输出s以及s之后的内存内容（以字符串的形式），直到遇到<code>\0</code>为止</p><p>从而造成内存泄漏</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>泄漏信息</tag>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python语法之关键字try</title>
    <link href="/2024/11/01/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E9%94%AE%E5%AD%97try/"/>
    <url>/2024/11/01/python%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%B3%E9%94%AE%E5%AD%97try/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obsidian+hexo方案解决图片显示问题</title>
    <link href="/2024/10/30/obsidian-hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2024/10/30/obsidian-hexo%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>建立博客后遇到的第一个问题就是hexo上的图片显示问题</p><hr><p>想到一种考虑，把图片全都放在一个文件夹里试试<br>挖个坑<br>有空试试</p><p>测试图片</p><p>测试失败</p><p>测试图片2</p><p>好，试过了，确实不行<br>现有obsidian设置和hexo设置无法满足这个要求</p><hr><p>只有原先上面的方法是行的（目前最优）</p><p>成功</p><p>但可以考虑设置<code>_config.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>这样在<code>hexo new post &lt;name&gt;</code>时，就不会再多创建一个可能用不到的资源文件夹<br>在obsidian中粘贴时自动创建即可</p><p>注意：<br>obsidian插件<code>Custom Attachment Loaction</code>设置中附件的命名问题</p><hr><p>发现：<br>排在前面的url错误的图片竟然也会影响后面的所有图片，使后面的图片显示不出来</p><hr><p>md，还是得改成true</p><p>和插件设置中附件文件夹中文件的命名倒是没关系<br>和属性中的title也没关系</p><p>甚至和文件、文件夹的命名也没关系，只要合法且对应即可</p><hr><p><img src="/2024/10/29/hello-world/o%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/file20241105202739043.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>new_article</title>
    <link href="/2024/10/29/new-article/"/>
    <url>/2024/10/29/new-article/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一篇测试文h"><a href="#这是一篇测试文h" class="headerlink" title="这是一篇测试文h"></a>这是一篇测试文h</h1><p>使用hexo的步骤</p><p>新建about页：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><p>添加layout</p><p>新建文章</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new post new_article<br></code></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>再试？</p><p><img src="/2024/10/29/hello-world/file-20241105202749069.png"></p><p>将文章发布到github：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/29/hello-world/"/>
    <url>/2024/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
